var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
				value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**This class is automatically generated by LayaAirIDE, please do not make any modifications. */


var _BankUI = require("./script/BankUI");

var _BankUI2 = _interopRequireDefault(_BankUI);

var _BankCardUI = require("./script/BankCardUI");

var _BankCardUI2 = _interopRequireDefault(_BankCardUI);

var _BankCardAdUI = require("./script/BankCardAdUI");

var _BankCardAdUI2 = _interopRequireDefault(_BankCardAdUI);

var _HxButton = require("./script/HxButton");

var _HxButton2 = _interopRequireDefault(_HxButton);

var _ChestUI = require("./script/ChestUI");

var _ChestUI2 = _interopRequireDefault(_ChestUI);

var _EventTimerView = require("./script/EventTimerView");

var _EventTimerView2 = _interopRequireDefault(_EventTimerView);

var _FriendDefeatUI = require("./script/FriendDefeatUI");

var _FriendDefeatUI2 = _interopRequireDefault(_FriendDefeatUI);

var _FriendsListItem = require("./script/FriendsListItem");

var _FriendsListItem2 = _interopRequireDefault(_FriendsListItem);

var _FriendsUI = require("./script/FriendsUI");

var _FriendsUI2 = _interopRequireDefault(_FriendsUI);

var _GameResultUI = require("./script/GameResultUI");

var _GameResultUI2 = _interopRequireDefault(_GameResultUI);

var _GameUI = require("./script/GameUI");

var _GameUI2 = _interopRequireDefault(_GameUI);

var _FloatUpHint = require("./script/FloatUpHint");

var _FloatUpHint2 = _interopRequireDefault(_FloatUpHint);

var _MainUI = require("./script/MainUI");

var _MainUI2 = _interopRequireDefault(_MainUI);

var _MenuUI = require("./script/MenuUI");

var _MenuUI2 = _interopRequireDefault(_MenuUI);

var _OrderResultUI = require("./script/OrderResultUI");

var _OrderResultUI2 = _interopRequireDefault(_OrderResultUI);

var _TutorUI = require("./script/TutorUI");

var _TutorUI2 = _interopRequireDefault(_TutorUI);

var _SoundToggle = require("./script/SoundToggle");

var _SoundToggle2 = _interopRequireDefault(_SoundToggle);

var _DevVKScores = require("./script/DevVKScores");

var _DevVKScores2 = _interopRequireDefault(_DevVKScores);

var _PromoView = require("./script/PromoView");

var _PromoView2 = _interopRequireDefault(_PromoView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameConfig = function () {
				function GameConfig() {
								_classCallCheck(this, GameConfig);
				}

				_createClass(GameConfig, null, [{
								key: "init",
								value: function init() {
												//注册Script或者Runtime引用
												var reg = Laya.ClassUtils.regClass;
												reg("script/BankUI.js", _BankUI2.default);
												reg("script/BankCardUI.js", _BankCardUI2.default);
												reg("script/BankCardAdUI.js", _BankCardAdUI2.default);
												reg("script/HxButton.js", _HxButton2.default);
												reg("script/ChestUI.js", _ChestUI2.default);
												reg("script/EventTimerView.js", _EventTimerView2.default);
												reg("script/FriendDefeatUI.js", _FriendDefeatUI2.default);
												reg("script/FriendsListItem.js", _FriendsListItem2.default);
												reg("script/FriendsUI.js", _FriendsUI2.default);
												reg("script/GameResultUI.js", _GameResultUI2.default);
												reg("script/GameUI.js", _GameUI2.default);
												reg("script/FloatUpHint.js", _FloatUpHint2.default);
												reg("script/MainUI.js", _MainUI2.default);
												reg("script/MenuUI.js", _MenuUI2.default);
												reg("script/OrderResultUI.js", _OrderResultUI2.default);
												reg("script/TutorUI.js", _TutorUI2.default);
												reg("script/SoundToggle.js", _SoundToggle2.default);
												reg("script/DevVKScores.js", _DevVKScores2.default);
												reg("script/PromoView.js", _PromoView2.default);
								}
				}]);

				return GameConfig;
}();

exports.default = GameConfig;

GameConfig.width = 750;
GameConfig.height = 1334;
GameConfig.scaleMode = "full";
GameConfig.screenMode = "none";
GameConfig.alignV = "middle";
GameConfig.alignH = "center";
GameConfig.startScene = "scenes/MainScene.scene";
GameConfig.sceneRoot = "";
GameConfig.debug = false;
GameConfig.stat = false;
GameConfig.physicsDebug = false;
GameConfig.exportSceneToJson = false;

GameConfig.init();

},{"./script/BankCardAdUI":9,"./script/BankCardUI":10,"./script/BankUI":11,"./script/ChestUI":16,"./script/DevVKScores":17,"./script/EventTimerView":18,"./script/FloatUpHint":19,"./script/FriendDefeatUI":20,"./script/FriendsListItem":22,"./script/FriendsUI":23,"./script/GameResultUI":25,"./script/GameUI":26,"./script/HxButton":36,"./script/MainUI":40,"./script/MenuUI":41,"./script/OrderResultUI":45,"./script/PromoView":46,"./script/SoundToggle":53,"./script/TutorUI":55}],2:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GameConfig = require("./GameConfig");

var _GameConfig2 = _interopRequireDefault(_GameConfig);

var _ColorFilterSetter = require("./comp/ColorFilterSetter");

var _ColorFilterSetter2 = _interopRequireDefault(_ColorFilterSetter);

var _Locale = require("./script/Locale");

var _Locale2 = _interopRequireDefault(_Locale);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Main = function () {
	function Main() {
		_classCallCheck(this, Main);

		_Locale2.default.initialize();

		//根据IDE设置初始化引擎		
		if (window["Laya3D"]) Laya3D.init(_GameConfig2.default.width, _GameConfig2.default.height);else Laya.init(_GameConfig2.default.width, _GameConfig2.default.height, Laya["WebGL"]);
		Laya["Physics"] && Laya["Physics"].enable();
		Laya["DebugPanel"] && Laya["DebugPanel"].enable();
		Laya.stage.scaleMode = _GameConfig2.default.scaleMode;
		Laya.stage.screenMode = _GameConfig2.default.screenMode;
		Laya.stage.alignV = _GameConfig2.default.alignV;
		Laya.stage.alignH = _GameConfig2.default.alignH;

		//打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
		if (_GameConfig2.default.debug || Laya.Utils.getQueryString("debug") == "true") Laya.enableDebugPanel();
		if (_GameConfig2.default.stat) Laya.Stat.show();
		Laya.alertGlobalError = !window.isYandex;

		//激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
		Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
	}

	_createClass(Main, [{
		key: "onVersionLoaded",
		value: function onVersionLoaded() {
			//激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
			Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
		}
	}, {
		key: "onConfigLoaded",
		value: function onConfigLoaded() {
			var reg = Laya.ClassUtils.regClass;
			reg("laya.effect.ColorFilterSetter", _ColorFilterSetter2.default);

			//加载IDE指定的场景
			_GameConfig2.default.startScene && Laya.Scene.open(_GameConfig2.default.startScene);
		}
	}]);

	return Main;
}();
//激活启动类


new Main();

},{"./GameConfig":1,"./comp/ColorFilterSetter":3,"./script/Locale":38}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _FilterSetterBase2 = require("./FilterSetterBase");

var _FilterSetterBase3 = _interopRequireDefault(_FilterSetterBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ColorFilterSetter = function (_FilterSetterBase) {
    _inherits(ColorFilterSetter, _FilterSetterBase);

    function ColorFilterSetter() {
        _classCallCheck(this, ColorFilterSetter);

        var _this = _possibleConstructorReturn(this, (ColorFilterSetter.__proto__ || Object.getPrototypeOf(ColorFilterSetter)).call(this));

        _this.on(Laya.Event.ADDED, _this, _this._onAdded);
        _this.on(Laya.Event.REMOVED, _this, _this._onRemoved);
        _this._brightness = 0; // -100 - 100
        _this._contrast = 0; // -100 - 100
        _this._saturation = 0; // -100 - 100
        _this._hue = 0; // -180 - 180
        _this._red = 0; // 0-255
        _this._green = 0; // 0-255
        _this._blue = 0; // 0-255
        _this._alpha = 0; // 0-255
        _this._color = null; // '#RRGGBB'
        return _this;
    }

    _createClass(ColorFilterSetter, [{
        key: "buildFilter",
        value: function buildFilter() {
            if (this._filter) {
                this._filter.reset();
                this._filter.color(this.red, this.green, this.blue, this.alpha);
                this._filter.adjustHue(this.hue);
                this._filter.adjustContrast(this.contrast);
                this._filter.adjustBrightness(this.brightness);
                this._filter.adjustSaturation(this.saturation);
            }
            _get(ColorFilterSetter.prototype.__proto__ || Object.getPrototypeOf(ColorFilterSetter.prototype), "buildFilter", this).call(this);
        }
    }, {
        key: "alpha",
        get: function get() {
            return this._alpha;
        },
        set: function set(value) {
            this._alpha = value;this.paramChanged();
        }
    }, {
        key: "red",
        get: function get() {
            return this._red;
        },
        set: function set(value) {
            this._red = value;this.paramChanged();
        }
    }, {
        key: "green",
        get: function get() {
            return this._green;
        },
        set: function set(value) {
            this._green = value;this.paramChanged();
        }
    }, {
        key: "blue",
        get: function get() {
            return this._blue;
        },
        set: function set(value) {
            this._blue = value;this.paramChanged();
        }
    }, {
        key: "brightness",
        get: function get() {
            return this._brightness;
        },
        set: function set(value) {
            this._brightness = value;this.paramChanged();
        }
    }, {
        key: "contrast",
        get: function get() {
            return this._contrast;
        },
        set: function set(value) {
            this._contrast = value;this.paramChanged();
        }
    }, {
        key: "hue",
        get: function get() {
            return this._hue;
        },
        set: function set(value) {
            this._hue = value;this.paramChanged();
        }
    }, {
        key: "saturation",
        get: function get() {
            return this._saturation;
        },
        set: function set(value) {
            this._saturation = value;this.paramChanged();
        }
    }, {
        key: "color",
        get: function get() {
            return this._color;
        },
        set: function set(value) {
            this._color = value;
            var color0 = Laya.ColorUtils.create(value);
            this._red = color0.arrColor[0] * 255;
            this._green = color0.arrColor[1] * 255;
            this._blue = color0.arrColor[2] * 255;
            this.paramChanged();
        }
    }]);

    return ColorFilterSetter;
}(_FilterSetterBase3.default);

exports.default = ColorFilterSetter;

},{"./FilterSetterBase":4}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FilterSetterBase = function (_Laya$Node) {
    _inherits(FilterSetterBase, _Laya$Node);

    function FilterSetterBase() {
        _classCallCheck(this, FilterSetterBase);

        var _this = _possibleConstructorReturn(this, (FilterSetterBase.__proto__ || Object.getPrototypeOf(FilterSetterBase)).call(this));

        _this._target = null;
        _this._filter = null;
        return _this;
    }

    _createClass(FilterSetterBase, [{
        key: "paramChanged",
        value: function paramChanged() {
            Laya.timer.callLater(this, this.buildFilter);
        }
    }, {
        key: "buildFilter",
        value: function buildFilter() {
            // For overriding
        }
    }, {
        key: "target",
        get: function get() {
            return this._target;
        },
        set: function set(value) {
            if (this._target) {
                Laya.UIUtils.clearFilter(this._target, ColorFilter);
                this._filter = null;
            }
            this._target = value;
            if (this._target) {
                this._filter = new Laya.ColorFilter();
                Laya.UIUtils.addFilter(this._target, this._filter);
                this.paramChanged();
            }
        }
    }]);

    return FilterSetterBase;
}(Laya.Node);

exports.default = FilterSetterBase;

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Backend = require("./Backend");

var _Backend2 = _interopRequireDefault(_Backend);

var _SocialApi = require("./SocialApi");

var _SocialApi2 = _interopRequireDefault(_SocialApi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AdShowPolicy = function () {
    function AdShowPolicy(backend, promoAction) {
        _classCallCheck(this, AdShowPolicy);

        this._backend = backend;
        this._promoAction = promoAction;
    }

    _createClass(AdShowPolicy, [{
        key: "onNewGame",
        value: function onNewGame() {
            if (this._trySkipFirst()) return;
            var level = this._backend.profile.level;
            // if (SocialApi.isYA) {
            //     if (level > 1)
            //         SocialApi.inst.adsShow();
            //     return;
            // }
            if (level >= 3 && this._backend.userEvents.Ad.showBeforeStart) {
                this._countDown--;
                if (this._countDown <= 0) {
                    this._countDown = level < 20 ? 3 : 2;
                    if (!this._tryShowPromo()) _SocialApi2.default.inst.adsShow();
                }
            } else {
                this._tryShowPromo();
            }
        }
    }, {
        key: "_trySkipFirst",
        value: function _trySkipFirst() {
            if (this._countDown === undefined) {
                this._countDown = 1;
                return true;
            }
            return false;
        }
    }, {
        key: "_tryShowPromo",
        value: function _tryShowPromo() {
            return !_SocialApi2.default.isYA && this._promoAction && this._promoAction();
        }
    }]);

    return AdShowPolicy;
}();

exports.default = AdShowPolicy;

},{"./Backend":6,"./SocialApi":51}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Network = require("./Network");

var _Network2 = _interopRequireDefault(_Network);

var _NetErrors = require("./NetErrors");

var _NetErrors2 = _interopRequireDefault(_NetErrors);

var _SettingsAll = require("./SettingsAll");

var _SettingsAll2 = _interopRequireDefault(_SettingsAll);

var _UserProfile = require("./UserProfile");

var _UserProfile2 = _interopRequireDefault(_UserProfile);

var _UserEvents = require("./UserEvents");

var _UserEvents2 = _interopRequireDefault(_UserEvents);

var _BankCard = require("./BankCard");

var _BankCard2 = _interopRequireDefault(_BankCard);

var _UserOptions = require("./UserOptions");

var _UserOptions2 = _interopRequireDefault(_UserOptions);

var _SocialApi = require("./SocialApi");

var _SocialApi2 = _interopRequireDefault(_SocialApi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Backend = function (_Laya$EventDispatcher) {
    _inherits(Backend, _Laya$EventDispatcher);

    _createClass(Backend, null, [{
        key: "SERVER_SETTINGS_ALL",
        get: function get() {
            return "settings.get";
        }
    }, {
        key: "SERVER_PROFILE",
        get: function get() {
            return "user.profile";
        }
    }, {
        key: "SERVER_USER_EVENTS",
        get: function get() {
            return "user.events";
        }
    }, {
        key: "SERVER_USERS_GET",
        get: function get() {
            return "users.get";
        }
    }, {
        key: "SERVER_USERS_PROFILE",
        get: function get() {
            return "users.profile";
        }
    }, {
        key: "SERVER_GAME_START",
        get: function get() {
            return "game.start";
        }
    }, {
        key: "SERVER_GAME_SET_PROGRESS",
        get: function get() {
            return "game.setProgress";
        }
    }, {
        key: "SERVER_GAME_COMPLETE",
        get: function get() {
            return "game.complete";
        }
    }, {
        key: "SERVER_GAME_RESUME",
        get: function get() {
            return "game.resume";
        }
    }, {
        key: "SERVER_FRIEND_ASK",
        get: function get() {
            return "friends.askHelp";
        }
    }, {
        key: "SERVER_FRIEND_HELP",
        get: function get() {
            return "friends.help";
        }
    }, {
        key: "SERVER_FRIEND_GET_ASK",
        get: function get() {
            return "friends.getAsk";
        }
    }, {
        key: "SERVER_RECEIVE_LIFE",
        get: function get() {
            return 'receive.life';
        }
    }, {
        key: "SERVER_RECEIVE_CHEST",
        get: function get() {
            return 'receive.chest';
        }
    }, {
        key: "SERVER_RECEIVE_HELPS",
        get: function get() {
            return 'user.receiveHelps';
        }
    }, {
        key: "SERVER_BANK_CARDS",
        get: function get() {
            return 'bank.cards';
        }
    }, {
        key: "SERVER_AD_CLAIM_REWARD",
        get: function get() {
            return 'ad.claimReward';
        }
    }, {
        key: "SERVER_USER_OPTION_GET_ALL",
        get: function get() {
            return 'user.option.getAll';
        }
    }, {
        key: "SERVER_USER_OPTION_SET",
        get: function get() {
            return 'user.option.set';
        }
    }, {
        key: "SERVER_GAME_LOADING",
        get: function get() {
            return 'systemCommands.gameLoading';
        }
    }, {
        key: "CLIENT_SETTINGS_ALL",
        get: function get() {
            return "client.settings.all";
        }
    }, {
        key: "CLIENT_PROFILE",
        get: function get() {
            return "client.user.profile";
        }
    }, {
        key: "CLIENT_USER_EVENTS",
        get: function get() {
            return "client.user.events";
        }
    }, {
        key: "CLIENT_USERS_GET",
        get: function get() {
            return "client.users.get";
        }
    }, {
        key: "CLIENT_USERS_PROFILE",
        get: function get() {
            return "client.users.profile";
        }
    }, {
        key: "CLIENT_BANK_CARDS",
        get: function get() {
            return 'client.bank.cards';
        }
    }, {
        key: "CLIENT_FRIEND_GET_ASK",
        get: function get() {
            return "client.friends.getAsk";
        }
    }, {
        key: "CLIENT_USER_OPTION_GET_ALL",
        get: function get() {
            return 'client.user.option.getAll';
        }
    }, {
        key: "ERROR_INFO_URGENT",
        get: function get() {
            return "client.error.infoUrgent";
        }
    }, {
        key: "ERROR_EXCEPTION",
        get: function get() {
            return "client.error.exception";
        }
    }, {
        key: "ERROR_GAME",
        get: function get() {
            return "client.error.game";
        }
    }, {
        key: "ERROR_NETWORK",
        get: function get() {
            return "ERROR_NETWORK";
        }
    }, {
        key: "CODE_ERR_UNKNOWN",
        get: function get() {
            return -50000;
        }
    }, {
        key: "CODE_ERR_RESOURCE_OPERATION",
        get: function get() {
            return 500;
        }
    }, {
        key: "CODE_ERR_EVENT_TYPE",
        get: function get() {
            return 501;
        }
    }, {
        key: "CODE_ERR_EVENT_PARAM_TYPE",
        get: function get() {
            return 502;
        }
    }, {
        key: "CODE_ERR_EVENT_NOT_FOUND",
        get: function get() {
            return 503;
        }
    }, {
        key: "CODE_ERR_STATE",
        get: function get() {
            return 504;
        }
    }, {
        key: "COINS_FOR_AD",
        get: function get() {
            return 20;
        }
    }]);

    function Backend(token, url, disableAdStats) {
        _classCallCheck(this, Backend);

        var _this = _possibleConstructorReturn(this, (Backend.__proto__ || Object.getPrototypeOf(Backend)).call(this));

        _this._token = token;
        _this._cmdId = 0;
        _this._network = new _Network2.default(url || "/api-web/v1", token);
        _this.reset();
        _this.on(Backend.CLIENT_SETTINGS_ALL, _this, _this._onSettingsAll);
        _this.on(Backend.CLIENT_PROFILE, _this, _this._onProfile);
        _this.on(Backend.CLIENT_USER_EVENTS, _this, _this._onUserEvents);
        _this.on(Backend.CLIENT_BANK_CARDS, _this, _this._onBankCards);
        _this.on(Backend.CLIENT_FRIEND_GET_ASK, _this, _this._onFriendGetAsk);
        _this.on(Backend.CLIENT_USERS_GET, _this, _this._onUsersGet);
        _this.on(Backend.CLIENT_USER_OPTION_GET_ALL, _this, _this._onUserOption);
        _this._resumeCount = 0;
        _this._freeResumeCount = 0;
        _this._userOptions = new _UserOptions2.default(_this);
        if (!disableAdStats) {
            _SocialApi2.default.inst.on(_SocialApi2.default.EVENT_ADS_REQUESTED, _this, function () {
                this._statAd({ request: 1 });
            });
            _SocialApi2.default.inst.on(_SocialApi2.default.EVENT_ADS_NO, _this, function () {
                this._statAd({ absent: 1 });
            });
            _SocialApi2.default.inst.on(_SocialApi2.default.EVENT_ADS_SHOW_STARTED, _this, function () {
                this._statAd({ run: 1 });
            });
            _SocialApi2.default.inst.on(_SocialApi2.default.EVENT_ADS_SHOW_COMPLETE, _this, function () {
                this._statAd({ complete: 1 });
            });
        }
        return _this;
    }

    _createClass(Backend, [{
        key: "suspend",
        value: function suspend() {
            if (!this.suspend) {
                this._working = false;
                Laya.timer.clearAll(this);
            }
        }
    }, {
        key: "resume",
        value: function resume() {
            if (this.suspended) {
                this._working = true;
                if (this._current) {
                    this._pended = this._current.concat(this._pended);
                    this._current = null;
                }
                Laya.timer.frameLoop(1, this, this._onFrame);
            }
        }
    }, {
        key: "reset",
        value: function reset() {
            this._current = null;
            this._pended = [];
            this.resume();
        }
    }, {
        key: "setLoadingProgress",
        value: function setLoadingProgress(value) {
            this._api(Backend.SERVER_GAME_LOADING, {
                loadPercent: value,
                osVersion: window.navigator ? window.navigator.userAgent : "",
                webglEnabled: window.IsWebGLSupported() ? '1' : '0',
                hasSocialConnect: _SocialApi2.default.inst.initialized ? '1' : '0'
            });
        }
    }, {
        key: "settingsAllGet",


        // API --->
        value: function settingsAllGet() {
            this._settingsAll = new _SettingsAll2.default({
                moneySoftPerFriendHelp: 10,
                timeBetweenFriendHelp: 21600,
                moneySoft4Resume: 1000,
                arrayMoneySoft4Resume: [100, 200, 500, 1000, 2000, 5000],
                chest: {
                    timeOpen: 21600,
                    maxMoneySoft: 100
                },
                timeToFreeLife: 10800
            });
            this._api(Backend.SERVER_SETTINGS_ALL);
        }
    }, {
        key: "bankCardsGet",
        value: function bankCardsGet() {
            this._api(Backend.SERVER_BANK_CARDS);
        }
    }, {
        key: "profileGet",
        value: function profileGet() {
            this._api(Backend.SERVER_PROFILE);
        }
    }, {
        key: "userEventsGet",
        value: function userEventsGet() {
            this._api(Backend.SERVER_USER_EVENTS);
        }
    }, {
        key: "usersGet",
        value: function usersGet(idsSocial) {
            this._api(Backend.SERVER_USERS_GET, { net: _SocialApi2.default.providerId, idsSocial: idsSocial });
        }
    }, {
        key: "gameStart",
        value: function gameStart() {
            this._freeResumeCount = 0;
            this._resumeCount = 0;
            this._api(Backend.SERVER_GAME_START);
        }
    }, {
        key: "gameWin",
        value: function gameWin(scores) {
            this._api(Backend.SERVER_GAME_SET_PROGRESS, { levelUp: true, scores: scores });
        }
    }, {
        key: "gameLoose",
        value: function gameLoose(scores) {
            this._api(Backend.SERVER_GAME_SET_PROGRESS, { scores: scores });
            this._api(Backend.SERVER_GAME_COMPLETE, { scores: scores });
        }
        /*gameResume(useSoftMoney) {
            if (!useSoftMoney)
                this._api(Backend.SERVER_RECEIVE_LIFE, { id: this.userEvents.Life.id });
            else
                this._resumeCount++;
            this._api(Backend.SERVER_GAME_RESUME, useSoftMoney ? { useMoneySoft: true } : { useLife: true });
        }*/

    }, {
        key: "gameResumeFree",
        value: function gameResumeFree() {
            this._freeResumeCount++;
            this._api(Backend.SERVER_RECEIVE_LIFE, { id: this.userEvents.Life.id });
            this._api(Backend.SERVER_GAME_RESUME, { useLife: true });
        }
    }, {
        key: "gameResumeSoft",
        value: function gameResumeSoft() {
            this._resumeCount++;
            this._api(Backend.SERVER_GAME_RESUME, { useMoneySoft: true });
        }
        //gameResumeAds() {
        //    this._api(Backend.SERVER_GAME_RESUME, { useAds: true });
        //}

    }, {
        key: "userOptionsGet",
        value: function userOptionsGet() {
            this._api(Backend.SERVER_USER_OPTION_GET_ALL);
        }
    }, {
        key: "userOptionSet",
        value: function userOptionSet(key, value) {
            this._api(Backend.SERVER_USER_OPTION_SET, { key: key, value: value });
        }
        // friendHelp(id) {
        //     this._api(Backend.SERVER_FRIEND_HELP, { social_id: id });
        // }

    }, {
        key: "friendAsk",
        value: function friendAsk(id) {
            this._api(Backend.SERVER_FRIEND_ASK, { social_id: id });
        }
    }, {
        key: "friendReplyAll",
        value: function friendReplyAll() {
            this._api(Backend.SERVER_FRIEND_GET_ASK);
        }
    }, {
        key: "receiveHelps",
        value: function receiveHelps() {
            this._api(Backend.SERVER_RECEIVE_HELPS);
        }
    }, {
        key: "receiveChest",
        value: function receiveChest() {
            //this._moneyBeforeChest = this.profile.moneySoft;
            this._api(Backend.SERVER_RECEIVE_CHEST, { id: this.userEvents.Chest.id });
        }
    }, {
        key: "addCoinsForAd",
        value: function addCoinsForAd() {
            //this._statAd({complete:1});
            this._api(Backend.SERVER_AD_CLAIM_REWARD);
        }
    }, {
        key: "friendScoreUpdate",
        value: function friendScoreUpdate(friendInfos) {
            if (!friendInfos.length) return;
            this.once(Backend.CLIENT_USERS_GET, this, function (data) {
                var users = data.list;
                var socToFriend = friendInfos.reduce(function (s, e) {
                    s[e.id] = e;return s;
                }, {});
                var gameToSocId = users.reduce(function (s, e) {
                    s[e.id] = e.idSocial;return s;
                }, {});
                var leftCount = friendInfos.length;
                var onProfile = function (data) {
                    //console.log("onProfile", data);
                    socToFriend[gameToSocId[data.id]].score = data.scoresMax;
                    users.splice(0, 1);
                    if (!users.length) this.off(Backend.CLIENT_USERS_PROFILE, this, onProfile);
                }.bind(this);
                for (var i = 0; i < users.length; i++) {
                    if (users[i].id) this._api(Backend.SERVER_USERS_PROFILE, { idInternal: users[i].id });else users.splice(i, 1);
                }if (users.length) this.on(Backend.CLIENT_USERS_PROFILE, this, onProfile);
            }.bind(this));
            this.usersGet(friendInfos.map(function (e) {
                return e.id;
            }));
            //this._api(Backend.SERVER_USERS_GET,  friendInfos.map(e => e.id));
        }
    }, {
        key: "validatePurchase",
        value: function validatePurchase(purchase) {
            return new Promise(function (resolve) {
                var onResponse = function onResponse(data) {
                    if (data.hash == purchase.hash) {
                        this.off('client.bank.buy', this, onResponse);
                        resolve(data.result == 'success' || data.result == 'duplicate');
                    }
                };
                this.on('client.bank.buy', this, onResponse);
                this._api('bank.buy', purchase);
            }.bind(this));
        }
    }, {
        key: "_statAd",
        value: function _statAd(data) {
            this._api("systemCommands.stats.ad", data);
        }
    }, {
        key: "devAddMoney",
        value: function devAddMoney(value) {
            this._api("systemCommands.debug.setUserParams", { moneySoft: this.profile.moneySoft + value });
        }
    }, {
        key: "devAddToChest",
        value: function devAddToChest(value) {
            this._api("systemCommands.debug.addToChest", { moneySoft: value });
        }
    }, {
        key: "devSpeedUpEvent",
        value: function devSpeedUpEvent(id) {
            this._api("systemCommands.debug.changeTimeEvent", { id: id, timeRemain: 0 });
        }
    }, {
        key: "devSetProgress",
        value: function devSetProgress(level, scores) {
            level = Number(level);
            scores = Number(scores);
            if (isNaN(level) || isNaN(scores)) return;
            this._api('systemCommands.debug.setProgress', { level: Math.max(1, level), scores: 0, scoresMax: Math.max(0, scores) });
            setTimeout(function () {
                document.location.reload();
            }, 500);
        }
        // <--- API

    }, {
        key: "_api",
        value: function _api(cmd, data) {
            this._pended.push({ id: ++this._cmdId, cmd: cmd, data: data || {} });
        }
    }, {
        key: "_onFrame",
        value: function _onFrame() {
            if (this._current || !this._pended.length) return;
            this._current = this._pended;
            this._pended = [];
            this._network.post({
                token: this._token,
                time: new Date().toISOString(),
                commands: this._current
            }, this._onSuccess.bind(this), this._onFail.bind(this));
        }
    }, {
        key: "_onSuccess",
        value: function _onSuccess(data) {
            var current = this._current;
            for (var id in data.commands) {
                var cmdPack = data.commands[id];
                for (var i in cmdPack) {
                    this._processReply(id, current[id], cmdPack[i]);
                }
            }
            if (current == this._current) this._current = null;
        }
    }, {
        key: "_onFail",
        value: function _onFail(code, message) {
            //this.suspend();
            console.error('Backend: (' + code + ') ' + message);
            this._current = null;
            this.event(Backend.ERROR_NETWORK, { code: code, message: message });
        }
    }, {
        key: "_processReply",
        value: function _processReply(id, request, reply) {
            //console.log(reply);
            try {
                var data = reply.data;
                if (reply.status != 'ok') {
                    console.error('Backend: (' + data.code + ') ' + data.message);
                }
                data._request = request;
                this.event(reply.cmd, data);
            } catch (e) {
                console.log(e);
            }
        }
    }, {
        key: "_onSettingsAll",
        value: function _onSettingsAll(data) {
            this._settingsAll = new _SettingsAll2.default(data.settings);
        }
    }, {
        key: "_onProfile",
        value: function _onProfile(data) {
            this._profile = new _UserProfile2.default(data);
        }
    }, {
        key: "_onUserEvents",
        value: function _onUserEvents(data) {
            this._userEvents = new _UserEvents2.default(this, data);
        }
    }, {
        key: "_onBankCards",
        value: function _onBankCards(data) {
            this._bankCards = [];
            for (var i in data.list) {
                this._bankCards.push(new _BankCard2.default(data.list[i]));
            }
        }
    }, {
        key: "_onFriendGetAsk",
        value: function _onFriendGetAsk(data) {
            for (var i in data.list) {
                this._api(Backend.SERVER_FRIEND_HELP, { social_id: data.list[i] });
            }
        }
    }, {
        key: "_onUsersGet",
        value: function _onUsersGet(data) {
            // NOTHING TODO
        }
    }, {
        key: "suspended",
        get: function get() {
            return !this._working;
        }
    }, {
        key: "profile",
        get: function get() {
            return this._profile;
        }
    }, {
        key: "settingsAll",
        get: function get() {
            return this._settingsAll;
        }
    }, {
        key: "userEvents",
        get: function get() {
            return this._userEvents;
        }
    }, {
        key: "bankCards",
        get: function get() {
            return this._bankCards;
        }
    }, {
        key: "userOptions",
        get: function get() {
            return this._userOptions;
        }
    }, {
        key: "resumeCount",
        get: function get() {
            return this._resumeCount;
        }
    }, {
        key: "freeResumeCount",
        get: function get() {
            return this._freeResumeCount;
        }
    }, {
        key: "resumeCost",
        get: function get() {
            return this.settingsAll.getMoneySoft4Resume(this._resumeCount);
        }
    }, {
        key: "resumeCostOld",
        get: function get() {
            return this.resumeCost;
        }
    }]);

    return Backend;
}(Laya.EventDispatcher);

exports.default = Backend;

},{"./BankCard":8,"./NetErrors":43,"./Network":44,"./SettingsAll":50,"./SocialApi":51,"./UserEvents":57,"./UserOptions":58,"./UserProfile":59}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Backend = require("./Backend");

var _Backend2 = _interopRequireDefault(_Backend);

var _SettingsAll = require("./SettingsAll");

var _SettingsAll2 = _interopRequireDefault(_SettingsAll);

var _UserProfile = require("./UserProfile");

var _UserProfile2 = _interopRequireDefault(_UserProfile);

var _UserEvents = require("./UserEvents");

var _UserEvents2 = _interopRequireDefault(_UserEvents);

var _BankCard = require("./BankCard");

var _BankCard2 = _interopRequireDefault(_BankCard);

var _UserOptions = require("./UserOptions");

var _UserOptions2 = _interopRequireDefault(_UserOptions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DISCOUNT_ENABLED = false;

var BackendMock = function (_Laya$EventDispatcher) {
    _inherits(BackendMock, _Laya$EventDispatcher);

    function BackendMock(realBackend, profileStorageProvider) {
        _classCallCheck(this, BackendMock);

        var _this = _possibleConstructorReturn(this, (BackendMock.__proto__ || Object.getPrototypeOf(BackendMock)).call(this));

        _this._resumeCount = 0;
        _this._freeResumeCount = 0;
        _this._optionsObj = new LocalStorageObject("helix.options");
        _this._profileStorageProviderDef = function () {
            return new LocalStorageObject("helix.profile");
        };
        _this._profileStorageProvider = profileStorageProvider;
        //this._profileObj = profileStorage || new LocalStorageObject("helix.profile");
        _this._userOptions = new _UserOptions2.default(_this);
        _this._realBackend = realBackend;
        _this._resumeCostFactor = DISCOUNT_ENABLED ? 0.5 : 1;
        return _this;
    }

    _createClass(BackendMock, [{
        key: "setLoadingProgress",
        value: function setLoadingProgress(value) {}
    }, {
        key: "settingsAllGet",
        value: function settingsAllGet() {
            if (!this._settingsAll) {
                this._settingsAll = new _SettingsAll2.default({
                    moneySoftPerFriendHelp: 10,
                    timeBetweenFriendHelp: 21600,
                    moneySoft4Resume: 1000,
                    moneySoft4Ad: 20,
                    arrayMoneySoft4Resume: [100, 200, 500, 1000, 2000, 5000],
                    chest: {
                        timeOpen: 21600,
                        maxMoneySoft: 100
                    },
                    timeToFreeLife: 10800
                });
            }
            this.event(_Backend2.default.SERVER_SETTINGS_ALL, this._settingsAll);
        }
    }, {
        key: "bankCardsGet",
        value: function bankCardsGet() {
            if (!this._bankCards) {
                this._bankCards = [new _BankCard2.default({ id: 1, name: "com.candygrill.jump.chest1", price: 1, money_soft: 1000, votes: 5, plusPercentage: 0 }), new _BankCard2.default({ id: 2, name: "com.candygrill.jump.chest2", price: 3, money_soft: 3300, votes: 15, plusPercentage: 10 }), new _BankCard2.default({ id: 3, name: "com.candygrill.jump.chest3", price: 10, money_soft: 13000, votes: 50, plusPercentage: 30 })];
            }
            this.event(_Backend2.default.CLIENT_BANK_CARDS, this._bankCards);
        }
    }, {
        key: "profileGet",
        value: function profileGet() {
            if (!this._profile) {
                this._profileObj = this._profileStorageProvider && this._profileStorageProvider() || this._profileStorageProviderDef();
                this._profile = new _UserProfile2.default({
                    id: 1,
                    name: "User",
                    lang: "ru",
                    level: this._profileObj.get('level') || 1,
                    lives: 0,
                    scores: 0,
                    scoresMax: this._profileObj.get('scoresMax') || 0,
                    moneySoft: this._profileObj.get('moneySoft') || 1500,
                    isTester: true
                });
            }
            this._issueProfile();
        }
    }, {
        key: "userEventsGet",
        value: function userEventsGet() {
            if (!this._userEvents) {
                this._userEventData = { events: {
                        Chest: [{ id: "4", params: { money_soft: 60, money_soft_max: 100 }, needConfirm: true, timeRemain: 10 }],
                        Life: [{ id: "3", params: { lives: 1 }, needConfirm: true, timeRemain: 0 }], //10250}]
                        Ad: [{ id: "28", params: { dateShow: "20190129", showBeforeLife: false, showBeforeStart: true }, needConfirm: true, timeRemain: 315358244 }]
                    } };
                this._userEvents = new _UserEvents2.default(this, this._userEventData);
            }
            this.event(_Backend2.default.CLIENT_USER_EVENTS, this._userEventData);
        }
    }, {
        key: "usersGet",
        value: function usersGet(idsSocial) {
            var list = [];
            for (var i in idsSocial) {
                list.push({ idSocial: idsSocial[i], hasApp: 1 });
            }
            this.event(_Backend2.default.CLIENT_USERS_GET, list);
        }
    }, {
        key: "gameStart",
        value: function gameStart() {
            this._resumeCount = 0;
            this._freeResumeCount = 0;
        }
    }, {
        key: "gameWin",
        value: function gameWin(scores) {
            this._profile._data.level++;
            this._profileObj.set('level', this._profile._data.level);
            this._issueProfile();
        }
    }, {
        key: "gameLoose",
        value: function gameLoose(scores) {
            this._profile.scoresMax = Math.max(this._profile.scoresMax, scores);
            this._profileObj.set('scoresMax', this._profile.scoresMax);
            this._issueProfile();
        }
    }, {
        key: "gameResumeFree",
        value: function gameResumeFree() {
            this._freeResumeCount++;
            //this.userEvents.Life._reset(20);
            this.userEvents.Life._reset(1);
        }
    }, {
        key: "gameResumeSoft",
        value: function gameResumeSoft() {
            this._addMoneySoft(-this.resumeCost);
            this._resumeCount++;
            this._issueProfile();
        }
        //gameResumeAds() {
        //    // Nothing to do
        //}

    }, {
        key: "userOptionsGet",
        value: function userOptionsGet() {
            //if (!this._innerUserOptions)
            //this._innerUserOptions = { list:[{key:"resumeState", value:""}] };
            //this._innerUserOptions = { list:[{key:"resumeState", value:JSON.stringify({score:this._profile.scoresMax, isLastGameWasBest:true, result:'LOOSE', floorIndex:10, resumeCount:1, be_resumeCount:1})}] };
            //this._innerUserOptions = { list:[{key:"resumeState", value:JSON.stringify({score:97, isLastGameWasBest:true, result:'WIN', floorIndex:15, resumeCount:1, be_resumeCount:1})}] };
            //this.event(Backend.CLIENT_USER_OPTION_GET_ALL, this._innerUserOptions);
            var optionsObj = this._optionsObj;
            this.event(_Backend2.default.CLIENT_USER_OPTION_GET_ALL, {
                list: this._optionsObj.getKeys().map(function (key) {
                    return { key: key, value: optionsObj.get(key) };
                })
            });
        }
    }, {
        key: "userOptionSet",
        value: function userOptionSet(key, value) {
            //var entry = this._innerUserOptions.list.find(item => item.key == key);
            //if (entry)
            //    entry.value = value;
            this._optionsObj.set(key, value);
        }
    }, {
        key: "friendAsk",
        value: function friendAsk(id) {
            // Stub
        }
    }, {
        key: "friendReplyAll",
        value: function friendReplyAll() {
            // Stub
        }
    }, {
        key: "receiveHelps",
        value: function receiveHelps() {
            // Stub
        }
    }, {
        key: "receiveChest",
        value: function receiveChest() {
            var event = this.userEvents.Chest;
            this._addMoneySoft(event.money_soft);
            event.money_soft = 0;
            event._reset(10);
            this._issueProfile();
            this.userEvents._issueEvent('Chest');
        }
    }, {
        key: "addCoinsForAd",
        value: function addCoinsForAd() {
            this._addMoneySoft(_Backend2.default.COINS_FOR_AD);
            this._issueProfile();
        }
    }, {
        key: "friendScoreUpdate",
        value: function friendScoreUpdate(friendInfos) {
            for (var i = 0; i < friendInfos.length; i++) {
                friendInfos[i].score = i * 10;
            }
        }
    }, {
        key: "validatePurchase",
        value: function validatePurchase(purchase, card) {
            if (!purchase.info.signature) return Promise.resolve(false);
            return this._realBackend.validatePurchase(purchase).then(function (ok) {
                if (ok) {
                    setTimeout(function () {
                        this._addMoneySoft(card.money_soft);
                        this._issueProfile();
                    }.bind(this), 500); // simulate delayed coins add
                    return true;
                }
                return false;
            }.bind(this));
        }
    }, {
        key: "devAddMoney",
        value: function devAddMoney(value) {
            this._addMoneySoft(value);
            this._issueProfile();
        }
    }, {
        key: "devAddToChest",
        value: function devAddToChest(value) {
            var event = this.userEvents.Chest;
            event.money_soft = Math.min(event.money_soft + value, event.money_soft_max);
            this.userEvents._issueEvent('Chest');
        }
    }, {
        key: "devSpeedUpEvent",
        value: function devSpeedUpEvent(id) {
            for (var name in this.userEvents) {
                var event = this.userEvents[name];
                if (event.id == id && typeof event._reset == 'function') {
                    event._reset(0);
                    break;
                }
            }
        }
    }, {
        key: "devSetProgress",
        value: function devSetProgress(level, scores) {
            console.log(level, scores);
            level = Number(level);
            scores = Number(scores);
            if (isNaN(level) || isNaN(scores)) return;
            this.profile._data.level = level;
            this.profile._data.maxScores = scores;
            this._issueProfile();
        }
    }, {
        key: "_issueProfile",
        value: function _issueProfile() {
            this.event(_Backend2.default.CLIENT_PROFILE, this._profile);
        }
    }, {
        key: "_addMoneySoft",
        value: function _addMoneySoft(delta) {
            this.profile._data.moneySoft += delta;
            this._profileObj.set('moneySoft', this.profile._data.moneySoft);
        }
    }, {
        key: "settingsAll",
        get: function get() {
            return this._settingsAll;
        }
    }, {
        key: "profile",
        get: function get() {
            return this._profile;
        }
    }, {
        key: "userEvents",
        get: function get() {
            return this._userEvents;
        }
    }, {
        key: "bankCards",
        get: function get() {
            return this._bankCards;
        }
    }, {
        key: "userOptions",
        get: function get() {
            return this._userOptions;
        }
    }, {
        key: "resumeCount",
        get: function get() {
            return this._resumeCount;
        }
    }, {
        key: "freeResumeCount",
        get: function get() {
            return this._freeResumeCount;
        }
    }, {
        key: "resumeCost",
        get: function get() {
            return Math.round(this._resumeCostFactor * this.resumeCostOld);
        }
    }, {
        key: "resumeCostOld",
        get: function get() {
            return this.settingsAll.getMoneySoft4Resume(this._resumeCount);
        }
    }]);

    return BackendMock;
}(Laya.EventDispatcher);

exports.default = BackendMock;


var localStorage = [];
try {
    localStorage = window.localStorage;
} catch (e) {
    console.warn('window.localStorage is not accessable');
};

var LocalStorageObject = function () {
    function LocalStorageObject(objectName) {
        _classCallCheck(this, LocalStorageObject);

        this._objectName = objectName;
        this._object = this._load();
    }

    _createClass(LocalStorageObject, [{
        key: "getKeys",
        value: function getKeys() {
            var keys = [];
            for (var key in this._object) {
                keys.push(key);
            }return keys;
        }
    }, {
        key: "get",
        value: function get(key) {
            return this._object[key];
        }
    }, {
        key: "set",
        value: function set(key, value) {
            if (value !== this._object[key]) {
                this._object[key] = value;
                this._save();
            }
        }
    }, {
        key: "_load",
        value: function _load() {
            var str = localStorage[this._objectName];
            if (str) {
                try {
                    return JSON.parse(str);
                } catch (e) {}
            }
            return {};
        }
    }, {
        key: "_save",
        value: function _save() {
            console.log('SAVE ' + this._objectName);
            localStorage[this._objectName] = JSON.stringify(this._object);
        }
    }]);

    return LocalStorageObject;
}();

},{"./Backend":6,"./BankCard":8,"./SettingsAll":50,"./UserEvents":57,"./UserOptions":58,"./UserProfile":59}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BankCard = function () {
    function BankCard(data) {
        _classCallCheck(this, BankCard);

        this._data = data;
        var arr = this.name.split('.');
        this._data.shortName = arr[arr.length - 1];
    }

    _createClass(BankCard, [{
        key: 'id',
        get: function get() {
            return this._data.id;
        }
    }, {
        key: 'name',
        get: function get() {
            return this._data.name;
        }
    }, {
        key: 'shortName',
        get: function get() {
            return this._data.shortName;
        }
    }, {
        key: 'price',
        get: function get() {
            return this._data.price;
        }
    }, {
        key: 'money_soft',
        get: function get() {
            return this._data.money_soft;
        }
    }, {
        key: 'votes',
        get: function get() {
            return this._data.votes;
        }
    }, {
        key: 'ok',
        get: function get() {
            return this._data.ok;
        }
    }, {
        key: 'ya',
        get: function get() {
            return this._data.ya;
        },
        set: function set(value) {
            this._data.ya = value;
        }
    }, {
        key: 'plusPercentage',
        get: function get() {
            return this._data.plusPercentage;
        }
    }]);

    return BankCard;
}();

exports.default = BankCard;

},{}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

var _SocialApi = require("./SocialApi");

var _SocialApi2 = _interopRequireDefault(_SocialApi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BankCardAdUI = function (_Laya$Panel) {
    _inherits(BankCardAdUI, _Laya$Panel);

    _createClass(BankCardAdUI, null, [{
        key: "EVENT_CARD_CLICK",
        get: function get() {
            return "CARD_CLICK";
        }
    }]);

    function BankCardAdUI() {
        _classCallCheck(this, BankCardAdUI);

        return _possibleConstructorReturn(this, (BankCardAdUI.__proto__ || Object.getPrototypeOf(BankCardAdUI)).call(this));
    }

    _createClass(BankCardAdUI, [{
        key: "init",
        value: function init(backend) {
            if (_Utils2.default.initProps(this, ['coinValue', 'btnBuy'])) {
                this.btnBuy.init();
                this.btnBuy.on(Laya.Event.CLICK, this, function () {
                    if (!this.btnBuy.disabled) this.event(BankCardAdUI.EVENT_CARD_CLICK);
                });
            }
            if (this.coinValue) this.coinValue.text = backend.settingsAll.moneySoft4Ad;
            _SocialApi2.default.inst.on(_SocialApi2.default.EVENT_ADS_READY_CHANGED, this, this._updateDisabled);
            this._updateDisabled();
        }
    }, {
        key: "_updateDisabled",
        value: function _updateDisabled() {
            this.btnBuy.disabled = !_SocialApi2.default.inst.adsCanShowRewarded;
        }
    }]);

    return BankCardAdUI;
}(Laya.Panel);

exports.default = BankCardAdUI;

},{"./SocialApi":51,"./Utils":61}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

var _SocialApi = require("./SocialApi");

var _SocialApi2 = _interopRequireDefault(_SocialApi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BankCardUI = function (_Laya$Panel) {
    _inherits(BankCardUI, _Laya$Panel);

    _createClass(BankCardUI, null, [{
        key: "EVENT_CARD_CLICK",
        get: function get() {
            return "CARD_CLICK";
        }
    }]);

    function BankCardUI() {
        _classCallCheck(this, BankCardUI);

        return _possibleConstructorReturn(this, (BankCardUI.__proto__ || Object.getPrototypeOf(BankCardUI)).call(this));
    }

    _createClass(BankCardUI, [{
        key: "_updateView",
        value: function _updateView() {
            var card = this._card;
            this.coinValue.text = String(card.money_soft);
            this.priceValue.text = _SocialApi2.default.inst.getPrice(card);
            this.currency.text = _SocialApi2.default.inst.getCurrencyString(card);
            //this.promo.visible = SocialApi.isYA;
        }
    }, {
        key: "card",
        get: function get() {
            return this._card;
        },
        set: function set(value) {
            this._card = value;
            if (_Utils2.default.initProps(this, ['coinValue', 'priceValue', 'currency', 'btnBuy', 'promo'])) {
                this.btnBuy.on(Laya.Event.CLICK, this, function () {
                    this.event(BankCardUI.EVENT_CARD_CLICK, this.card);
                });
            }
            this._updateView();
        }
    }]);

    return BankCardUI;
}(Laya.Panel);

exports.default = BankCardUI;

},{"./SocialApi":51,"./Utils":61}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _BaseWindow2 = require("./BaseWindow");

var _BaseWindow3 = _interopRequireDefault(_BaseWindow2);

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

var _Backend = require("./Backend");

var _Backend2 = _interopRequireDefault(_Backend);

var _BankCardUI = require("./BankCardUI");

var _BankCardUI2 = _interopRequireDefault(_BankCardUI);

var _BankCardAdUI = require("./BankCardAdUI");

var _BankCardAdUI2 = _interopRequireDefault(_BankCardAdUI);

var _SocialApi = require("./SocialApi");

var _SocialApi2 = _interopRequireDefault(_SocialApi);

var _Locale = require("./Locale");

var _Locale2 = _interopRequireDefault(_Locale);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BankUI = function (_BaseWindow) {
    _inherits(BankUI, _BaseWindow);

    function BankUI() {
        _classCallCheck(this, BankUI);

        return _possibleConstructorReturn(this, (BankUI.__proto__ || Object.getPrototypeOf(BankUI)).call(this));
    }

    _createClass(BankUI, [{
        key: "onInit",
        value: function onInit() {
            _get(BankUI.prototype.__proto__ || Object.getPrototypeOf(BankUI.prototype), "onInit", this).call(this);
            this.devPlus.visible = _Utils2.default.devMode;
            this.devBlock.visible = _Utils2.default.devMode;
            if (this.adsHint) {
                this.adsHint.visible = _SocialApi2.default.inst.adsSupported && _Utils2.default.canUsePurchases;
                if (this.adsHint.visible) {
                    if (_SocialApi2.default.isOK) this.adsHint.text = "Платеж в 25 ОК и больше отключает рекламу.";
                    if (_SocialApi2.default.isYA) this.adsHint.text = ""; // Init later
                }
            }
            if (_Utils2.default.devMode) {
                this.devPlus.on(Laya.Event.CLICK, this, function () {
                    this._backend.devAddMoney(500);
                });
                this.btnSetPorogress.on(Laya.Event.CLICK, this, function () {
                    this._backend.devSetProgress(this.inpLevel.text, this.inpScores.text);
                });
            }
            if (this.list) for (var i = 0; i < this.list.numChildren; i++) {
                var cardView = this.list.getChildAt(i);
                cardView.on(_BankCardUI2.default.EVENT_CARD_CLICK, this, this._onCardClick);
            }
        }
    }, {
        key: "show",
        value: function show() {
            if (_SocialApi2.default.inst.preBankShow()) this.visible = true;
        }
    }, {
        key: "onShow",
        value: function onShow() {
            if (this.userOptions) this.userOptions.updateView();
            Laya.timer.frameLoop(1, this, this._onFrame);
        }
    }, {
        key: "onHide",
        value: function onHide() {
            Laya.timer.clear(this, this._onFrame);
        }
    }, {
        key: "init",
        value: function init(backend) {
            this._backend = backend;
            if (_Utils2.default.devMode) this.userOptions = new DevUserOptions(backend.userOptions, this.devUserOptions);
            if (_SocialApi2.default.isYA && this.adsHint && this.adsHint.visible) {
                var card = this._backend.bankCards[0];
                //if (card) this.adsHint.text = "Платеж в " + card.ya + " Р и больше отключает рекламу.";
                if (card) this.adsHint.text = _Locale2.default.format('L_ADS_OFF_CONDITION', card.ya);
            }
            if (_SocialApi2.default.inst.adsForCoinsSupported) {
                this.adShowItem.init(backend);
                this.adShowItem.on(_BankCardAdUI2.default.EVENT_CARD_CLICK, this, function () {
                    BankUI.showAdForCoins(this._backend);
                });
                // if (!Utils.canUsePurchases) {
                //     this.list.visible = false;
                //     this.back.height = 300;
                // }
            } else {
                this.adShowItem.visible = false;
                this.back.height = 680;
            }
            if (this.list) {
                backend.on(_Backend2.default.CLIENT_BANK_CARDS, this, this._updateView);
                this._updateView();
            }
        }
    }, {
        key: "_onCardClick",
        value: function _onCardClick(card) {
            if (card) {
                //this._pendProfileUpdateOnFocus();
                _SocialApi2.default.inst.showOrderBox(card);
            }
        }
        /*_pendProfileUpdateOnFocus() {
            var backend = this._backend;
            var count = 0;
            var callback = function() {
                if (document.visibilityState == 'visible') {
                    count++;
                    if (count == 1) return;
                    window.removeEventListener('visibilitychange', callback);
                    setTimeout(function() { backend.profileGet(); }, 3000);
                }
            };
            window.addEventListener('visibilitychange', callback);
        }*/

    }, {
        key: "_updateView",
        value: function _updateView() {
            var cards = this._backend.bankCards;
            var count = Math.min(cards.length, this.list.numChildren);
            for (var i = 0; i < count; i++) {
                var cardView = this.list.getChildAt(i);
                cardView.card = cards[i];
            }
        }
    }, {
        key: "_onFrame",
        value: function _onFrame() {
            if (this.adShowItem && this.adShowItem.btnBuy) this._applyAnimScale(this.adShowItem.btnBuy);
        }
    }], [{
        key: "showAdForCoins",
        value: function showAdForCoins(backend, onSuccess) {
            if (_SocialApi2.default.inst.adsCanShowRewarded) {
                var onComplete = null;
                var onSkipped = null;
                var off = function off() {
                    _SocialApi2.default.inst.off(_SocialApi2.default.EVENT_ADS_SHOW_COMPLETE, this, onComplete);
                    _SocialApi2.default.inst.off(_SocialApi2.default.EVENT_ADS_SHOW_STOPPED, this, onSkipped);
                };
                var onComplete = function onComplete() {
                    off();
                    backend.addCoinsForAd();
                    if (onSuccess) onSuccess();
                };
                var onSkipped = function onSkipped() {
                    off();
                };
                _SocialApi2.default.inst.on(_SocialApi2.default.EVENT_ADS_SHOW_COMPLETE, this, onComplete);
                _SocialApi2.default.inst.on(_SocialApi2.default.EVENT_ADS_SHOW_SKIPPED, this, onSkipped);
                _SocialApi2.default.inst.adsShow(true);
            }
        }
    }]);

    return BankUI;
}(_BaseWindow3.default);

exports.default = BankUI;

var DevUserOptions = function () {
    function DevUserOptions(userOptions, view) {
        _classCallCheck(this, DevUserOptions);

        this.userOptions = userOptions;
        this.view = view;
        _Utils2.default.initProps(view, ['key0', 'key1', 'key2', 'key3', 'value0', 'value1', 'value2', 'value3', 'btnApply']);
        this.keys = [view.key0, view.key1, view.key2, view.key3];
        this.values = [view.value0, view.value1, view.value2, view.value3];
        view.btnApply.on(Laya.Event.CLICK, this, this._onApply);
    }

    _createClass(DevUserOptions, [{
        key: "_onApply",
        value: function _onApply() {
            for (var i = 0; i < this.keys.length; i++) {
                var key = this.keys[i].text;
                if (key) this.userOptions.setOption(key, this.values[i].text);
            }
            this.updateView();
        }
    }, {
        key: "updateView",
        value: function updateView() {
            //console.log("OPTIONS UPDATE");
            var idx = 0;
            var options = this.userOptions.options;
            for (var key in options) {
                if (!this.keys[idx]) return;
                this.keys[idx].text = key;
                this.values[idx].text = options[key];
                idx++;
            }
        }
    }]);

    return DevUserOptions;
}();

},{"./Backend":6,"./BankCardAdUI":9,"./BankCardUI":10,"./BaseWindow":12,"./Locale":38,"./SocialApi":51,"./Utils":61}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if ("value" in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Locale = require("./Locale");

var _Locale2 = _interopRequireDefault(_Locale);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BaseWindow = function (_Laya$Scene) {
    _inherits(BaseWindow, _Laya$Scene);

    _createClass(BaseWindow, null, [{
        key: "EVENT_SHOWN",
        get: function get() {
            return "SHOWN";
        }
    }, {
        key: "EVENT_HIDDEN",
        get: function get() {
            return "HIDDEN";
        }
    }]);

    function BaseWindow() {
        _classCallCheck(this, BaseWindow);

        var _this = _possibleConstructorReturn(this, (BaseWindow.__proto__ || Object.getPrototypeOf(BaseWindow)).call(this));

        _this.once("onViewCreated", _this, _this._onViewCreated);
        return _this;
    }

    _createClass(BaseWindow, [{
        key: "show",
        value: function show() {
            this.visible = true;
        }
    }, {
        key: "hide",
        value: function hide() {
            this.visible = false;
        }
    }, {
        key: "onInit",
        value: function onInit() {
            // TODO : override
        }
    }, {
        key: "onShow",
        value: function onShow() {
            // TODO : override
        }
    }, {
        key: "onHide",
        value: function onHide() {
            // TODO : override
        }
    }, {
        key: "_applyAnimScale",
        value: function _applyAnimScale(target) {
            var t = Laya.timer.currTimer * 0.001;
            var scl = 1 + 0.05 * (1 + Math.sin(2 * Math.PI * t));
            target.scaleX = scl;
            target.scaleY = scl;
        }
    }, {
        key: "_onViewCreated",
        value: function _onViewCreated() {
            if (this.btnClose) this.btnClose.on(Laya.Event.CLICK, this, this.hide);
            this._localize();
            this.onInit();
        }
    }, {
        key: "_localize",
        value: function _localize() {
            for (var key in this) {
                if (key.indexOf('L_') === 0) {
                    var locKey = key.split('$')[0];
                    var locValue = _Locale2.default.text(locKey);
                    if (locValue) this[key].text = locValue;
                } else if (key.indexOf('LIMG_') === 0) {
                    this[key].visible = key.split('$')[1] == _Locale2.default.lang;
                }
            }
        }
    }, {
        key: "visible",
        get: function get() {
            return _get(BaseWindow.prototype.__proto__ || Object.getPrototypeOf(BaseWindow.prototype), "visible", this);
        },
        set: function set(value) {
            if (value != this.visible) {
                _set(BaseWindow.prototype.__proto__ || Object.getPrototypeOf(BaseWindow.prototype), "visible", value, this);
                if (value) {
                    this.onShow();
                    this.event(BaseWindow.EVENT_SHOWN, this);
                } else {
                    this.onHide();
                    this.event(BaseWindow.EVENT_HIDDEN, this);
                }
            }
        }
    }]);

    return BaseWindow;
}(Laya.Scene);

exports.default = BaseWindow;

},{"./Locale":38}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BlotSprite = function (_Laya$MeshSprite3D) {
    _inherits(BlotSprite, _Laya$MeshSprite3D);

    function BlotSprite(mesh, mat, pool) {
        _classCallCheck(this, BlotSprite);

        var _this = _possibleConstructorReturn(this, (BlotSprite.__proto__ || Object.getPrototypeOf(BlotSprite)).call(this, mesh));

        _this._pool = pool;
        if (pool) _this.on(Laya.Event.REMOVED, _this, _this._onBlotSpriteRemoved);
        _this.meshRenderer.sharedMaterial = mat;
        return _this;
    }

    _createClass(BlotSprite, [{
        key: "destroy",
        value: function destroy(destroyChild) {
            if (!this._pool) _get(BlotSprite.prototype.__proto__ || Object.getPrototypeOf(BlotSprite.prototype), "destroy", this).call(this, destroyChild);
        }
    }, {
        key: "_onBlotSpriteRemoved",
        value: function _onBlotSpriteRemoved() {
            if (this._pool) this._pool._return(this);
        }
    }]);

    return BlotSprite;
}(Laya.MeshSprite3D);

exports.default = BlotSprite;

},{}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BlotSprite = require("./BlotSprite");

var _BlotSprite2 = _interopRequireDefault(_BlotSprite);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MAX_BLOTS = 30;

var BlotSpritePool = function () {
    function BlotSpritePool() {
        _classCallCheck(this, BlotSpritePool);

        this._blots = [];
        this._added = [];
        this._mesh = new Laya.PlaneMesh(1, 1, 1, 1);
        var mat = new Laya.UnlitMaterial();
        this._material = mat;
        mat.albedoIntensity = 1;
        mat.renderMode = Laya.UnlitMaterial.RENDERMODE_TRANSPARENT;
        Laya.Texture2D.load('inkblot.png', new Laya.Handler(this, function (tex) {
            mat.albedoTexture = tex;
        }));
    }

    _createClass(BlotSpritePool, [{
        key: "addTo",
        value: function addTo(parentSprite) {
            if (this._added.length > MAX_BLOTS) {
                this._added[0].parent.removeChild(this._added[0]);
            }
            var blot = this._blots.pop() || new _BlotSprite2.default(this._mesh, this._material, this);
            blot.transform.localPosition = Laya.Vector3.ZERO;
            blot.transform.localScale = Laya.Vector3.ONE;
            blot.transform.localRotation = Laya.Quaternion.DEFAULT;
            this._added.push(blot);
            return parentSprite.addChild(blot);
        }
    }, {
        key: "_return",
        value: function _return(blot) {
            var idx = this._added.indexOf(blot);
            if (idx >= 0) {
                this._added.splice(idx, 1);
                if (blot.parent) blot.parent.removeChild(blot);
                this._blots.push(blot);
            }
        }
    }, {
        key: "color",
        get: function get() {
            return this._material.albedoColor;
        },
        set: function set(value) {
            this._material.albedoColor = value;
        }
    }]);

    return BlotSpritePool;
}();

exports.default = BlotSpritePool;

},{"./BlotSprite":13}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = CSVToArray;
// ref: http://stackoverflow.com/a/1293163/2343
// This will parse a delimited string into an array of
// arrays. The default delimiter is the comma, but this
// can be overriden in the second argument.
function CSVToArray(strData, strDelimiter) {
    // Check to see if the delimiter is defined. If not,
    // then default to comma.
    strDelimiter = strDelimiter || ",";

    // Create a regular expression to parse the CSV values.
    var objPattern = new RegExp(
    // Delimiters.
    "(\\" + strDelimiter + "|\\r?\\n|\\r|^)" +

    // Quoted fields.
    "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +

    // Standard fields.
    "([^\"\\" + strDelimiter + "\\r\\n]*))", "gi");

    // Create an array to hold our data. Give the array
    // a default empty first row.
    var arrData = [[]];

    // Create an array to hold our individual pattern
    // matching groups.
    var arrMatches = null;

    // Keep looping over the regular expression matches
    // until we can no longer find a match.
    while (arrMatches = objPattern.exec(strData)) {

        // Get the delimiter that was found.
        var strMatchedDelimiter = arrMatches[1];

        // Check to see if the given delimiter has a length
        // (is not the start of string) and if it matches
        // field delimiter. If id does not, then we know
        // that this delimiter is a row delimiter.
        if (strMatchedDelimiter.length && strMatchedDelimiter !== strDelimiter) {

            // Since we have reached a new row of data,
            // add an empty row to our data array.
            arrData.push([]);
        }

        var strMatchedValue;

        // Now that we have our delimiter out of the way,
        // let's check to see which kind of value we
        // captured (quoted or unquoted).
        if (arrMatches[2]) {

            // We found a quoted value. When we capture
            // this value, unescape any double quotes.
            strMatchedValue = arrMatches[2].replace(new RegExp("\"\"", "g"), "\"");
        } else {

            // We found a non-quoted value.
            strMatchedValue = arrMatches[3];
        }

        // Now that we have our value string, let's add
        // it to the data array.
        arrData[arrData.length - 1].push(strMatchedValue);
    }

    // Return the parsed data.
    return arrData;
}

},{}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BaseWindow2 = require("./BaseWindow");

var _BaseWindow3 = _interopRequireDefault(_BaseWindow2);

var _WndMan = require("./WndMan");

var _WndMan2 = _interopRequireDefault(_WndMan);

var _FriendInfo = require("./FriendInfo");

var _FriendInfo2 = _interopRequireDefault(_FriendInfo);

var _FriendsUI = require("./FriendsUI");

var _FriendsUI2 = _interopRequireDefault(_FriendsUI);

var _UserEvents = require("./UserEvents");

var _UserEvents2 = _interopRequireDefault(_UserEvents);

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

var _SocialApi = require("./SocialApi");

var _SocialApi2 = _interopRequireDefault(_SocialApi);

var _BankCardAdUI = require("./BankCardAdUI");

var _BankCardAdUI2 = _interopRequireDefault(_BankCardAdUI);

var _BankUI = require("./BankUI");

var _BankUI2 = _interopRequireDefault(_BankUI);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ChestUI = function (_BaseWindow) {
    _inherits(ChestUI, _BaseWindow);

    _createClass(ChestUI, null, [{
        key: "REQUEST_TEXT",
        get: function get() {
            return "Помоги наполнить сундук с золотом в Прыгуне";
        }
    }]);

    function ChestUI() {
        _classCallCheck(this, ChestUI);

        return _possibleConstructorReturn(this, (ChestUI.__proto__ || Object.getPrototypeOf(ChestUI)).call(this));
    }

    _createClass(ChestUI, [{
        key: "onInit",
        value: function onInit() {
            _get(ChestUI.prototype.__proto__ || Object.getPrototypeOf(ChestUI.prototype), "onInit", this).call(this);
            this.btnRequest.on(Laya.Event.CLICK, this, this._onRequestClick);
            this.btnOpen.on(Laya.Event.CLICK, this, this._onOpenClick);
            this.btnOpen.init();
            this._progressInitialRight = this.progress.right;
            _WndMan2.default.inst.friendsUI.on(_FriendsUI2.default.EVENT_FRIEND_SELECTED, this, this._onFriendSelected);
            this.devPlus.visible = _Utils2.default.devMode;
            this.devSpeedUp.visible = _Utils2.default.devMode;
            if (_Utils2.default.devMode) {
                this.devPlus.on(Laya.Event.CLICK, this, function () {
                    this._backend.devAddToChest(20);
                });
                this.devSpeedUp.on(Laya.Event.CLICK, this, function () {
                    this._backend.devSpeedUpEvent(this._backend.userEvents.Chest.id);
                });
            }
        }
    }, {
        key: "onShow",
        value: function onShow() {
            _get(ChestUI.prototype.__proto__ || Object.getPrototypeOf(ChestUI.prototype), "onShow", this).call(this);
            this.progressTweenValue = 0;
            this._backend.userEvents.on(_UserEvents2.default.EVENT_CHEST, this, this._onChestEvent);
            this._onChestEvent();
            Laya.timer.frameLoop(1, this, this._onFrame);
            this._onFrame();
        }
    }, {
        key: "onHide",
        value: function onHide() {
            _get(ChestUI.prototype.__proto__ || Object.getPrototypeOf(ChestUI.prototype), "onHide", this).call(this);
            if (this._backend) this._backend.userEvents.off(_UserEvents2.default.EVENT_CHEST, this, this._onChestEvent);
            Laya.timer.clearAll(this);
        }
    }, {
        key: "init",
        value: function init(backend) {
            this._backend = backend;
            this._invitedIds = {};
            if (_SocialApi2.default.inst.adsSupported) {
                this.adShowItem.init(backend);
                this.adShowItem.on(_BankCardAdUI2.default.EVENT_CARD_CLICK, this, function () {
                    _BankUI2.default.showAdForCoins(this._backend);
                });
            } else this.adShowItem.visible = false;
        }
    }, {
        key: "_onChestEvent",
        value: function _onChestEvent() {
            var event = this._backend.userEvents.Chest;
            Laya.Tween.to(this, { progressTweenValue: event.money_soft / event.money_soft_max }, 500, Laya.Ease.quadOut);
        }
    }, {
        key: "_onRequestClick",
        value: function _onRequestClick() {
            var _this2 = this;

            // if (SocialApi.isOK)
            //     SocialApi.inst.showShareBox(ChestUI.REQUEST_TEXT, "876935920956"); // https://ok.ru/group/59384228675644/album/59384602689596/876935920956
            // else
            _WndMan2.default.inst.friendsUI.showFriends(_SocialApi2.default.inst.appFriends.filter(function (info) {
                return !_this2._invitedIds[info.id];
            }));
        }
    }, {
        key: "_onFriendSelected",
        value: function _onFriendSelected(info) {
            if (info) {
                _SocialApi2.default.inst.showRequestBox(info.id, ChestUI.REQUEST_TEXT);
                this._backend.friendAsk(info.id);
                this._invitedIds[info.id] = true;
                this._onRequestClick();
            } else {
                _SocialApi2.default.inst.showInviteBox(ChestUI.REQUEST_TEXT);
            }
        }
    }, {
        key: "_onOpenClick",
        value: function _onOpenClick() {
            if (this._canReceiveChest) this._backend.receiveChest();
        }
    }, {
        key: "_onFrame",
        value: function _onFrame() {
            this.openHint.update(this._backend.userEvents.Chest);
            this.btnOpen.disabled = !this._canReceiveChest;
            if (this.adShowItem && this.adShowItem.btnBuy) this._applyAnimScale(this.adShowItem.btnBuy);
        }
    }, {
        key: "progressTweenValue",
        get: function get() {
            return this._progressTween;
        },
        set: function set(value) {
            this._progressTween = value;
            this.progress.right = this._progressInitialRight * (1 - value);
            this.lblProgressValue.text = String(Math.round(value * this._backend.userEvents.Chest.money_soft_max));
        }
    }, {
        key: "_canReceiveChest",
        get: function get() {
            var event = this._backend.userEvents.Chest;
            return event.money_soft > 0 && event.expired;
        }
    }]);

    return ChestUI;
}(_BaseWindow3.default);

exports.default = ChestUI;

},{"./BankCardAdUI":9,"./BankUI":11,"./BaseWindow":12,"./FriendInfo":21,"./FriendsUI":23,"./SocialApi":51,"./UserEvents":57,"./Utils":61,"./WndMan":62}],17:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

var _SocialApi = require("./SocialApi");

var _SocialApi2 = _interopRequireDefault(_SocialApi);

var _Backend = require("./Backend");

var _Backend2 = _interopRequireDefault(_Backend);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DevVKScores = function (_Laya$Panel) {
    _inherits(DevVKScores, _Laya$Panel);

    function DevVKScores() {
        _classCallCheck(this, DevVKScores);

        return _possibleConstructorReturn(this, (DevVKScores.__proto__ || Object.getPrototypeOf(DevVKScores)).apply(this, arguments));
    }

    _createClass(DevVKScores, [{
        key: "init",
        value: function init(backend) {
            this._backend = backend;
            _Utils2.default.initProps(this, ['inpScores', 'btnSend', 'btnCancel']);
            this.btnSend.on(Laya.Event.CLICK, this, this._onSendClick);
            this.btnCancel.on(Laya.Event.CLICK, this, this._onCancelClick);
            this._backend.on('client.systemCommands.debug.vkAddAppEvent', this, this._onAddAppEventResponse);
        }
    }, {
        key: "show",
        value: function show(scores) {
            if (_SocialApi2.default.isVK) {
                this.inpScores.text = scores || '0';
                this.visible = true;
            } else _SocialApi2.default.inst.showLeaderboardBox(scores);
        }
    }, {
        key: "_onSendClick",
        value: function _onSendClick() {
            alert("secure.addAppEvent { activity_id: '1', value: '" + this.inpScores.text + "' }");
            this.visible = false;
            this._backend._api('systemCommands.debug.vkAddAppEvent', { activity_id: '1', value: this.inpScores.text });
        }
    }, {
        key: "_onAddAppEventResponse",
        value: function _onAddAppEventResponse(data) {
            alert(data.response);
            this._onCancelClick();
        }
    }, {
        key: "_onCancelClick",
        value: function _onCancelClick() {
            this.visible = false;
            var scores = Number(this.inpScores.text);
            alert("VK.callMethod('showLeaderboardBox', " + scores + ")");
            _SocialApi2.default.inst.showLeaderboardBox(scores);
        }
    }]);

    return DevVKScores;
}(Laya.Panel);

exports.default = DevVKScores;

},{"./Backend":6,"./SocialApi":51,"./Utils":61}],18:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Locale = require('./Locale');

var _Locale2 = _interopRequireDefault(_Locale);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventTimerView = function (_Laya$Panel) {
    _inherits(EventTimerView, _Laya$Panel);

    function EventTimerView() {
        _classCallCheck(this, EventTimerView);

        var _this = _possibleConstructorReturn(this, (EventTimerView.__proto__ || Object.getPrototypeOf(EventTimerView)).call(this));

        _this._lastTimer = 0;
        _this._prefix = _Locale2.default.text('L_TIMER_IN') + ' '; // "ЧЕРЕЗ ";
        return _this;
    }

    _createClass(EventTimerView, [{
        key: 'update',
        value: function update(event) {
            this.visible = !event.expired;
            if (!event.expired && event.secondsRemain != this._lastTimer) {
                this._lastTimer = event.secondsRemain;
                if (!this.lblHintTimer) this.lblHintTimer = this.getChildByName('lblHintTimer');
                this.lblHintTimer.text = this.prefix ? this.prefix + event.timerText : event.timerText;
            }
        }
    }, {
        key: 'prefix',
        get: function get() {
            return this._prefix;
        },
        set: function set(value) {
            this._prefix = value;
        }
    }]);

    return EventTimerView;
}(Laya.Panel);

exports.default = EventTimerView;

},{"./Locale":38}],19:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FloatUpHint = function (_Laya$Panel) {
    _inherits(FloatUpHint, _Laya$Panel);

    function FloatUpHint() {
        _classCallCheck(this, FloatUpHint);

        return _possibleConstructorReturn(this, (FloatUpHint.__proto__ || Object.getPrototypeOf(FloatUpHint)).call(this));
    }

    _createClass(FloatUpHint, [{
        key: "init",
        value: function init() {
            if (this._labels) return;
            this._index = 0;
            this._labels = [];
            for (var i = 0; i < this.numChildren; i++) {
                var label = this.getChildAt(i);
                if (label) {
                    label.visible = false;
                    this._labels.push(label);
                }
            }
        }
    }, {
        key: "add",
        value: function add(message) {
            var label = this._labels[this._index];
            label.text = message;
            this._index = (this._index + 1) % this._labels.length;
            label.visible = true;
            Laya.Tween.to(new HintLabel(label), { alpha: 1 }, 500);
        }
    }]);

    return FloatUpHint;
}(Laya.Panel);

exports.default = FloatUpHint;

var HintLabel = function () {
    function HintLabel(label) {
        _classCallCheck(this, HintLabel);

        this._label = label;
        this._alpha = 0;
    }

    _createClass(HintLabel, [{
        key: "alpha",
        get: function get() {
            return this._alpha;
        },
        set: function set(value) {
            this._alpha = value;
            this._label.alpha = Math.sqrt(Math.sqrt(1 - value));
            this._label.visible = value < 1;
            this._label.y = (this._label.parent.height - this._label.height) * (1 - value);
        }
    }]);

    return HintLabel;
}();

},{}],20:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _BaseWindow2 = require("./BaseWindow");

var _BaseWindow3 = _interopRequireDefault(_BaseWindow2);

var _SocialApi = require("./SocialApi");

var _SocialApi2 = _interopRequireDefault(_SocialApi);

var _FriendsListItem = require("./FriendsListItem");

var _FriendsListItem2 = _interopRequireDefault(_FriendsListItem);

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FriendDefeatUI = function (_BaseWindow) {
    _inherits(FriendDefeatUI, _BaseWindow);

    function FriendDefeatUI() {
        _classCallCheck(this, FriendDefeatUI);

        return _possibleConstructorReturn(this, (FriendDefeatUI.__proto__ || Object.getPrototypeOf(FriendDefeatUI)).apply(this, arguments));
    }

    _createClass(FriendDefeatUI, [{
        key: "onInit",
        value: function onInit() {
            if (this.list) {
                this._items = [this.item0, this.item1, this.item2];
                for (var i in this._items) {
                    this._items[i].checkInit();
                    this._items[i].on(_FriendsListItem2.default.EVENT_SHARE, this, this._onShareClick);
                }
            } else {
                this.btnShare.on(Laya.Event.CLICK, this, function () {
                    this._onShareClick(this.itemFriend.info);this.hide();
                }.bind(this));
            }
        }
    }, {
        key: "tryShow",
        value: function tryShow(scores, prevScores) {
            var defeated = _SocialApi2.default.inst.appFriends.filter(function (e) {
                return e.score && scores > e.score && (!prevScores || e.score >= prevScores);
            });
            if (!defeated.length) return;
            defeated.sort(function (a, b) {
                return b.score - a.score;
            });
            this._scores = scores;
            this._updateView(defeated);
            _get(FriendDefeatUI.prototype.__proto__ || Object.getPrototypeOf(FriendDefeatUI.prototype), "show", this).call(this);

            this._animTime = 0;
            Laya.timer.frameLoop(1, this, this._onFrame);
        }
    }, {
        key: "hide",
        value: function hide() {
            _get(FriendDefeatUI.prototype.__proto__ || Object.getPrototypeOf(FriendDefeatUI.prototype), "hide", this).call(this);
            Laya.timer.clearAll(this);
        }
    }, {
        key: "_onFrame",
        value: function _onFrame() {
            this._animTime += Laya.timer.delta * 0.001;
            var A = 10;
            var t = 2 * Math.PI * this._animTime;
            this.arrowUp.y = A * (1 + Math.sin(t));
            this.arrowDown.y = A * (1 - Math.sin(t));
        }
    }, {
        key: "_onShareClick",
        value: function _onShareClick(info) {
            console.log(this._scores, info);
            var delta = this._scores - info.score;
            var scoreStr = _Utils2.default.formatPrice(delta, ["очко", "очка", "очков"]);
            //if (SocialApi.isVK)
            _SocialApi2.default.inst.showRequestBox(info.id, "Xа-ха, я тебя обогнал на " + scoreStr);
            //else SocialApi.inst.showShareBox("Xа-ха, я обогнал " + info.name + " на " + scoreStr, SocialApi.PHOTO_NEW_SCORE);
        }
    }, {
        key: "_updateView",
        value: function _updateView(friends) {
            if (this.list) {
                this.lblScore.text = this._scores;
                var visCount = Math.min(friends.length, this._items.length);
                this.lblNFriends.text = friends.length == 1 ? "и обогнал друга" : "и обогнал " + visCount + " друзей";
                this.lblNFriends2.visible = friends.length > this._items.length;
                if (this.lblNFriends2.visible) {
                    var extraCount = friends.length - this._items.length;
                    this.lblNFriends2.text = extraCount == 1 ? "и еще 1 друга" : "и еще " + extraCount + " друзей";
                }
                for (var i = 0; i < this._items.length; i++) {
                    var item = this._items[i];
                    item.visible = i < visCount;
                    if (item.visible) {
                        item.info = friends[i];
                        item.left = item.right = item.centerX = undefined;
                        item.x = item.parent.width * ((i + 0.5) / visCount) - item.width * 0.5;
                    }
                }
            } else {
                _SocialApi2.default.inst.user.score = this._scores;
                this.itemYou.info = _SocialApi2.default.inst.user;
                this.itemFriend.info = friends[0];
            }
        }
    }]);

    return FriendDefeatUI;
}(_BaseWindow3.default);

exports.default = FriendDefeatUI;

},{"./BaseWindow":12,"./FriendsListItem":22,"./SocialApi":51,"./Utils":61}],21:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FriendInfo = function FriendInfo(id, name, avatar) {
    _classCallCheck(this, FriendInfo);

    this.id = id;
    this.name = name;
    this.avatar = avatar;
    this.score = 0;
};

exports.default = FriendInfo;

},{}],22:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _FriendInfo = require("./FriendInfo");

var _FriendInfo2 = _interopRequireDefault(_FriendInfo);

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FriendsListItem = function (_Laya$Panel) {
    _inherits(FriendsListItem, _Laya$Panel);

    _createClass(FriendsListItem, null, [{
        key: "EVENT_SHARE",
        get: function get() {
            return "SHARE";
        }
    }]);

    function FriendsListItem() {
        _classCallCheck(this, FriendsListItem);

        return _possibleConstructorReturn(this, (FriendsListItem.__proto__ || Object.getPrototypeOf(FriendsListItem)).call(this));
    }

    _createClass(FriendsListItem, [{
        key: "checkInit",
        value: function checkInit() {
            this._init();
        }
    }, {
        key: "_updateView",
        value: function _updateView() {
            this._init();
            var info = this.info;
            if (this.lblName) this.lblName.visible = !!info;
            if (this.inviteBack) this.inviteBack.visible = !info;
            if (info) {
                if (this.lblName) this.lblName.text = info.name;
                this.avatar.skin = info.avatar;
                if (this.lblScore && !Number.isNaN(Number(info.score))) this.lblScore.text = info.score;
            }
        }
    }, {
        key: "_init",
        value: function _init() {
            if (!this._initialized) {
                this._initialized = true;
                _Utils2.default.initProps(this, ["lblName", "inviteBack", "avatar", "lblScore", "btnShare"]);
                if (this.avatar) {
                    var avatarSize = this.avatar.width;
                    this.avatar.on(Laya.Event.LOADED, this, function () {
                        var ratio = this.avatar.source.width / this.avatar.source.height;
                        if (ratio > 1) {
                            this.avatar.width = avatarSize * ratio;this.avatar.height = avatarSize;
                        } else {
                            this.avatar.width = avatarSize;this.avatar.height = avatarSize / ratio;
                        }
                        this.avatar.mask.x = (this.avatar.width - this.avatar.mask.width) * 0.5;
                    });
                }
                if (this.btnShare) this.on(Laya.Event.CLICK, this, function () {
                    this.event(FriendsListItem.EVENT_SHARE, this.info);
                });
            }
        }
    }, {
        key: "info",
        get: function get() {
            return this._info;
        },
        set: function set(value) {
            this._info = value;
            this._updateView();
        }
    }]);

    return FriendsListItem;
}(Laya.Panel);

exports.default = FriendsListItem;

},{"./FriendInfo":21,"./Utils":61}],23:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BaseWindow2 = require("./BaseWindow");

var _BaseWindow3 = _interopRequireDefault(_BaseWindow2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FriendsUI = function (_BaseWindow) {
    _inherits(FriendsUI, _BaseWindow);

    _createClass(FriendsUI, null, [{
        key: "EVENT_FRIEND_SELECTED",
        get: function get() {
            return "FRIEND_SELECTED";
        }
    }, {
        key: "COLUMNS",
        get: function get() {
            return 3;
        }
    }, {
        key: "ROWS_MIN",
        get: function get() {
            return 2;
        }
    }, {
        key: "ROWS_MAX",
        get: function get() {
            return 5;
        }
    }]);

    function FriendsUI() {
        _classCallCheck(this, FriendsUI);

        return _possibleConstructorReturn(this, (FriendsUI.__proto__ || Object.getPrototypeOf(FriendsUI)).call(this));
    }

    _createClass(FriendsUI, [{
        key: "onInit",
        value: function onInit() {
            _get(FriendsUI.prototype.__proto__ || Object.getPrototypeOf(FriendsUI.prototype), "onInit", this).call(this);
            this._initialHeight = this.back.height;
            this._itemHeight = this.list.getChildAt(0).height;
            this.pager.visible = false;
            for (var i = 0; i < this.list.numChildren; i++) {
                var item = this.list.getChildAt(i);
                item.on(Laya.Event.CLICK, this, this._onItemClick);
            }
        }
    }, {
        key: "showFriends",
        value: function showFriends(infos) {
            this._infos = infos.slice(0, FriendsUI.COLUMNS * FriendsUI.ROWS_MAX - 1);
            this._updateView();
            this.show();
        }
    }, {
        key: "_onItemClick",
        value: function _onItemClick(e) {
            var item = e.target;
            this.event(FriendsUI.EVENT_FRIEND_SELECTED, item.info);
        }
    }, {
        key: "_updateView",
        value: function _updateView() {
            var infos = this._infos;
            var showCount = Math.min(Math.max(FriendsUI.COLUMNS * FriendsUI.ROWS_MIN, infos.length + 1), FriendsUI.COLUMNS * FriendsUI.ROWS_MAX);
            showCount = Math.ceil(showCount / FriendsUI.COLUMNS) * FriendsUI.COLUMNS;
            this.back.height = this._initialHeight + (showCount / FriendsUI.COLUMNS - 1) * this._itemHeight;
            for (var i = 0; i < this.list.numChildren; i++) {
                var item = this.list.getChildAt(i);
                item.visible = i < showCount;
                if (i < showCount) item.info = infos[i];
            }
        }
    }]);

    return FriendsUI;
}(_BaseWindow3.default);

exports.default = FriendsUI;

},{"./BaseWindow":12}],24:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _HelixGame = require('./HelixGame');

var _HelixGame2 = _interopRequireDefault(_HelixGame);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GameProgress = function (_Laya$EventDispatcher) {
    _inherits(GameProgress, _Laya$EventDispatcher);

    _createClass(GameProgress, null, [{
        key: 'EVENT_SCORE_CHANGED',
        get: function get() {
            return 'SCORE_CHANGED';
        }
    }, {
        key: 'EVENT_SCORE_BEST',
        get: function get() {
            return 'SCORE_BEST';
        }
    }, {
        key: 'EVENT_LEVEL_CHANGED',
        get: function get() {
            return 'LEVEL_CHANGED';
        }
        //static get EVENT_COINS_CHANGED() { return 'COINS_CHANGED'; }

    }]);

    function GameProgress() {
        _classCallCheck(this, GameProgress);

        var _this = _possibleConstructorReturn(this, (GameProgress.__proto__ || Object.getPrototypeOf(GameProgress)).call(this));

        _this._state = {
            bestScore: 0,
            bestScorePrev: 0,
            level: 1
        };
        _this.isLastGameWasBest = false;
        _this._curScore = 0;
        _this._coins = 0;
        return _this;
    }

    _createClass(GameProgress, [{
        key: 'attachGame',

        // get coins() { return this._coins; }
        // set coins(value) {
        //     this._coins = value;
        //     this.event(EVENT_COINS_CHANGED, value);
        // }

        value: function attachGame(game) {
            this.detachGame();
            this._game = game;
            game.on(_HelixGame2.default.EVENT_RESULT, this, this._onResult);
            game.on(_HelixGame2.default.EVENT_LEVEL_PASSED, this, this._onLevelPassed);
            game.on(_HelixGame2.default.EVENT_LEVEL_REMOVED, this, this._onLevelRemoved);
            this.isLastGameWasBest = false;
            //this._onResult(game.result);
        }
    }, {
        key: 'detachGame',
        value: function detachGame() {
            if (this._game) {
                if (this._game.result != _HelixGame2.default.RESULT_WIN) this.curScore = 0;
                this._game.off(_HelixGame2.default.EVENT_RESULT, this, this._onResult);
                this._game.off(_HelixGame2.default.EVENT_LEVEL_PASSED, this, this._onLevelPassed);
                this._game.off(_HelixGame2.default.EVENT_LEVEL_REMOVED, this, this._onLevelRemoved);
                this._game = null;
            }
        }
    }, {
        key: '_onResult',
        value: function _onResult(result) {
            this.isLastGameWasBest = false;
            if (result == _HelixGame2.default.RESULT_PLAYING) {
                this.event(GameProgress.EVENT_SCORE_CHANGED, this.curScore);
            } else if (result == _HelixGame2.default.RESULT_WIN) {
                this.state.level++;
                this.event(GameProgress.EVENT_LEVEL_CHANGED, this.state.level);
            } else if (result == _HelixGame2.default.RESULT_LOOSE) {
                if (this.curScore > this.state.bestScore) {
                    this.state.bestScorePrev = this.state.bestScore;
                    this.state.bestScore = this.curScore;
                    this.isLastGameWasBest = true;
                    this.event(GameProgress.EVENT_SCORE_BEST, this.state.bestScore);
                }
            }
        }
    }, {
        key: '_onLevelPassed',
        value: function _onLevelPassed(level) {
            this.curScore += level * this.state.level;
        }
    }, {
        key: '_onLevelRemoved',
        value: function _onLevelRemoved(info) {
            if (info.crashedLevel) {
                this.curScore += info.crashedLevel * this.state.level;
            }
        }
    }, {
        key: 'state',
        get: function get() {
            return this._state;
        }
    }, {
        key: 'game',
        get: function get() {
            return this._game;
        }
    }, {
        key: 'curScore',
        get: function get() {
            return this._curScore;
        },
        set: function set(value) {
            if (value != this._curScore) {
                this._curScore = value;
                this.event(GameProgress.EVENT_SCORE_CHANGED, value);
            }
        }
    }, {
        key: 'bestScore',
        get: function get() {
            return this._state.bestScore;
        },
        set: function set(value) {
            this._state.bestScore = value;
            //if (!this._state.bestScorePrev)
            //    this._state.bestScorePrev = value;
            this.event(GameProgress.EVENT_SCORE_BEST, value);
        }
    }, {
        key: 'bestScorePrev',
        get: function get() {
            return this._state.bestScorePrev;
        },
        set: function set(value) {
            this._state.bestScorePrev = value;
        }
    }, {
        key: 'level',
        get: function get() {
            return this._state.level;
        },
        set: function set(value) {
            this._state.level = value;
            this.event(GameProgress.EVENT_LEVEL_CHANGED, value);
        }
    }]);

    return GameProgress;
}(Laya.EventDispatcher);

exports.default = GameProgress;

},{"./HelixGame":29}],25:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BaseWindow2 = require("./BaseWindow");

var _BaseWindow3 = _interopRequireDefault(_BaseWindow2);

var _WndMan = require("./WndMan");

var _WndMan2 = _interopRequireDefault(_WndMan);

var _Backend = require("./Backend");

var _Backend2 = _interopRequireDefault(_Backend);

var _SocialApi = require("./SocialApi");

var _SocialApi2 = _interopRequireDefault(_SocialApi);

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GameResultUI = function (_BaseWindow) {
    _inherits(GameResultUI, _BaseWindow);

    _createClass(GameResultUI, null, [{
        key: "EVENT_WND_RESULT",
        get: function get() {
            return "WND_RESULT";
        }
    }, {
        key: "WND_RESULT_RESTART",
        get: function get() {
            return "RESTART";
        }
    }, {
        key: "WND_RESULT_RESUME",
        get: function get() {
            return "RESUME";
        }
    }]);

    function GameResultUI() {
        _classCallCheck(this, GameResultUI);

        return _possibleConstructorReturn(this, (GameResultUI.__proto__ || Object.getPrototypeOf(GameResultUI)).call(this));
    }

    _createClass(GameResultUI, [{
        key: "onInit",
        value: function onInit() {
            _get(GameResultUI.prototype.__proto__ || Object.getPrototypeOf(GameResultUI.prototype), "onInit", this).call(this);
            this.btnShare.on(Laya.Event.CLICK, this, this._onShareClick);
            this.btnRestart.on(Laya.Event.CLICK, this, this._onRestartClick);
            this.btnResumeFree.on(Laya.Event.CLICK, this, this._onResumeFreeClick);
            this.btnResumeFree.init(['titleFree', 'titleAds']);
            this.btnResumeSoft.on(Laya.Event.CLICK, this, this._onResumeSoftClick);
            this.btnResumeAds.on(Laya.Event.CLICK, this, this._onResumeAdsClick);
            this.devSpeedUpFree.visible = _Utils2.default.devMode;
            this.devSpeedUpFree.on(Laya.Event.CLICK, this, function () {
                this._backend.devSpeedUpEvent(this._backend.userEvents.Life.id);
            });
            this.devSpeedUpFreeViaAd.visible = _Utils2.default.devMode;
            this.devSpeedUpFreeViaAd.on(Laya.Event.CLICK, this, function () {
                this._backend.devSpeedUpEvent(this._backend.userEvents.Ad.id);
            });
        }
    }, {
        key: "onShow",
        value: function onShow() {
            _get(GameResultUI.prototype.__proto__ || Object.getPrototypeOf(GameResultUI.prototype), "onShow", this).call(this);
            this._adsShown = false;
            this.lblRestart.visible = !this._win;
            this.lblContinue.visible = this._win;
            this.btnResumeAds.visible = false;
            Laya.timer.frameLoop(1, this, this._onFrame);
            this._onFrame();
            _SocialApi2.default.inst.on(_SocialApi2.default.EVENT_ADS_SHOW_COMPLETE, this, this._onAdsShown);
        }
    }, {
        key: "onHide",
        value: function onHide() {
            _get(GameResultUI.prototype.__proto__ || Object.getPrototypeOf(GameResultUI.prototype), "onHide", this).call(this);
            _SocialApi2.default.inst.off(_SocialApi2.default.EVENT_ADS_SHOW_COMPLETE, this, this._onAdsShown);
            Laya.timer.clearAll(this);
        }
    }, {
        key: "init",
        value: function init(backend) {
            this._backend = backend;
        }
    }, {
        key: "showResult",
        value: function showResult(win, isBest, level, bestScore) {
            this._win = win;
            var best = !win && isBest;
            if (win) this.lblLevelValue.text = level;else this.lblBestValue.text = bestScore;
            this.winView.visible = win;
            this.bestView.visible = best;
            this.btnShare.visible = (win || best) && !_SocialApi2.default.isYA;
            this.btnResumeFree.visible = false;
            if (win) {
                this.btnResumeSoft.visible = false;
            } else {
                this.lblResumeCost.text = String(this._backend.resumeCostOld);
                this.lblResumeCostNew.text = String(this._backend.resumeCost);
                this.discountView.visible = this._backend.resumeCostOld != this._backend.resumeCost;
            }
            this._pendShowRestart(win);
            this.show();
        }
    }, {
        key: "_onFrame",
        value: function _onFrame() {
            if (!this._win) {
                var event = this._backend.userEvents.Life;
                var expired = event.expired;
                this._showFreeButton(expired && this._backend.freeResumeCount == 0 && this._adsCanShow(), !expired, this._adsCanShow());
                this.btnResumeSoft.visible = !expired || !this.btnResumeFree.visible;
                if (!this.btnResumeSoft.visible) {
                    this.btnResumeFree.centerX = 0;this.btnResumeFree.left = undefined;
                } else {
                    this.btnResumeFree.left = 0;this.btnResumeFree.centerX = undefined;
                }
                if (!this.btnResumeFree.visible) {
                    this.btnResumeSoft.centerX = 0;this.btnResumeSoft.left = undefined;
                } else {
                    this.btnResumeSoft.right = 0;this.btnResumeSoft.centerX = undefined;
                }
                this.openHint.update(event);
            }
            this._applyAnimScale(this.btnResumeFree);
        }
    }, {
        key: "_showFreeButton",
        value: function _showFreeButton(visible, disabled, ads) {
            this.btnResumeFree.visible = visible;
            this.btnResumeFree.disabled = disabled;
            this.btnResumeFree.titleFree.visible = !ads;
            this.btnResumeFree.titleAds.visible = ads;
        }
    }, {
        key: "_pendShowRestart",
        value: function _pendShowRestart(immediate) {
            this.btnRestart.visible = immediate;
            if (!immediate) {
                setTimeout(function () {
                    if (this.visible) this.btnRestart.visible = true;
                }.bind(this), 2000);
            }
        }
    }, {
        key: "_onShareClick",
        value: function _onShareClick() {
            if (this.winView.visible) _SocialApi2.default.inst.showShareBox("У меня новый " + this._backend.profile.level + " уровень в Прыгуне!", _SocialApi2.default.PHOTO_NEW_LEVEL);else _SocialApi2.default.inst.showShareBox("Мой новый рекорд " + this._backend.profile.scoresMax + " очков! Попробуй меня обскакать!", _SocialApi2.default.PHOTO_NEW_SCORE);
        }
    }, {
        key: "_onRestartClick",
        value: function _onRestartClick() {
            this._hideWithResult(GameResultUI.WND_RESULT_RESTART);
        }
    }, {
        key: "_onResumeFreeClick",
        value: function _onResumeFreeClick() {
            if (this.btnResumeFree.disabled) return;
            if (this._adsCanShow()) {
                // && this._backend.userEvents.Ad.showBeforeLife) {
                _SocialApi2.default.inst.adsShow(true);
            } else this._doResumeFree();
        }
    }, {
        key: "_onResumeSoftClick",
        value: function _onResumeSoftClick() {
            if (this._backend.profile.moneySoft >= this._backend.resumeCost) {
                this._backend.gameResumeSoft();
                this._hideWithResult(GameResultUI.WND_RESULT_RESUME);
            } else if (_SocialApi2.default.isBankAvailable) _WndMan2.default.inst.bankUI.show();
        }
    }, {
        key: "_onResumeAdsClick",
        value: function _onResumeAdsClick() {
            this.btnResumeAds.visible = false;
            _SocialApi2.default.inst.adsShow();
        }
    }, {
        key: "_onAdsShown",
        value: function _onAdsShown() {
            //alert("Наебалово");
            this._adsShown = true;
            this._doResumeFree();
            //this._onFrame();
            // this._backend.gameResumeAds();
            // this._hideWithResult(GameResultUI.WND_RESULT_RESUME);
        }
    }, {
        key: "_doResumeFree",
        value: function _doResumeFree() {
            if (this._backend.userEvents.Life.expired) {
                this._backend.gameResumeFree();
                this._hideWithResult(GameResultUI.WND_RESULT_RESUME);
            } else this._onFrame();
        }
    }, {
        key: "_hideWithResult",
        value: function _hideWithResult(result) {
            this.hide();
            this.event(GameResultUI.EVENT_WND_RESULT, result);
        }
    }, {
        key: "_adsCanShow",
        value: function _adsCanShow() {
            return _SocialApi2.default.inst.adsCanShowRewarded;
        }
    }]);

    return GameResultUI;
}(_BaseWindow3.default);

exports.default = GameResultUI;

},{"./Backend":6,"./BaseWindow":12,"./SocialApi":51,"./Utils":61,"./WndMan":62}],26:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GameProgress = require("./GameProgress");

var _GameProgress2 = _interopRequireDefault(_GameProgress);

var _Backend = require("./Backend");

var _Backend2 = _interopRequireDefault(_Backend);

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

var _HelixGame = require("./HelixGame");

var _HelixGame2 = _interopRequireDefault(_HelixGame);

var _SocialApi = require("./SocialApi");

var _SocialApi2 = _interopRequireDefault(_SocialApi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GameUI = function (_Laya$Scene) {
    _inherits(GameUI, _Laya$Scene);

    _createClass(GameUI, null, [{
        key: "EVENT_ADD_COINS",
        get: function get() {
            return "ADD_COINS";
        }
    }, {
        key: "EVENT_DEV_NEXT_LEVEL",
        get: function get() {
            return "DEV_NEXT_LEVEL";
        }
    }]);

    function GameUI() {
        _classCallCheck(this, GameUI);

        var _this = _possibleConstructorReturn(this, (GameUI.__proto__ || Object.getPrototypeOf(GameUI)).call(this));

        _this._gp = null;
        _this.on("onViewCreated", _this, _this._onViewCreated);
        return _this;
    }

    _createClass(GameUI, [{
        key: "_onViewCreated",
        value: function _onViewCreated() {
            //if (SocialApi.isYA) { 
            //    this.coinsBlock.visible = false;
            //}
            this._coins = _Utils2.default.createAnimatedCounter(this.coinsValue, 0);
            this.plus.on(Laya.Event.CLICK, this, this._onPlusClick);
            this.devPlus.visible = _Utils2.default.devMode;
            this.devNextLevel.visible = _Utils2.default.devMode;
            if (_Utils2.default.devMode) {
                this.devPlus.on(Laya.Event.CLICK, this, function () {
                    this.backend.devAddMoney(500);
                });
                this.devNextLevel.on(Laya.Event.CLICK, this, function () {
                    this.event(GameUI.EVENT_DEV_NEXT_LEVEL);
                });
            }
            this._paintYellow(this.levelPrev0);
            this._paintYellow(this.progress0);
            this._paintRed(this.levelPrev1);
            this._paintRed(this.progress1);
            this._paintRed(this.levelNext1);
            this.scoreUp.init();
        }
    }, {
        key: "_onLevelChanged",
        value: function _onLevelChanged() {
            this._onProgressUpdate();
            _SocialApi2.default.inst.logLevel(this.gp.state.level);
            _SocialApi2.default.inst.logBestScore(this.gp.state.bestScore);
        }
    }, {
        key: "_onProgressUpdate",
        value: function _onProgressUpdate() {
            this.scoreCurrent.text = this.gp.curScore;
            this.scoreBest.text = Locale.text('L_BEST_SCORE') + ': ' + this.gp.bestScore; //'Лучший: ' + this.gp.bestScore;
            this.levelPrevValue.text = this.gp.state.level;
            this.levelNextValue.text = this.gp.state.level + 1;
            var pgrs = this.gp.game ? this.gp.game.progress : 0;
            this.levelPrev1.alpha = pgrs;
            this.levelNext1.alpha = pgrs < 1 ? 0 : 1;
            this.progress1.alpha = pgrs;
            this.progress1.scaleX = this.progress0.scaleX = pgrs;
            this.scoreBest.visible = this.gp.curScore == 0;
            if (this.gp.curScore == 0) this._lastScore = 1; //this.gp.bestScore;
            else if (this.gp.curScore > this._lastScore) {
                    this._checkPopUpFriend(this.gp.curScore, this._lastScore);
                    this.scoreUp.add('+' + (this.gp.curScore - this._lastScore));
                    this._lastScore = this.gp.curScore;
                }
        }
    }, {
        key: "_checkPopUpFriend",
        value: function _checkPopUpFriend(curScore, prevScore) {
            var info = _SocialApi2.default.inst.appFriends.find(function (f) {
                return f.score && f.score >= prevScore && f.score < curScore;
            });
            if (!info) return;
            this.friendSlot.info = info;
            this.friendSlot.bottom = 0;
            this.friendSlot.alpha = 1;
            this.friendSlot.visible = true;
            Laya.Tween.clearAll(this.friendSlot);
            Laya.Tween.to(this.friendSlot, { bottom: 160 }, 2000, null, new Laya.Handler(this, function () {
                this.friendSlot.visible = false;
            }));
            Laya.Tween.to(this.friendSlot, { alpha: 0 }, 2000, Laya.Ease.quartIn);
        }
    }, {
        key: "_onProfileUpdate",
        value: function _onProfileUpdate() {
            this._coins.value = this.backend.profile.moneySoft;
        }
    }, {
        key: "_onPlusClick",
        value: function _onPlusClick(e) {
            this.event(GameUI.EVENT_ADD_COINS, this);
        }
    }, {
        key: "_paintRed",
        value: function _paintRed(sprite) {
            this._paintSprite(sprite, 255, 0, 0);
        }
    }, {
        key: "_paintYellow",
        value: function _paintYellow(sprite) {
            this._paintSprite(sprite, 160, 160, 0);
        }
    }, {
        key: "_paintSprite",
        value: function _paintSprite(sprite, r, g, b) {
            var cf = new Laya.ColorFilter();
            cf.color(r, g, b);
            cf.adjustBrightness(-100);
            Laya.UIUtils.addFilter(sprite, cf);
        }
    }, {
        key: "gp",
        get: function get() {
            return this._gp;
        },
        set: function set(value) {
            if (this.gp) {
                this.gp.off(_GameProgress2.default.EVENT_SCORE_CHANGED, this, this._onProgressUpdate);
                this.gp.off(_GameProgress2.default.EVENT_SCORE_BEST, this, this._onProgressUpdate);
                this.gp.off(_GameProgress2.default.EVENT_LEVEL_CHANGED, this, this._onLevelChanged);
                //this.gp.off(GameProgress.EVENT_COINS_CHANGED, this, this._onProgressUpdate);
            }
            this._gp = value;
            if (this.gp) {
                this._lastScore = this.gp.curScore;
                this.gp.on(_GameProgress2.default.EVENT_SCORE_CHANGED, this, this._onProgressUpdate);
                this.gp.on(_GameProgress2.default.EVENT_SCORE_BEST, this, this._onProgressUpdate);
                this.gp.on(_GameProgress2.default.EVENT_LEVEL_CHANGED, this, this._onLevelChanged);
                //this.gp.on(GameProgress.EVENT_COINS_CHANGED, this, this._onProgressUpdate);
                this._onProgressUpdate();
            }
        }
    }, {
        key: "backend",
        get: function get() {
            return this._backend;
        },
        set: function set(value) {
            if (this.backend) {
                this.backend.off(_Backend2.default.CLIENT_PROFILE, this, this._onProfileUpdate);
            }
            this._backend = value;
            if (this.backend) {
                this.backend.on(_Backend2.default.CLIENT_PROFILE, this, this._onProfileUpdate);
                this._onProfileUpdate();
                this.friendSlot.visible = false;
            }
        }
    }]);

    return GameUI;
}(Laya.Scene);

exports.default = GameUI;

},{"./Backend":6,"./GameProgress":24,"./HelixGame":29,"./SocialApi":51,"./Utils":61}],27:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Utils = require('./Utils');

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GradientPlaneMesh = function (_Laya$PrimitiveMesh) {
    _inherits(GradientPlaneMesh, _Laya$PrimitiveMesh);

    function GradientPlaneMesh(color0, color1) {
        _classCallCheck(this, GradientPlaneMesh);

        var _this = _possibleConstructorReturn(this, (GradientPlaneMesh.__proto__ || Object.getPrototypeOf(GradientPlaneMesh)).call(this));

        if (typeof color0 == 'string') color0 = _Utils2.default.toColor(color0);
        if (typeof color1 == 'string') color1 = _Utils2.default.toColor(color1);
        var vCount = 4;
        var iCount = 6;
        var vDecl = Laya.VertexPositionNormalColor.vertexDeclaration;
        var vFloatStride = vDecl.vertexStride / 4;
        var verts = new Float32Array(vCount * vFloatStride);
        var inds = new Uint16Array(iCount);
        var vc = 0;
        var ic = 0;
        // Left Top
        verts[vc++] = -1;verts[vc++] = 1;verts[vc++] = 0;
        verts[vc++] = 0;verts[vc++] = 0;verts[vc++] = 0;
        verts[vc++] = color0.r;verts[vc++] = color0.g;verts[vc++] = color0.b;verts[vc++] = color0.a;
        // Right Top
        verts[vc++] = 1;verts[vc++] = 1;verts[vc++] = 0;
        verts[vc++] = 0;verts[vc++] = 0;verts[vc++] = 0;
        verts[vc++] = color0.r;verts[vc++] = color0.g;verts[vc++] = color0.b;verts[vc++] = color0.a;
        // Right Bottom
        verts[vc++] = 1;verts[vc++] = -1;verts[vc++] = 0;
        verts[vc++] = 0;verts[vc++] = 0;verts[vc++] = 0;
        verts[vc++] = color1.r;verts[vc++] = color1.g;verts[vc++] = color1.b;verts[vc++] = color1.a;
        // Left Bottom
        verts[vc++] = -1;verts[vc++] = -1;verts[vc++] = 0;
        verts[vc++] = 0;verts[vc++] = 0;verts[vc++] = 0;
        verts[vc++] = color1.r;verts[vc++] = color1.g;verts[vc++] = color1.b;verts[vc++] = color1.a;
        // 2 Triangles
        inds[ic++] = 0;inds[ic++] = 2;inds[ic++] = 1;
        inds[ic++] = 0;inds[ic++] = 3;inds[ic++] = 2;
        // Apply geometry
        _this.setData(vDecl, verts, inds);
        return _this;
    }

    return GradientPlaneMesh;
}(Laya.PrimitiveMesh);

exports.default = GradientPlaneMesh;

},{"./Utils":61}],28:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _HxGlobals = require("./HxGlobals");

var _HxGlobals2 = _interopRequireDefault(_HxGlobals);

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HelixConfig = function () {
    _createClass(HelixConfig, null, [{
        key: "FLAG_TRAP",
        get: function get() {
            return 1;
        }
    }, {
        key: "FLAG_MOVING",
        get: function get() {
            return 2;
        }
    }, {
        key: "FLAG_NARROW_GROUND",
        get: function get() {
            return 4;
        }
    }, {
        key: "FLAG_WALL",
        get: function get() {
            return 8;
        }
    }]);

    function HelixConfig(config) {
        _classCallCheck(this, HelixConfig);

        this._loadConfig(config);
        this._gatherStats();
    }

    _createClass(HelixConfig, [{
        key: "generateFloors",

        //get moveAngle() { return this._config.moveAngle; }

        value: function generateFloors(level) {
            var floors = [];
            var count = this._getFloorCount(level);
            var clamp = this._getCurveClamp(level);
            var bcfMax = 0.3;
            var bcfRecover = 0.025;
            var bcf = bcfMax * 0.5; // Block count factor
            var prevEmpty = false;
            var wallState = { tries: 0, count: 0, lastIdx: 0 };
            for (var i = 0; i < count; i++) {
                var maxGroup = i > 0 ? _Utils2.default.clamp(this._getLevelCurveValue(i + 1, level), clamp.min, clamp.max) : 0;
                //var groupIdx = Utils.clamp(Math.floor((maxGroup + 1) * Math.random()), 0, this._floorGroups.length)
                var group = this._floorGroups.reduce(function (s, a, idx) {
                    return idx <= maxGroup ? s.concat(a) : s;
                }, []); // this._floorGroups[groupIdx];
                var floor = this._getRandomFloor(group, maxGroup / this._maxGroup, bcf, level, prevEmpty);
                prevEmpty = floor.stats.sumT <= 0;
                //console.log(floor.blockCount, bcf);
                //console.log(floor.raw);
                //console.log(floor.stats.name);
                bcf = Math.min(Math.pow(bcf - bcfRecover, floor.blockCount) + bcfRecover * 3, bcfMax);
                floor = Object.assign({ index: i }, floor);
                if (1 << maxGroup & HelixConfig.FLAG_WALL) this._tryAddWall(floor, wallState);
                var rndAngle = (Math.floor(Math.random() * 360) + Math.floor(Math.random() * 6) * 60) % 360;
                if (floor.stat.length) floor.statStart += rndAngle;
                if (floor.move.length) floor.moveStart += rndAngle;
                floors.push(floor);
            }
            return floors;
        }
    }, {
        key: "logFloors",
        value: function logFloors() {
            //var str = "name\tsum(T)\tmax(G)\tavg(G)\tsum(H)\ttrap\tmoving\tnarrow\twall\tgroup\tsum(T)/avg(G)\t\n";
            var str = "name\tsum(T)\tmax(G)\tavg(G)\tsum(H)\tgroup\tblocks\traw\t\n";
            for (var name in this._floorStats) {
                var stats = this._floorStats[name];
                str += name + "\t";
                str += stats.sumT.toFixed() + "%\t";
                str += stats.maxG.toFixed() + "%\t";
                str += stats.avgG.toFixed() + "%\t";
                str += stats.sumH.toFixed() + "%\t";
                // str += (stats.flags & HelixConfig.FLAG_TRAP ? "1" : "0") + "\t";
                // str += (stats.flags & HelixConfig.FLAG_MOVING ? "1" : "0") + "\t";
                // str += (stats.flags & HelixConfig.FLAG_NARROW_GROUND ? "1" : "0") + "\t";
                // str += (stats.flags & HelixConfig.FLAG_WALL ? "1" : "0") + "\t";
                str += String(stats.group) + "\t";
                str += String(stats.blockCount) + "\t";
                str += stats.raw + "\t";
                //str += (stats.sumT / stats.avgG).toFixed(2) + "\t";
                str += "\n";
            }
            console.log(str);
        }
    }, {
        key: "_loadConfig",
        value: function _loadConfig(config) {
            this._config = config;
            //this._levels = [];
            //for (var i in config.levels) {
            //    this._parseEntry(config.levels[i], this._levels, true);
            //}
            this._moveFreq = config.globals.moveFreq[0];
            this._levelCurve = config.globals.levelCurve || [[0, 0], [1, 4]];
            this._floorCounts = config.globals.progress.floorCount || [40];
            this._curveClamp = config.globals.progress.curveClamp || [[0, 0, 5]];
            this._floors = this._parseFloors(config.floors);
        }
    }, {
        key: "_tryAddWall",
        value: function _tryAddWall(floor, state) {
            var PROB_RISE_GAP = 7;
            var MIN_FLOOR_GAP = 2;
            if (floor.index - state.lastIdx >= MIN_FLOOR_GAP) {
                state.tries++;
                if (Math.random() < Math.sqrt(state.tries / PROB_RISE_GAP)) {
                    var segs = floor.stat.filter(function (s) {
                        return s.type != 'H' && s.size > _HxGlobals2.default.WALL_ANGLE;
                    });
                    if (segs.length == 0) return;
                    var seg = this._randomEntry(segs);
                    floor.wall = { angle: seg.start + Math.round(_HxGlobals2.default.WALL_ANGLE * 0.5 + Math.random() * (seg.size - _HxGlobals2.default.WALL_ANGLE)) };
                    state.tries = 0;
                    state.lastIdx = floor.index;
                    state.count++;
                    //console.log("WALL", floor);
                }
            }
        }
    }, {
        key: "_getRandomFloor",
        value: function _getRandomFloor(floors, maxDifficulty, bcf, level, excludeEmpty) {
            if (excludeEmpty && !floors.find(function (f) {
                return f.stats.sumT > 0;
            })) excludeEmpty = false;
            // weight of floor proportional to percent of fill
            var func = function func(floor) {
                if (excludeEmpty && floor.stats.sumT <= 0) return 0;
                if (floor.stats.sumT * 0.01 > maxDifficulty || floor.stats.level > level) return 0;
                return Math.pow(bcf, Math.min(floor.blockCount, 2) - 1);
            };
            var sum = floors.reduce(function (s, f) {
                return s + func(f);
            }, 0);
            var rnd = Math.random() * sum;
            var cur = 0;
            var floor = null;
            for (var i in floors) {
                floor = floors[i];
                cur += func(floor);
                if (cur >= rnd) break;
            }
            return floor;
        }
    }, {
        key: "_getFloorCount",
        value: function _getFloorCount(level) {
            return this._floorCounts[_Utils2.default.clamp(level - 1, 0, this._floorCounts.length - 1)];
        }
    }, {
        key: "_getLevelCurveValue",
        value: function _getLevelCurveValue(floor, level) {
            var e = this._getLvlArrEntry(this._levelCurve, floor, level);
            return e[1];
        }
    }, {
        key: "_getCurveClamp",
        value: function _getCurveClamp(level) {
            var e = this._getLvlArrEntry(this._curveClamp, level);
            return { min: e[1], max: e[2] };
        }
    }, {
        key: "_getLvlArrEntry",
        value: function _getLvlArrEntry(arr, level, preLevel) {
            var prev = arr[0];
            for (var i = 1; i < arr.length; i++) {
                var entry = arr[i];
                var entry_key = entry[0];
                if ((typeof entry_key === "undefined" ? "undefined" : _typeof(entry_key)) == 'object') {
                    var keys = Object.keys(entry_key);
                    if (preLevel == undefined || !keys.length) continue;
                    var key = keys[0];
                    for (var j = 1; j < keys.length; j++) {
                        if (preLevel < keys[j]) break;
                        key = keys[j];
                    }
                    entry_key = entry_key[key];
                }
                if (level < entry_key) break;
                prev = entry;
            }
            return prev;
        }
    }, {
        key: "_gatherStats",
        value: function _gatherStats() {
            this._floorStats = {};
            this._floorGroups = [];
            this._maxGroup = 4;
            var maxGroup = 0;
            for (var name in this._floors) {
                var floor = this._floors[name];
                var sumT = Math.round((this._sumSectorSize(floor.stat, 'T') + this._sumSectorSize(floor.move, 'T')) / 360 * 100);
                var maxG = Math.round(this._maxSectorSize(floor.stat, 'G', this._maxSectorSize(floor.move, 'G', 0)) / 360 * 100);
                var avgG = Math.round(this._avgSectorSize(floor.stat, floor.move, 'G') / 360 * 100);
                var flags = 0;
                if (sumT > 0) flags |= HelixConfig.FLAG_TRAP;
                if (floor.move.length) flags |= HelixConfig.FLAG_MOVING;
                if (floor.wall) flags |= HelixConfig.FLAG_WALL;
                if (maxG <= 10) flags |= HelixConfig.FLAG_NARROW_GROUND;
                var group = floor.group || this._groupFromFlags(flags);
                this._maxGroup = Math.max(group, this._maxGroup);
                var stats = {
                    name: name,
                    sumT: sumT,
                    maxG: maxG,
                    avgG: avgG,
                    sumH: Math.round(this._sumHSectorSize(floor) / 360 * 100),
                    flags: flags,
                    group: group,
                    level: floor.level,
                    blockCount: floor.blockCount,
                    raw: floor.raw
                };
                this._floorStats[name] = stats;
                floor.stats = stats;
                if (!this._floorGroups[group]) this._floorGroups[group] = [];
                this._floorGroups[group].push(floor);
            }
            for (var i = 0; i <= this._maxGroup; i++) {
                if (!this._floorGroups[i]) this._floorGroups[i] = this._floorGroups[i - 1];
            }
        }
    }, {
        key: "_groupFromFlags",
        value: function _groupFromFlags(flags) {
            for (var i = 7; i >= 0; i--) {
                if (flags & 1 << i) return i + 1;
            }return 0;
        }
    }, {
        key: "_avgSectorSize",
        value: function _avgSectorSize(stat, move, type) {
            var sum = this._sumSectorSize(stat, type) + this._sumSectorSize(move, type);
            var count = this._countSectorSize(stat, type) + this._countSectorSize(move, type);
            return count ? sum / count : 0;
        }
    }, {
        key: "_sumSectorSize",
        value: function _sumSectorSize(sectors, type) {
            return sectors.reduce(function (acc, cur) {
                return cur.type == type ? acc + cur.size : acc;
            }, 0);
        }
    }, {
        key: "_countSectorSize",
        value: function _countSectorSize(sectors, type) {
            return sectors.reduce(function (acc, cur) {
                return cur.type == type ? acc + 1 : acc;
            }, 0);
        }
    }, {
        key: "_maxSectorSize",
        value: function _maxSectorSize(sectors, type, startValue) {

            return sectors.reduce(function (acc, cur) {
                return cur.type == type ? Math.max(acc, cur.size) : acc;
            }, startValue);
        }
    }, {
        key: "_sumHSectorSize",
        value: function _sumHSectorSize(floor) {
            var start = Math.min(floor.statStart, floor.moveStart);
            var stat = floor.stat.length ? floor.stat : [{ type: 'H', start: 0, size: 360 }];
            var move = floor.move.length ? floor.move : [{ type: 'H', start: 0, size: 360 }];
            var i = 0,
                j = 0;
            var sumH = 0,
                sumAll = 0;
            var ss = floor.statStart,
                ms = floor.moveStart;
            while (sumAll < 359) {
                var a = start + sumAll;
                var s = stat[i] && ss + stat[i].start <= a ? stat[i] : { type: 'H', start: a, size: 360 };
                var m = move[j] && ms + move[j].start <= a ? move[j] : { type: 'H', start: a, size: 360 };
                var delta = 0;
                if (ss + s.start + s.size < ms + m.start + m.size) {
                    delta = ss + s.start + s.size - a;i++;
                } else if (ss + s.start + s.size > ms + m.start + m.size) {
                    delta = ms + m.start + m.size;j++;
                } else {
                    delta = ms + m.start + m.size;i++;j++;
                }
                if (sumAll + delta < 360) sumAll += delta;else {
                    delta = 360 - sumAll;sumAll = 360;
                }
                if (s.type == 'H' && m.type == 'H') sumH += delta;
            }
            return sumH;
        }
    }, {
        key: "_parseFloors",
        value: function _parseFloors(rawFloors) {
            var floors = [];
            for (var name in rawFloors) {
                try {
                    floors[name] = this._parseFloor(rawFloors[name], name);
                } catch (e) {
                    console.error(name + ": ", e);
                }
            }
            return floors;
        }
        // Format: {[[n][M](G|T|H)xx[Dxx]][.{[n](T|TE|ET|MT)xx}][.W]} [,Axx]
        // Out: {stat:[<segments>], move:[<segments>], moveAngle:number, moveStart:number, wall:[number(angle),number(angle)]}
        //      <segment>: { type:string(G|T|H), start:number(angle), size:number(angle) }

    }, {
        key: "_parseFloor",
        value: function _parseFloor(rawFloor, name) {
            // Parse floor blocks
            var rawBlocks = [];
            var moveA = 0;
            var wall = null;
            var group = undefined;
            var level = undefined;
            for (var i in rawFloor) {
                var rawBlock = rawFloor[i];
                if (rawBlock[0] == 'A') {
                    moveA = Number(rawBlock.substr(1));
                } else if (_Utils2.default.startsWith(rawBlock, 'C')) {
                    group = Number(rawBlock.substr(1));
                } else if (_Utils2.default.startsWith(rawBlock, 'L')) {
                    level = Number(rawBlock.substr(1));
                } else {
                    var cnt = 1;
                    if (!isNaN(rawBlock[0])) {
                        cnt = Number(rawBlock[0]);rawBlock = rawBlock.substr(1);
                    }
                    for (var j = 0; j < cnt; j++) {
                        rawBlocks.push(this._parseFloorBlock(rawBlock));
                    }
                }
            }
            var blockCount = rawBlocks.length; // Math.min(rawBlocks.length, 3);
            // Calc hole gaps between blocks
            var H_sum = 360 - rawBlocks.reduce(function (sum, cur) {
                return sum + cur.size;
            }, 0);
            // ??? really need this
            // if (H_sum < 0) {
            //     throw new Error("Invalid floor descriptor (blocks sum exceed 360 degrees): ");
            // }
            var H_gap = H_sum / rawBlocks.length;
            // Block placement ('start' value) and separation by static/moving layers
            var staticBlocks = [];
            var moveBlocks = [];
            for (var i = 0, offs = 0; i < rawBlocks.length; i++) {
                var rawBlock = rawBlocks[i];
                rawBlock.start = offs + rawBlock.bias;
                if (rawBlock.M) moveBlocks.push(rawBlock);else {
                    staticBlocks.push(rawBlock);
                    // extract moving internal traps
                    for (var j = 0; j < rawBlock.IT.length;) {
                        var it = rawBlock.IT[j];
                        if (it.M) {
                            rawBlock.IT.splice(j, 1);
                            moveBlocks.push({ type: 'H', start: rawBlock.start, size: rawBlock.size, IT: [it] });
                        } else j++;
                    }
                }
                //if (rawBlock.wall && rawBlock.size > HxGlobals.WALL_ANGLE)
                //    wall = { start: rawBlock.start + HxGlobals.WALL_ANGLE * 0.5, size: rawBlock.size - HxGlobals.WALL_ANGLE };
                rawBlock.M = undefined;
                rawBlock.bias = undefined;
                offs += rawBlock.size + H_gap;
            }
            // Fill layers
            var layers = [];
            var rawLayers = [staticBlocks, moveBlocks];
            for (var l in rawLayers) {
                var rawBlocks = rawLayers[l];
                var layer = [];
                for (var i in rawBlocks) {
                    var rawBlock = rawBlocks[i];
                    var segments = [];
                    for (var j in rawBlock.IT) {
                        var it = rawBlock.IT[j];
                        var start = rawBlock.start;
                        var stride = rawBlock.size / it.C;
                        if (it.C > 1 && it.E != 0) {
                            stride += (stride - it.T) / (it.C - 1);
                        } // Snap to both edges
                        else if (it.E < 0) {} // Nothing to add
                            else if (it.E > 0) {
                                    start += stride - it.T;
                                } else {
                                    start += (stride - it.T) * 0.5;
                                }
                        for (var k = 0; k < it.C; k++, start += stride) {
                            segments.push({ type: 'T', start: start, size: it.T });
                        }
                    }
                    segments.sort(function (a, b) {
                        return a.start - b.start;
                    });
                    this._validateNonOverlapness(segments);
                    this._fillGaps(segments, rawBlock);
                    layer = this._concatSegments(layer, segments);
                }
                layers.push({
                    start: this._normalizeSegments(layer),
                    layer: this._validateSegments(this._mergeSegments(layer))
                });
            }
            var res = {
                stat: layers[0].layer,
                statStart: layers[0].start,
                move: layers[1].layer,
                moveStart: layers[1].start,
                moveAngle: moveA,
                group: group,
                level: level,
                raw: rawFloor.join('_'),
                blockCount: blockCount
            };
            //if (wall) res.wall = wall;
            return res;
        }
    }, {
        key: "_validateNonOverlapness",
        value: function _validateNonOverlapness(segments) {
            for (var i = 0; i < segments.length - 1;) {
                var cur = segments[i];
                var next = segments[i + 1];
                var delta = next.start - (cur.start + cur.size);
                if (delta < 0) {
                    if (delta < _HxGlobals2.default.EPSILON_SEG_SIZE) throw new Error("Segments overlap");
                    cur.size += delta;
                    if (cur.size < _HxGlobals2.default.MIN_SEG_SIZE) {
                        segments.splice(i, 1);
                        continue;
                    }
                }
                i++;
            }
            // var last = segments[segments.length - 1];
            // if (last.start + last.size - HxGlobals.EPSILON_SEG_SIZE > 360)
            //     throw new Error("Segment is out of range [0, 360]");
        }
    }, {
        key: "_fillGaps",
        value: function _fillGaps(segments, block) {
            if (!segments.length) {
                segments.push({ type: block.type, start: block.start, size: block.size });
                return;
            }
            var first = segments[0];
            var preFirst = { type: block.type, start: block.start, size: first.start - block.start };
            if (preFirst.size < _HxGlobals2.default.MIN_SEG_SIZE) {
                first.start -= preFirst.size;first.size += preFirst.size;preFirst.size = 0;
            }
            var last = segments[segments.length - 1];
            var postLast = { type: block.type, start: last.start + last.size, size: block.start + block.size - (last.start + last.size) };
            if (postLast.size < _HxGlobals2.default.MIN_SEG_SIZE) {
                last.size += postLast.size;postLast.size = 0;
            }
            for (var i = 0; i < segments.length;) {
                var cur = segments[i];
                var next = segments[i + 1] || postLast;
                var delta = next.start - (cur.start + cur.size);
                if (delta < _HxGlobals2.default.MIN_SEG_SIZE) {
                    cur.size = next.start - cur.start;
                    i++;
                } else {
                    segments.splice(i + 1, 0, { type: block.type, start: cur.start + cur.size, size: delta });
                    i += 2;
                }
            }
            if (preFirst.size) segments.splice(0, 0, preFirst);
            if (postLast.size) segments.push(postLast);
        }
    }, {
        key: "_concatSegments",
        value: function _concatSegments(list0, list1) {
            if (list0.length == 0) return list1;
            var last0 = list0[list0.length - 1];
            var first1 = list1[0];
            var gapSize = first1.start - (last0.start + last0.size);
            if (gapSize < _HxGlobals2.default.EPSILON_SEG_SIZE) throw new Error("Segments overlap");
            var res = list0;
            if (gapSize < _HxGlobals2.default.MIN_SEG_SIZE) {
                last0.size = first1.start - last0.start;
            } else {
                res.push({ type: 'H', start: last0.start + last0.size, size: gapSize });
            }
            res = res.concat(list1);
            return res;
        }
    }, {
        key: "_normalizeSegments",
        value: function _normalizeSegments(segments) {
            if (!segments.length) return 0;
            var first = segments[0];
            var last = segments[segments.length - 1];
            var offset = first.start;
            for (var i in segments) {
                segments[i].start -= offset;
            }var gapSize = 360 - (last.start + last.size);
            if (gapSize < _HxGlobals2.default.EPSILON_SEG_SIZE) throw new Error("Segment is out of range [0, 360]");
            if (gapSize < _HxGlobals2.default.MIN_SEG_SIZE) last.size = 360 - last.size;else segments.push({ type: 'H', start: last.start + last.size, size: gapSize });
            return offset;
        }
    }, {
        key: "_mergeSegments",
        value: function _mergeSegments(segments) {
            for (var i = 0; i < segments.length - 1; i++) {
                var cur = segments[i];
                var next = segments[i + 1];
                if (cur.type == next.type) {
                    cur.size = next.start - cur.start + next.size;
                    segments.splice(i + 1, 1);
                }
            }
            return segments;
        }
    }, {
        key: "_validateSegments",
        value: function _validateSegments(segments) {
            var a = 0;
            for (var i in segments) {
                var s = segments[i];
                if (s.start + 0.0001 < a || s.size <= 0) throw new Error('Segments validation failed');
                a = s.start + s.size;
            }
            return segments;
        }
        // Format: [[M](G|T|H)xx[Dxx]][.{[n](T|TE|ET|MT)xx}]
        // Out: {M:boolean, type:string(G|T|H), size:number(angle) bias:number(angle), wall:boolean, IT:[{T:number(angle), E:number(-1,0,1), M:boolean, C:number(count)},..]}
        // Comments: IT - internal traps

    }, {
        key: "_parseFloorBlock",
        value: function _parseFloorBlock(rawBlock) {
            var block = { M: false, type: '?', size: 0, bias: 0, IT: [] };
            if (rawBlock[0] == 'M') {
                block.M = true;rawBlock = rawBlock.substr(1);
            }
            var parts = rawBlock.split('.');
            var part = parts[0];
            block.type = part[0];
            if (block.type == 'G' || block.type == 'T' || block.type == 'H') {
                var D_idx = part.indexOf('D');
                if (D_idx > 0) {
                    block.size = Number(part.substr(1, D_idx - 1));block.bias = Number(part.substr(D_idx + 1));
                } else {
                    block.size = Number(part.substr(1));
                }
                if (isNaN(block.size) || isNaN(block.bias)) throw new Error("Invalid floor block format " + rawBlock);
                if (block.type == 'T') return block;
            } else {
                throw new Error("Undefined floor block type " + block.type);
            }
            parts.splice(0, 1);
            for (var i in parts) {
                var part = parts[i];
                var tEntry = { C: 1, E: 0 };
                if (!isNaN(part[0])) {
                    tEntry.C = part[0];part = part.substr(1);
                }
                if (_Utils2.default.startsWith(part, 'ET')) {
                    tEntry.E = 1;part = part.substr(2);
                } else if (_Utils2.default.startsWith(part, 'TE')) {
                    tEntry.E = -1;part = part.substr(2);
                } else if (_Utils2.default.startsWith(part, 'MT')) {
                    tEntry.M = true;part = part.substr(2);
                } else if (_Utils2.default.startsWith(part, 'T')) {
                    part = part.substr(1);
                } else {
                    if (_Utils2.default.startsWith(part, 'W')) block.wall = true;
                    continue;
                }
                tEntry.T = Number(part);
                if (tEntry.T * tEntry.C > block.size) throw new Error("Invalid floor descriptor (traps in block exceed its size)");
                block.IT.push(tEntry);
            }
            return block;
        }
    }, {
        key: "_newG",
        value: function _newG(angle) {
            return this._newSeg(_HxGlobals2.default.SEG_GROUND, angle);
        }
    }, {
        key: "_newT",
        value: function _newT(angle) {
            return this._newSeg(_HxGlobals2.default.SEG_DEATH, angle);
        }
    }, {
        key: "_newH",
        value: function _newH(angle) {
            return this._newSeg(_HxGlobals2.default.SEG_HOLE, angle);
        }
    }, {
        key: "_newSeg",
        value: function _newSeg(type, angle) {
            return { type: type, angle: angle };
        }
    }, {
        key: "_randomEntry",
        value: function _randomEntry(arr) {
            return arr[Math.floor(Math.random() * arr.length)];
        }

        //////////////////////////////////////////////
        // Old format
        /*_generateLevel(index) {
            var lvlDesc = this._levels[Math.min(index, this._levels.length - 1)];
            var floors = [];
            for (var i in lvlDesc)
                this._parseEntry(lvlDesc[i], floors, false);
            for (var i in floors) {
                var floorDesc = floors[i];
                var floor = {};
                if (floorDesc.static)
                    floor.static = this._parseEntry(floorDesc.static, [], true)[0];
                if (floorDesc.move)
                    floor.move = this._parseEntry(floorDesc.static, [], true)[0];
                floor.wall = floorDesc.wall;
                floor[i] = floor;
            }
        }
          _parseEntry(entry, toList, isItemArray) {
            if (typeof(entry) == 'string') // prefab reference
                this._parseEntry(this._getPrefab(entry), toList, isItemArray);
            else if (Array.isArray(entry)) { 
                if (isItemArray) toList.push(entry);
                else this._parseEntry(this._randomEntry(entry), toList, isItemArray);
            } else if (entry.list) { // force interpret as list
                var list = typeof(entry.list) == 'string' ? this._config.prefabs[entry.list] : entry.list;
                if (Array.isArray(list)) {
                    for (var i in list)
                        this._parseEntry(list[i], toList, isItemArray);
                }
            } else { // Object
                var keys = Object.keys(entry);
                if (keys.length) {
                    var key = keys[0];
                    var count = Number(key);
                    if (count) { // {<N>:DESC}
                        for (var i = 0; i < count; i++)
                            this._parseEntry(entry[key], toList, isItemArray);
                        return toList;
                    }
                }
                if (!isItemArray)
                    toList.push(entry);
            }
            return toList;
        }
          _getPrefab(name) {
            var prefab = this._config.prefabs[name];
            return Array.isArray(prefab) ? this._randomEntry(prefab) : prefab;
        }*/

    }, {
        key: "moveFreq",
        get: function get() {
            return this._moveFreq || 0.25;
        }
    }]);

    return HelixConfig;
}();

exports.default = HelixConfig;

},{"./HxGlobals":37,"./Utils":61}],29:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _HxGlobals = require('./HxGlobals');

var _HxGlobals2 = _interopRequireDefault(_HxGlobals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FETCH_LEVELS = _HxGlobals2.default.FETCH_LEVELS;
var MAX_DELTA_TIME = _HxGlobals2.default.MAX_DELTA_TIME;

var STATE_BOUNCE = 'bounce';
var STATE_FALL = 'fall';

// Math
//const HEIGHT_BOUNCE = HxGlobals.LOGIC_HEIGHT_BOUNCE;    // h
var BOUNCE_PERIOD = 0.72; // HxGlobals.LOGIC_BOUNCE_PERIOD; // t
var HEIGHT_BOUNCE = 0.25; //HxGlobals.LOGIC_ACCELERATION * (BOUNCE_PERIOD * BOUNCE_PERIOD) / 8;
var HEIGHT_LEVEL = _HxGlobals2.default.LOGIC_HEIGHT_LEVEL; // H
var ACCELERATION = 8 * HEIGHT_BOUNCE / (BOUNCE_PERIOD * BOUNCE_PERIOD); // HxGlobals.LOGIC_ACCELERATION;      // a
var FALL_VELOCITY = Math.sqrt(2 * HEIGHT_LEVEL * ACCELERATION); //0.8;
var FALL_ACCEL = 1.75;

////////////////////////////
// Bounce state values
//   bounce velocity:
//      V = sqrt(2 * h * a)
//   bounce period:
//      t = 2 * sqrt(2 * h / a)
//
// Fall state values
//   fall velocity from k-th level:
//      Vk = sqrt(2 * a * H * k + 2 * a * h) = sqrt(2 * a * (H * k + h))
//   fall duration from k-th to (k+1)-th floor:
//      tk = sqrt(2 * H / a) * (sqrt(k + h/H + 1) - sqrt(k + h/H))

var HelixGame = function (_Laya$EventDispatcher) {
    _inherits(HelixGame, _Laya$EventDispatcher);

    _createClass(HelixGame, null, [{
        key: 'EVENT_LEVEL_ADDED',
        get: function get() {
            return 'LEVEL_ADDED';
        }
    }, {
        key: 'EVENT_LEVEL_REMOVED',
        get: function get() {
            return 'LEVEL_REMOVED';
        }
    }, {
        key: 'EVENT_LEVEL_PASSED',
        get: function get() {
            return 'LEVEL_PASSED';
        }
    }, {
        key: 'EVENT_LEVEL_BROKEN',
        get: function get() {
            return 'LEVEL_BROKEN';
        }
    }, {
        key: 'EVENT_LEVEL_RESUMED',
        get: function get() {
            return 'LEVEL_RESUMED';
        }
    }, {
        key: 'EVENT_RESULT',
        get: function get() {
            return 'RESULT';
        }
    }, {
        key: 'EVENT_BALL_BOUNCE',
        get: function get() {
            return 'BALL_BOUNCE';
        }
    }, {
        key: 'RESULT_NOT_STARTED',
        get: function get() {
            return 'NOT_STARTED';
        }
    }, {
        key: 'RESULT_PLAYING',
        get: function get() {
            return 'PLAYING';
        }
    }, {
        key: 'RESULT_WIN',
        get: function get() {
            return 'WIN';
        }
    }, {
        key: 'RESULT_LOOSE',
        get: function get() {
            return 'LOOSE';
        }
    }]);

    function HelixGame(generator, resumeState) {
        _classCallCheck(this, HelixGame);

        var _this = _possibleConstructorReturn(this, (HelixGame.__proto__ || Object.getPrototypeOf(HelixGame)).call(this));

        _this._generator = generator;
        _this._state = {};
        _this._levels = [];
        _this._setBounce();
        _this._shift = 0;
        _this._shiftPrev = 0;
        _this._result = HelixGame.RESULT_NOT_STARTED;
        _this._elapsed = 0;
        _this._resumeCount = 0;
        _this._floorIndex = 0;
        _this._distance = 0;
        if (resumeState) {
            _this._result = resumeState.result;
            _this._floorIndex = resumeState.floorIndex;
            _this._resumeCount = resumeState.resumeCount;
            for (var i = 0; i < _this._floorIndex; i++) {
                generator.next();
            }
        }
        return _this;
    }

    _createClass(HelixGame, [{
        key: 'start',
        value: function start() {
            this._shiftPrev = this._shift;
            if (this.result == HelixGame.RESULT_NOT_STARTED) {
                this._fetch();
                if (this._levels.length) {
                    this._setResult(HelixGame.RESULT_PLAYING);
                    this._initShiftToFirstFloor();
                }
            } else {
                this._fetch();
                if (this._levels.length) this._initShiftToFirstFloor();
            }
        }
    }, {
        key: 'getResumeState',
        value: function getResumeState() {
            return { result: this.result, floorIndex: this.floorIndex, resumeCount: this.resumeCount };
        }
    }, {
        key: 'resume',
        value: function resume() {
            if (this.finished) {
                this._shiftPrev = this._shift;
                this._resumed = true;
                this._resumeCount++;
                if (this._levels[0].segments.wall) this._levels[0].segments.wall = null;
                this._setResult(HelixGame.RESULT_PLAYING);
                this.event(HelixGame.EVENT_LEVEL_RESUMED, this._levels[0]);
            }
        }
    }, {
        key: 'update',
        value: function update(deltaTime) {
            if (this.result != HelixGame.RESULT_PLAYING) return;

            if (this._levels.length == 0) {
                this._setResult(HelixGame.RESULT_WIN);
                return;
            }

            if (deltaTime > MAX_DELTA_TIME) deltaTime = MAX_DELTA_TIME;

            this._elapsed += deltaTime;
            this._updateMoveLevels();

            if (!this.isBrakingBall && this._tryHitWall()) {
                this._updateLevelsPos();
                this._setResult(HelixGame.RESULT_LOOSE);
                return;
            }

            this._shiftPrev = this._shift;

            while (deltaTime > 0 && this.result == HelixGame.RESULT_PLAYING) {
                var nextDelta = this._getNextDeltaTime();
                this._state.totalTime += Math.min(deltaTime, nextDelta);
                if (deltaTime < nextDelta) {
                    this._state.time += deltaTime;
                    break;
                }
                deltaTime -= nextDelta;
                var picked = this._pickFloor();
                var info = this._levels[0];
                if (info && picked && picked.type != _HxGlobals2.default.SEG_HOLE) {
                    var nextBreakFromLevel = _HxGlobals2.default.LOGIC_LEVEL_BREAK_FROM;
                    if (picked.type == _HxGlobals2.default.SEG_WIN) {
                        this._setResult(HelixGame.RESULT_WIN);
                    } else if (this._state.type == STATE_FALL && this.isBrakingBall) {
                        this._levels[0] = null;
                        info.crashedLevel = this._state.level + 1;
                        this.event(HelixGame.EVENT_LEVEL_REMOVED, info);
                        this.event(HelixGame.EVENT_LEVEL_BROKEN, this._state.level);
                        picked.broken = true;
                        //nextBreakFromLevel++;
                    } else if (!this._resumed && picked.type == _HxGlobals2.default.SEG_DEATH) {
                        this._setResult(HelixGame.RESULT_LOOSE);
                    }
                    this._setBounce(0, nextBreakFromLevel);
                    this.event(HelixGame.EVENT_BALL_BOUNCE, picked);
                } else {
                    this._resumed = false;
                    this._dequeueLevel();
                    this._setFall(0, this._state.level + 1);
                    if (info) this.event(HelixGame.EVENT_LEVEL_REMOVED, info);
                    this.event(HelixGame.EVENT_LEVEL_PASSED, this._state.level);
                    this._fetch();
                }
            }
            //if (this._state.type == STATE_FALL)
            this._updateLevelsPos();
        }
    }, {
        key: '_initShiftToFirstFloor',
        value: function _initShiftToFirstFloor() {
            var segments = this._levels[0].segments;
            var seg = segments.stat.find(function (seg) {
                return seg.type == _HxGlobals2.default.SEG_GROUND;
            });
            if (!seg) {
                seg = segments.stat.find(function (seg) {
                    return seg.type == _HxGlobals2.default.SEG_DEATH;
                });
                if (!seg) return;
            }
            this._shift = segments.statStart / 360 + (seg.start + seg.end) * 0.5;
        }
    }, {
        key: '_setBounce',
        value: function _setBounce(time, breakFromLevel) {
            this._state.type = STATE_BOUNCE;
            this._state.time = time || 0;
            this._state.level = 0;
            this._state.breakFromLevel = breakFromLevel || _HxGlobals2.default.LOGIC_LEVEL_BREAK_FROM;
        }
    }, {
        key: '_setFall',
        value: function _setFall(time, level) {
            this._state.type = STATE_FALL;
            this._state.time = time || 0;
            if (level <= 1) this._state.totalTime = 0;
            this._state.level = level || 0;
        }
    }, {
        key: '_dequeueLevel',
        value: function _dequeueLevel() {
            this._floorIndex++;
            var info = this._levels.splice(0, 1);
            this._fetch();
            return info;
        }
    }, {
        key: '_fetch',
        value: function _fetch() {
            if (this._levels.length > 0 && this._levels[this._levels.length - 1].win) {
                return;
            }
            while (this._levels.length < FETCH_LEVELS) {
                var segments = this._generator.next();
                var lvls = this._levels;
                var info = { pos: lvls.length ? lvls[lvls.length - 1].pos + 1 : 0 };
                if (segments) info.segments = segments;else {
                    info.win = true;
                    info.segments = { stat: [{ type: _HxGlobals2.default.SEG_WIN, start: 0, end: 1 }], statStart: 0 };
                }
                lvls.push(info);
                this.event(HelixGame.EVENT_LEVEL_ADDED, info);
                if (info.win) break;
            }
        }
    }, {
        key: '_getNextDeltaTime',
        value: function _getNextDeltaTime() {
            var state = this._state;
            var totalT;
            if (state.type == STATE_BOUNCE) {
                //totalT = 2 * Math.sqrt(2 * HEIGHT_BOUNCE / ACCELERATION);
                totalT = BOUNCE_PERIOD;
                return totalT - state.time;
            } else {
                // state.type == STATE_FALL
                //var h_H = HEIGHT_BOUNCE / HEIGHT_LEVEL;
                //totalT = Math.sqrt(2 * HEIGHT_LEVEL * (state.level + h_H + 1) / ACCELERATION)
                //    - Math.sqrt(2 * HEIGHT_LEVEL * (state.level + h_H) / ACCELERATION);
                //totalT = HEIGHT_LEVEL / FALL_VELOCITY;
                totalT = (Math.sqrt(FALL_VELOCITY * FALL_VELOCITY + 2 * FALL_ACCEL * HEIGHT_LEVEL * state.level) - Math.sqrt(FALL_VELOCITY * FALL_VELOCITY + 2 * FALL_ACCEL * HEIGHT_LEVEL * (state.level - 1))) / FALL_ACCEL;
                //console.log(totalT);
                return totalT - state.time;
            }
        }
    }, {
        key: '_tryHitWall',
        value: function _tryHitWall() {
            var lvl = this._levels[0];
            if (!lvl || this._shift == this._shiftPrev || !lvl.segments.wall) return false;
            var wall = lvl.segments.wall;
            var shiftMin = Math.min(this._shift, this._shiftPrev) - _HxGlobals2.default.WALL_ANGLE / 360;
            var shiftMax = Math.max(this._shift, this._shiftPrev) + _HxGlobals2.default.WALL_ANGLE / 360;
            var shiftWall = wall.pos + lvl.segments.statStart / 360 + (this._shift < this._shiftPrev ? 1 : -1) * _HxGlobals2.default.WALL_ANGLE / 360;
            var d = shiftWall - shiftMin;d -= Math.floor(d);
            if (d >= shiftMax - shiftMin) return false;
            this._shift = shiftMin + d;
            return true;
        }
    }, {
        key: '_pickFloor',
        value: function _pickFloor() {
            var lvl = this._levels[0];
            if (!lvl) return _HxGlobals2.default.SEG_HOLE;
            var segments = lvl.segments;
            //var shift = this._shift - Math.floor(this._shift);
            var statPick = this._pickCircle(segments.stat, -segments.statStart / 360 + this._shift);
            var movePick = this._pickCircle(segments.move, -(segments.moveStart + lvl.moveA) / 360 + this._shift);
            return _HxGlobals2.default.compareSegs(statPick, movePick) >= 0 ? statPick : movePick;
            // if (statPick == HxGlobals.SEG_DEATH || movePick == HxGlobals.SEG_DEATH)
            //     return HxGlobals.SEG_DEATH;
            // for (var i = 0; i < segments.length; i++) {
            //     var seg = segments[i];
            //     if (seg.end >= shift)
            //         return seg.type;
            // }
            // return HxGlobals.SEG_GROUND;
        }
    }, {
        key: '_pickCircle',
        value: function _pickCircle(segments, shift) {
            if (segments) {
                shift = shift - Math.floor(shift);
                for (var i = 0; i < segments.length; i++) {
                    var seg = segments[i];
                    if (seg.end >= shift) return seg; //.type;
                }
            }
            return null; //HxGlobals.SEG_HOLE;
        }
    }, {
        key: '_updateMoveLevels',
        value: function _updateMoveLevels() {
            var lvls = this._levels;
            var startIdx = this._resumed ? 1 : 0;
            for (var i = startIdx; i < lvls.length; i++) {
                var lvl = lvls[i];
                if (lvl && lvl.segments.move) {
                    var s = lvl.segments;
                    lvl.moveA = s.moveAngle * Math.sin(2 * Math.PI * s.moveFreq * this._elapsed);
                }
            }
        }
    }, {
        key: '_updateLevelsPos',
        value: function _updateLevelsPos() {
            var s = this._state;
            var lvls = this._levels;
            if (s.type == STATE_BOUNCE) {
                for (var i = 0; i < lvls.length; i++) {
                    if (lvls[i]) lvls[i].pos = i * HEIGHT_LEVEL;
                }
            } else {
                //var v = Math.sqrt(2 * ACCELERATION * (HEIGHT_LEVEL * s.level + HEIGHT_BOUNCE));
                //var dist = v * s.time + ACCELERATION * s.time * s.time * 0.5;
                var v = Math.sqrt(FALL_VELOCITY * FALL_VELOCITY + 2 * FALL_ACCEL * (s.level - 1) * HEIGHT_LEVEL);
                var dist = v * s.time + FALL_ACCEL * s.time * s.time * 0.5;
                for (var i = 0; i < lvls.length; i++) {
                    if (lvls[i]) lvls[i].pos = (i + 1) * HEIGHT_LEVEL - dist;
                }
                if (lvls[0]) {
                    this._distance = dist + this._floorIndex - 1;
                }
            }
        }
    }, {
        key: '_setResult',
        value: function _setResult(value) {
            this._result = value;
            this.event(HelixGame.EVENT_RESULT, value);
        }
    }, {
        key: 'progress',
        get: function get() {
            if (this.result == HelixGame.RESULT_WIN) return 1;
            return 1 - (this._generator.countLeft + this._levels.length) / this._generator.countTotal;
        }
    }, {
        key: 'finished',
        get: function get() {
            return this.result == HelixGame.RESULT_WIN || this.result == HelixGame.RESULT_LOOSE;
        }
    }, {
        key: 'resumeCount',
        get: function get() {
            return this._resumeCount;
        }
    }, {
        key: 'result',
        get: function get() {
            return this._result;
        }
    }, {
        key: 'shift',
        get: function get() {
            return this._shift;
        },
        set: function set(value) {
            this._shift = value;
        }
    }, {
        key: 'floorIndex',
        get: function get() {
            return this._floorIndex;
        }
    }, {
        key: 'isBrakingBall',
        get: function get() {
            return this._state.level >= this._state.breakFromLevel;
        }
    }, {
        key: 'ballPos',
        get: function get() {
            var s = this._state;
            if (s.type == STATE_BOUNCE) {
                var vel = Math.sqrt(2 * HEIGHT_BOUNCE * ACCELERATION);
                return vel * s.time - ACCELERATION * s.time * s.time * 0.5;
            }
            return 0;
        }
    }, {
        key: 'ballVel',
        get: function get() {
            var s = this._state;
            var vel = Math.sqrt(2 * HEIGHT_BOUNCE * ACCELERATION);
            if (s.type == STATE_BOUNCE) return vel - ACCELERATION * s.time;else return -vel - FALL_ACCEL * s.totalTime;
        }
    }, {
        key: 'ballPosMax',
        get: function get() {
            return HEIGHT_BOUNCE;
        }
    }, {
        key: 'distance',
        get: function get() {
            return this._distance;
        }
    }]);

    return HelixGame;
}(Laya.EventDispatcher);

exports.default = HelixGame;

},{"./HxGlobals":37}],30:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _RingSliceMesh = require("./RingSliceMesh");

var _RingSliceMesh2 = _interopRequireDefault(_RingSliceMesh);

var _RingSliceMeshPool = require("./RingSliceMeshPool");

var _RingSliceMeshPool2 = _interopRequireDefault(_RingSliceMeshPool);

var _GradientPlaneMesh = require("./GradientPlaneMesh");

var _GradientPlaneMesh2 = _interopRequireDefault(_GradientPlaneMesh);

var _TriangleMesh = require("./TriangleMesh");

var _TriangleMesh2 = _interopRequireDefault(_TriangleMesh);

var _MouseCtrl = require("./MouseCtrl");

var _MouseCtrl2 = _interopRequireDefault(_MouseCtrl);

var _HelixGame = require("./HelixGame");

var _HelixGame2 = _interopRequireDefault(_HelixGame);

var _HelixView = require("./HelixView");

var _HelixView2 = _interopRequireDefault(_HelixView);

var _HxGlobals = require("./HxGlobals");

var _HxGlobals2 = _interopRequireDefault(_HxGlobals);

var _SoundMan = require("./SoundMan");

var _SoundMan2 = _interopRequireDefault(_SoundMan);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BALL_RADIUS = _HxGlobals2.default.VIEW_BALL_RADIUS;
var FLOOR_THICKNESS = _HxGlobals2.default.VIEW_FLOOR_THICKNESS;
var SECTOR_RADIUS = _HxGlobals2.default.VIEW_SECTOR_RADIUS;
var COLUMN_RADIUS = _HxGlobals2.default.VIEW_COLUMN_RADIUS;

var HelixGameView = function (_Laya$Scene3D) {
    _inherits(HelixGameView, _Laya$Scene3D);

    _createClass(HelixGameView, null, [{
        key: "EVENT_STARTED",
        get: function get() {
            return "STARTED";
        }
    }]);

    function HelixGameView(generator, resumeState, skin, mouseDispatcher, blots, fxs) {
        _classCallCheck(this, HelixGameView);

        var _this = _possibleConstructorReturn(this, (HelixGameView.__proto__ || Object.getPrototypeOf(HelixGameView)).call(this));

        _this._skin = skin;
        blots.color = skin.ballMat.rawColor;

        var scene = _this;
        _this._mouseDispatcher = mouseDispatcher;

        // Camera
        var camera = scene.addChild(new Laya.Camera(0, 0.1, 100));
        camera.transform.translate(new Laya.Vector3(4, 1.3, 0));
        camera.transform.rotate(new Laya.Vector3(-30, 90, 0), true, false);
        camera.fieldOfView = 60;

        // Gradient back
        var back = camera.addChild(new Laya.MeshSprite3D(skin.backMesh));
        back.meshRenderer.sharedMaterial = skin.backMat;
        var backDist = 20;
        back.transform.translate(new Laya.Vector3(0, 0, -backDist));
        back.transform.localRotationEulerY = 180;
        back.transform.localScale = new Laya.Vector3(100, backDist * Math.tan(0.5 * camera.fieldOfView * Math.PI / 180), 1);

        // Light
        var directionLight = scene.addChild(new Laya.DirectionLight());
        directionLight.color = new Laya.Vector3(1, 1, 1);
        var lightDir = new Laya.Vector3(-1, -1.5, 0.5);
        Laya.Vector3.normalize(lightDir, lightDir);
        directionLight.transform.worldMatrix.setForward(lightDir);

        _this._ball = _this.addChild(new Laya.MeshSprite3D(new Laya.SphereMesh(BALL_RADIUS, 12, 16)));
        _this._ball.transform.localPositionX = 0.75;
        _this._ball.meshRenderer.sharedMaterial = skin.ballMat;
        _this._bounceT = 1000;
        _this._ballTrail = _this.addChild(new Laya.MeshSprite3D(new _TriangleMesh2.default(BALL_RADIUS, BALL_RADIUS)));
        _this._ballTrail.meshRenderer.sharedMaterial = skin.ballTrailMat;
        _this._ballTrail.transform.localPositionX = 0.75;
        _this._ballTrail.transform.localScaleY = 0;
        _this._ballTrail.transform.localRotationEulerY = -90;
        _this._ballLastVel = 0;

        _this._generator = generator;
        _this._helixGame = new _HelixGame2.default(generator, resumeState);
        var sceneRoot = scene.addChild(new Laya.Sprite3D());
        _this._rotationRoot = sceneRoot.addChild(new Laya.Sprite3D());
        var column = _this._rotationRoot.addChild(new Laya.MeshSprite3D(new Laya.CylinderMesh(COLUMN_RADIUS, 20, 24)));
        column.meshRenderer.sharedMaterial = skin.poleMat;
        _this._helixView = _this._rotationRoot.addChild(new _HelixView2.default(_this._helixGame, sceneRoot, new _RingSliceMeshPool2.default(SECTOR_RADIUS, COLUMN_RADIUS, FLOOR_THICKNESS), skin, blots));
        _this._helixGame.on(_HelixGame2.default.EVENT_RESULT, _this, _this._onResult);
        _this._helixGame.on(_HelixGame2.default.EVENT_LEVEL_RESUMED, _this, _this._onResume);
        _this._helixGame.on(_HelixGame2.default.EVENT_BALL_BOUNCE, _this, _this._onBallBounce);
        _this._helixGame.on(_HelixGame2.default.EVENT_LEVEL_PASSED, _this, function (lvl) {
            _SoundMan2.default.playBreak(lvl - 1);
        });
        _this._helixGame.on(_HelixGame2.default.EVENT_LEVEL_BROKEN, _this, function () {
            _SoundMan2.default.playCrack();
        });
        _this._helixGame.start();
        if (!resumeState) _this._createMouse();
        _this._setShift(_this._getShift());
        Laya.timer.frameLoop(1, _this, _this._onFrame);

        _this._initFxs(fxs);
        return _this;
    }

    _createClass(HelixGameView, [{
        key: "destroy",
        value: function destroy(destroyChildren) {
            this.fxTrail.active = false;
            if (this._mouseCtrl) this._mouseCtrl.destroy();
            Laya.timer.clear(this, this._onFrame);
            _get(HelixGameView.prototype.__proto__ || Object.getPrototypeOf(HelixGameView.prototype), "destroy", this).call(this, true);
        }
    }, {
        key: "_onResult",
        value: function _onResult(result) {
            if (this.helixGame.finished) this._mouseCtrl.destroy();
            if (result == _HelixGame2.default.RESULT_LOOSE) {
                this.fxFail.transform.localPositionY = this._ball.transform.localPositionY;
                this.fxFail.particleSystem.play();
                _SoundMan2.default.playDeath();
                this._setShift(this._getShift());
            }
        }
    }, {
        key: "_onResume",
        value: function _onResume() {
            this._createMouse();
        }
    }, {
        key: "_getShift",
        value: function _getShift() {
            return -this._helixGame.shift;
        }
    }, {
        key: "_setShift",
        value: function _setShift(shift) {
            this._helixGame.shift = -shift;
            var r = this._rotationRoot.transform.localRotationEuler;
            r.y = 360 * shift;
            this._rotationRoot.transform.localRotationEuler = r;
            //console.log(this._helixGame.shift);
        }
    }, {
        key: "_createMouse",
        value: function _createMouse() {
            this._mouseCtrl = new _MouseCtrl2.default(this._mouseDispatcher, function () {
                return this._getShift();
            }.bind(this), function (ctx) {
                this._checkStarted();
                this._setShift(ctx.startValue + ctx.deltaX * _HxGlobals2.default.INPUT_ROTATE_SENSITIVITY);
                this._helixView.markMoved();
            }.bind(this));
        }
    }, {
        key: "_checkStarted",
        value: function _checkStarted() {
            if (!this._started) {
                this._started = true;
                this.event(HelixGameView.EVENT_STARTED);
            }
        }
    }, {
        key: "_initFxs",
        value: function _initFxs(fxs) {
            this._fxs = fxs;
            var FX_SCALE = 0.1;
            for (var name in fxs) {
                fxs[name].transform.localScale = new Laya.Vector3(FX_SCALE, FX_SCALE, FX_SCALE);
            }
            var underBallPos = new Laya.Vector3(_HxGlobals2.default.VIEW_BALL_XPOS, FLOOR_THICKNESS * 0.5 + _HxGlobals2.default.VIEW_BLOT_YOFFSET * 2, 0);
            this.fxBounce.transform.localPosition = underBallPos;
            this.fxBounce.particleSystem.startColorConstant = this._skin.ballMat.rawColor;
            this.fxFail.transform.localPosition = underBallPos;
            this.fxTrail.transform.localPosition = new Laya.Vector3(_HxGlobals2.default.VIEW_BALL_XPOS, (FLOOR_THICKNESS + BALL_RADIUS) * 0.5, 0);;
            this.fxTrail.active = false;
            this.fxBackground.visualHeight = (this._generator.countTotal + 4) * _HxGlobals2.default.VIEW_LEVEL_HEIGHT;
            this.fxBackground.particleSystem.shape.z = this.fxBackground.visualHeight / FX_SCALE;
            this.fxBackground.particleSystem.emission.emissionRate = 3 * (this.fxBackground.visualHeight / 22);
            this.fxBackground.transform.localPositionX = -3.5;
            this.fxBackground.started = false;
        }
    }, {
        key: "_onBallBounce",
        value: function _onBallBounce(info) {
            this._bounceT = 0;
            this.fxBounce.particleSystem.play();
            //if (!info.broken)
            _SoundMan2.default.playJump();
        }
    }, {
        key: "_onFrame",
        value: function _onFrame() {
            var hxg = this._helixGame;
            var dt = Laya.timer.delta * 0.001;
            hxg.update(dt);
            this._ball.transform.localPositionY = hxg.ballPos * _HxGlobals2.default.VIEW_BOUNCE_HEIGHT_SCALE + (BALL_RADIUS + FLOOR_THICKNESS * 0.5);
            this._ballTrail.transform.localPositionY = this._ball.transform.localPositionY;
            this._ballLastVel = Math.max(-3, hxg.ballVel) * 0.3 + this._ballLastVel * 0.7;
            this._ballTrail.transform.localScaleY = -this._ballLastVel * 3.5;
            var heat = Math.max(0, Math.min(-(hxg.ballVel + 2), 1));
            this._skin.heat = heat;
            if (heat > 0 || this.fxTrail.particleSystem.startColorConstant.w > 0) {
                if (!this.fxTrail.active) {
                    this.fxTrail.particleSystem.play();
                    this.fxTrail.active = true;
                }
                this.fxTrail.particleSystem.startColorConstant = this._skin.ballTrailColor.clone();
            } else this.fxTrail.active = false;
            // Bounce
            if (!hxg.finished) this._bounceT += dt;
            var s = hxg.result == _HelixGame2.default.RESULT_WIN ? 0 : 0.2 * Math.exp(-3 * this._bounceT) * Math.cos(20 * this._bounceT);
            this._ball.transform.localScale = new Laya.Vector3(1 + s, 1 - s, 1 + s);
            this.fxBackground.transform.localPositionY = this.helixGame.distance * _HxGlobals2.default.VIEW_LEVEL_HEIGHT - this.fxBackground.visualHeight * 0.5;
            if (!this.fxBackground.started) {
                this.fxBackground.started = true;
                this.fxBackground.particleSystem.play();
                this.fxBackground.particleSystem._updateParticles(3000);
            }
        }
    }, {
        key: "helixGame",
        get: function get() {
            return this._helixGame;
        }
    }, {
        key: "fxBounce",
        get: function get() {
            return this._fxs[_HxGlobals2.default.FX_NAME_BOUNCE];
        }
    }, {
        key: "fxFail",
        get: function get() {
            return this._fxs[_HxGlobals2.default.FX_NAME_FAIL];
        }
    }, {
        key: "fxTrail",
        get: function get() {
            return this._fxs[_HxGlobals2.default.FX_NAME_TRAIL];
        }
    }, {
        key: "fxBackground",
        get: function get() {
            return this._fxs[_HxGlobals2.default.FX_NAME_BACKGROUND];
        }
    }]);

    return HelixGameView;
}(Laya.Scene3D);

exports.default = HelixGameView;

},{"./GradientPlaneMesh":27,"./HelixGame":29,"./HelixView":35,"./HxGlobals":37,"./MouseCtrl":42,"./RingSliceMesh":47,"./RingSliceMeshPool":48,"./SoundMan":52,"./TriangleMesh":54}],31:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HelixGeneratorBase = function () {
    function HelixGeneratorBase() {
        _classCallCheck(this, HelixGeneratorBase);
    }

    // >>> To override


    _createClass(HelixGeneratorBase, [{
        key: "next",
        value: function next() {
            return null;
        }
        // <<< To override

    }, {
        key: "countTotal",
        get: function get() {
            return 0;
        }
    }, {
        key: "countLeft",
        get: function get() {
            return 0;
        }
    }], [{
        key: "rndInt",
        value: function rndInt(max) {
            return Math.floor(Math.random() * max);
        }
    }, {
        key: "genArray",
        value: function genArray(count, value) {
            return Array.from(new Array(count), function () {
                return value;
            });
        }
    }, {
        key: "shuffle",
        value: function shuffle(arr) {
            for (var i = 0; i < arr.length - 1; i++) {
                var idx = i + HelixGeneratorBase.rndInt(arr.length - i);
                var buf = arr[i];arr[i] = arr[idx];arr[idx] = buf;
            }
            return arr;
        }
    }, {
        key: "groupRepeats",
        value: function groupRepeats(arr) {
            var res = [];
            for (var i = 0; i < arr.length;) {
                var val = arr[i];
                var cnt = 1;
                while (i + cnt < arr.length && arr[i + cnt] == val) {
                    cnt++;
                }res.push({ value: val, count: cnt });
                i += cnt;
            }
            return res;
        }
    }, {
        key: "rotateCircle",
        value: function rotateCircle(circle, angle) {
            var split = angle / 360;
            split -= Math.floor(split);
            var epsilon = 2 / 360;
            if (Math.abs(split) < epsilon || Math.abs(split - 1) < epsilon) return circle;
            var idx = 0;
            for (idx = 0; idx < circle.length; idx++) {
                var s = circle[idx];
                if (s.end - epsilon > split) {
                    if (Math.abs(split - s.start) >= epsilon) {
                        var pre_s = Object.assign({}, s);
                        pre_s.end = s.start = split;
                        circle.splice(idx, null, pre_s);
                        idx++;
                    }
                    break;
                }
            }
            var pre_slice = circle.splice(0, idx);
            circle.push.apply(circle, pre_slice);
            var start = 0;
            for (var i = 0; i < circle.length; i++) {
                var s = circle[i];
                s.end = start + (s.end - s.start);
                s.start = start;
                start = s.end;
            }
            return circle;
        }
    }]);

    return HelixGeneratorBase;
}();

exports.default = HelixGeneratorBase;

},{}],32:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _HelixGeneratorBase2 = require("./HelixGeneratorBase");

var _HelixGeneratorBase3 = _interopRequireDefault(_HelixGeneratorBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HelixGeneratorConfigFloors = function (_HelixGeneratorBase) {
    _inherits(HelixGeneratorConfigFloors, _HelixGeneratorBase);

    function HelixGeneratorConfigFloors(floors, moveFreq) {
        _classCallCheck(this, HelixGeneratorConfigFloors);

        var _this = _possibleConstructorReturn(this, (HelixGeneratorConfigFloors.__proto__ || Object.getPrototypeOf(HelixGeneratorConfigFloors)).call(this));

        _this._floors = [];
        for (var i in floors) {
            var floor = floors[i];
            var outFloor = {
                stat: _this._convertSectors(floor.stat),
                statStart: floor.statStart,
                move: _this._convertSectors(floor.move),
                moveStart: floor.moveStart,
                moveAngle: floor.moveAngle * 0.5,
                moveFreq: moveFreq
            };
            if (floor.wall) outFloor.wall = { pos: floor.wall.angle / 360 }; //{ pos: (floor.wall.start + Math.random() * floor.wall.size) / 360 };
            _this._floors.push(outFloor);
        }
        _this._countTotal = _this._floors.length;
        return _this;
    }

    _createClass(HelixGeneratorConfigFloors, [{
        key: "next",
        value: function next() {
            return this._floors.splice(0, 1)[0];
        }
    }, {
        key: "_convertSectors",
        value: function _convertSectors(sectors) {
            var res = [];
            var factor = 1 / 360;
            for (var i in sectors) {
                var s = sectors[i];
                var start = s.start * factor;
                var size = s.size * factor;
                if (size <= 0.5) res.push({ type: s.type, start: start, end: start + size });else {
                    res.push({ type: s.type, start: start, end: start + size * 0.5 });
                    res.push({ type: s.type, start: start + size * 0.5, end: start + size });
                }
            }
            return res;
        }
    }, {
        key: "countTotal",
        get: function get() {
            return this._countTotal;
        }
    }, {
        key: "countLeft",
        get: function get() {
            return this._floors.length;
        }
    }]);

    return HelixGeneratorConfigFloors;
}(_HelixGeneratorBase3.default);

exports.default = HelixGeneratorConfigFloors;

},{"./HelixGeneratorBase":31}],33:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _HelixGeneratorBase2 = require("./HelixGeneratorBase");

var _HelixGeneratorBase3 = _interopRequireDefault(_HelixGeneratorBase2);

var _HxGlobals = require("./HxGlobals");

var _HxGlobals2 = _interopRequireDefault(_HxGlobals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HelixGeneratorInfinitRandom = function (_HelixGeneratorBase) {
    _inherits(HelixGeneratorInfinitRandom, _HelixGeneratorBase);

    function HelixGeneratorInfinitRandom(groundC, deathC, holeC) {
        var count = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

        _classCallCheck(this, HelixGeneratorInfinitRandom);

        var _this = _possibleConstructorReturn(this, (HelixGeneratorInfinitRandom.__proto__ || Object.getPrototypeOf(HelixGeneratorInfinitRandom)).call(this));

        _this._groundC = groundC;
        _this._deathC = deathC;
        _this._holeC = holeC;
        _this._count = count ? { total: count, left: count } : null;
        return _this;
    }

    _createClass(HelixGeneratorInfinitRandom, [{
        key: "next",
        value: function next() {
            if (this._count) {
                if (this._count.left == 0) return null;
                this._count.left--;
            }
            var floor = {};
            var arrStat = _HelixGeneratorBase3.default.genArray(this._groundC, _HxGlobals2.default.SEG_GROUND).concat(_HelixGeneratorBase3.default.genArray(this._deathC, _HxGlobals2.default.SEG_DEATH).concat(_HelixGeneratorBase3.default.genArray(this._holeC, _HxGlobals2.default.SEG_HOLE)));
            floor.stat = this._generateCircle(arrStat);
            floor.statStart = 0; //90;
            if (this._count.total > this._count.left + 1) {
                var arrMove = _HelixGeneratorBase3.default.genArray(this._deathC, _HxGlobals2.default.SEG_DEATH).concat(_HelixGeneratorBase3.default.genArray(this._groundC + this._holeC, _HxGlobals2.default.SEG_HOLE));
                floor.move = this._generateCircle(arrMove);
                floor.moveStart = 0; //90;
                floor.moveFreq = 0.25;
                floor.moveAngle = 30;
            }
            return floor;
        }
    }, {
        key: "_generateCircle",
        value: function _generateCircle(arr) {
            _HelixGeneratorBase3.default.shuffle(arr);
            var groups = _HelixGeneratorBase3.default.groupRepeats(arr);
            var reducer = function reducer(acc, val) {
                var len = val.count / acc.sectors;
                var newVal = { type: val.value, start: acc.end, end: acc.end + len };
                acc.end = newVal.end;
                acc.res.push(newVal);
                return acc;
            };
            var res = groups.reduce(reducer, { sectors: arr.length, end: 0, res: [] }).res;
            //res = HelixGeneratorBase.rotateCircle(res, Math.floor(Math.random() * 10) * 36);
            return res;
        }
    }, {
        key: "countTotal",
        get: function get() {
            return this._count ? this._count.total : 10000;
        }
    }, {
        key: "countLeft",
        get: function get() {
            return this._count ? this._count.left : 10000;
        }
    }]);

    return HelixGeneratorInfinitRandom;
}(_HelixGeneratorBase3.default);

exports.default = HelixGeneratorInfinitRandom;

},{"./HelixGeneratorBase":31,"./HxGlobals":37}],34:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GradientPlaneMesh = require("./GradientPlaneMesh");

var _GradientPlaneMesh2 = _interopRequireDefault(_GradientPlaneMesh);

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HEAT_COLOR = _Utils2.default.toColor('ff2020');

var HelixSkin = function () {
    function HelixSkin(pole, ball, ground, trap, backTop, backBottom) {
        _classCallCheck(this, HelixSkin);

        this.poleMat = this._createMaterial(pole);
        this._heat = 0;
        this._ballTrailColor = new Laya.Vector4(1, 1, 1, 0.5);
        this.ballMat = this._createMaterial(ball, true);
        this.ballTrailMat = this._createTrailMaterial(ball);
        this.groundMat = this._createMaterial(ground);
        this.trapMat = this._createMaterial(trap);
        this.crashMat = this.ballMat;
        this.backMat = this._createBackMaterial();
        this.backMesh = new _GradientPlaneMesh2.default(backTop, backBottom);
    }

    _createClass(HelixSkin, [{
        key: "_createMaterial",
        value: function _createMaterial(rawColor, heatable) {
            var emission = 0.3;
            var albedo = 0.8;
            var smoothness = 0.2;
            var c = _Utils2.default.toColor(rawColor);
            var mat = new Laya.PBRStandardMaterial();
            mat.rawColor = c;
            mat.enableEmission = true;
            mat.emissionColor = new Laya.Vector4(c.r * emission, c.g * emission, c.b * emission, 1);
            mat.albedoColor = new Laya.Vector4(c.r * albedo, c.g * albedo, c.b * albedo, 1);
            mat.smoothness = smoothness;
            mat.metallic = 0;
            if (heatable) {
                var ballTrailColor = this._ballTrailColor;
                mat.setHeat = function (t) {
                    var t_inv = 1 - t;
                    var r = HEAT_COLOR.r * t + c.r * t_inv,
                        g = HEAT_COLOR.g * t + c.g * t_inv,
                        b = HEAT_COLOR.b * t + c.b * t_inv;
                    mat.emissionColor.x = r * emission;
                    mat.emissionColor.y = g * emission;
                    mat.emissionColor.z = b * emission;
                    mat.albedoColor.x = r * albedo;
                    mat.albedoColor.y = g * albedo;
                    mat.albedoColor.z = b * albedo;
                };
            }
            return mat;
        }
    }, {
        key: "_createBackMaterial",
        value: function _createBackMaterial() {
            var mat = new Laya.EffectMaterial();
            mat.color = new Laya.Vector4(0.5, 0.5, 0.5, 1);
            return mat;
        }
    }, {
        key: "_createTrailMaterial",
        value: function _createTrailMaterial(rawColor) {
            var c = _Utils2.default.toColor(rawColor);
            var mat = new Laya.EffectMaterial();
            mat.renderMode = Laya.EffectMaterial.RENDERMODE_ALPHABLENDED;
            var I = 0.5;
            mat.color = new Laya.Vector4(c.r * I, c.g * I, c.b * I, 0.25);
            mat.setHeat = function (t) {
                var t_inv = 1 - t;
                mat.color.x = (HEAT_COLOR.r * t + c.r * t_inv) * I;
                mat.color.y = (HEAT_COLOR.g * t + c.g * t_inv) * I;
                mat.color.z = (HEAT_COLOR.b * t + c.b * t_inv) * I;
                this.ballTrailColor.x = HEAT_COLOR.r;
                this.ballTrailColor.y = HEAT_COLOR.g;
                this.ballTrailColor.z = HEAT_COLOR.b;
                this.ballTrailColor.w = t * 0.5;
            }.bind(this);
            return mat;
        }
    }, {
        key: "heatColor",
        get: function get() {
            return HEAT_COLOR;
        }
    }, {
        key: "heat",
        get: function get() {
            return this._heat;
        },
        set: function set(value) {
            this._heat = value;
            this.ballMat.setHeat(value);
            this.ballTrailMat.setHeat(value);
        }
    }, {
        key: "ballTrailColor",
        get: function get() {
            return this._ballTrailColor;
        }
    }], [{
        key: "getLevel",
        value: function getLevel(level) {
            var idx = (level - 1) % HelixSkin.all.length;
            return HelixSkin.all[idx];
        }
    }, {
        key: "all",
        get: function get() {
            if (!HelixSkin._all) {
                HelixSkin._all = [new HelixSkin('feeed7', 'fb3c7d', '7e0548', 'ff5e3a', 'f1eec8', 'cc0033'), new HelixSkin('a3faa3', 'e443ff', 'e76f51', 'fff200', 'acfcf8', '0ad9ff'),
                //new HelixSkin('f3ffcc', 'e2276c', '0AD3FF', '0AD3FF', 'A2FAA3', '55D657'),
                new HelixSkin('D5E4E5', '7EFF1C', '69891E', 'F15025', 'EFBDEB', 'A0619B'), new HelixSkin('F7F2F2', 'D1D138', '69891E', 'FFFF35', 'FC7E7E', 'B73535'), new HelixSkin('D7F9F1', 'FF9F1C', 'C9725C', 'FCFC20', 'C7DBD2', '849B91'), new HelixSkin('90FCF9', 'EC0B43', '738E5B', 'A1F458', 'FFD1E1', 'D8477A')];
            }
            return HelixSkin._all;
        }
    }]);

    return HelixSkin;
}();

exports.default = HelixSkin;

},{"./GradientPlaneMesh":27,"./Utils":61}],35:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _HelixGame = require("./HelixGame");

var _HelixGame2 = _interopRequireDefault(_HelixGame);

var _RingSliceMesh = require("./RingSliceMesh");

var _RingSliceMesh2 = _interopRequireDefault(_RingSliceMesh);

var _RingSliceMeshPool = require("./RingSliceMeshPool");

var _RingSliceMeshPool2 = _interopRequireDefault(_RingSliceMeshPool);

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

var _HxGlobals = require("./HxGlobals");

var _HxGlobals2 = _interopRequireDefault(_HxGlobals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LEVEL_HEIGHT = _HxGlobals2.default.VIEW_LEVEL_HEIGHT;
var DEBRIS_ACCELERATION = _HxGlobals2.default.DEBRIS_ACCELERATION;
var DEBRIS_VELOCITY = _HxGlobals2.default.DEBRIS_VELOCITY;
var DEBRIS_FALL_DURATION = _HxGlobals2.default.DEBRIS_FALL_DURATION;

var HelixView = function (_Laya$Sprite3D) {
    _inherits(HelixView, _Laya$Sprite3D);

    function HelixView(helix, piecesWorld, meshPool, skin, blots) {
        _classCallCheck(this, HelixView);

        var _this = _possibleConstructorReturn(this, (HelixView.__proto__ || Object.getPrototypeOf(HelixView)).call(this, "HelixView"));

        _this._helix = helix;
        _this._piecesWorld = piecesWorld;
        _this._levels = [];
        _this._meshPool = meshPool;
        _this._skin = skin;
        _this._blots = blots;
        helix.on(_HelixGame2.default.EVENT_LEVEL_ADDED, _this, _this._onLevelAdded);
        helix.on(_HelixGame2.default.EVENT_LEVEL_REMOVED, _this, _this._onLevelRemoved);
        helix.on(_HelixGame2.default.EVENT_LEVEL_RESUMED, _this, _this._onLevelResumed);
        helix.on(_HelixGame2.default.EVENT_RESULT, _this, _this._onResult);
        helix.on(_HelixGame2.default.EVENT_BALL_BOUNCE, _this, _this._onBounce);
        Laya.timer.frameLoop(1, _this, _this._onFrame);
        _this.markMoved();
        return _this;
    }

    _createClass(HelixView, [{
        key: "destroy",
        value: function destroy(destroyChildren) {
            this._helix.off(_HelixGame2.default.EVENT_LEVEL_ADDED, this, this._onLevelAdded);
            this._helix.off(_HelixGame2.default.EVENT_LEVEL_REMOVED, this, this._onLevelRemoved);
            this._helix.off(_HelixGame2.default.EVENT_LEVEL_RESUMED, this, this._onLevelResumed);
            this._helix.off(_HelixGame2.default.EVENT_RESULT, this, this._onResult);
            this._helix.off(_HelixGame2.default.EVENT_BALL_BOUNCE, this, this._onBounce);
            Laya.timer.clear(this, this._onFrame);
            _get(HelixView.prototype.__proto__ || Object.getPrototypeOf(HelixView.prototype), "destroy", this).call(this, destroyChildren);
        }
    }, {
        key: "_onLevelAdded",
        value: function _onLevelAdded(info) {
            var infoView = { info: info }; //, container:new Laya.Sprite3D() };
            if (info.segments.stat) {
                infoView.statContainer = this._addCircle(info.segments.stat, info.segments.statStart, false);
                //infoView.statContainer.transform.localRotationEulerY = -info.segments.statStart;
            }
            if (info.segments.move) {
                infoView.moveContainer = this._addCircle(info.segments.move, info.segments.moveStart, false);
            }
            if (info.segments.wall) {
                infoView.statContainer.addChild(this._createWall(info.segments.wall, info.segments.statStart));
            }
            this._levels.push(infoView);
            this._updateInfoViewPos(infoView);
        }
    }, {
        key: "markMoved",
        value: function markMoved() {
            this._movedCounter = 5;
        }
    }, {
        key: "_addCircle",
        value: function _addCircle(segments, startAngle, bump) {
            var container = new Laya.Sprite3D();
            for (var i = 0; i < segments.length; i++) {
                var seg = segments[i];
                if (seg.type != _HxGlobals2.default.SEG_HOLE) {
                    container.addChild(this._createCircleItem(seg, startAngle, bump));
                }
            }
            this.addChild(container);
            return container;
        }
    }, {
        key: "_createCircleItem",
        value: function _createCircleItem(seg, startAngle, bump) {
            var obj = new Laya.MeshSprite3D(this._meshPool.getMesh(seg.end - seg.start, bump || seg.type == _HxGlobals2.default.SEG_DEATH, seg.type == _HxGlobals2.default.SEG_DEATH));
            obj.transform.localRotationEuler = new Laya.Vector3(0, 360 * seg.end + startAngle, 0);
            obj.impulseDir = this._getRadAngleDir(2 * Math.PI * (seg.start + seg.end) * 0.5 + startAngle * Math.PI / 180);
            if (seg.type == _HxGlobals2.default.SEG_DEATH) obj.meshRenderer.sharedMaterial = this._skin.trapMat;else if (seg.type == _HxGlobals2.default.SEG_WIN) obj.meshRenderer.sharedMaterial = this._skin.ballMat;else obj.meshRenderer.sharedMaterial = this._skin.groundMat;
            obj.seg = seg;
            return obj;
        }
    }, {
        key: "_createWall",
        value: function _createWall(info, startAngle) {
            var obj = new Laya.MeshSprite3D(this._meshPool.getMesh(_HxGlobals2.default.WALL_ANGLE / 360, false, true, _HxGlobals2.default.VIEW_LEVEL_HEIGHT - _HxGlobals2.default.VIEW_FLOOR_THICKNESS));
            obj.transform.localRotationEuler = new Laya.Vector3(0, info.pos * 360 + _HxGlobals2.default.WALL_ANGLE * 0.5 + startAngle, 0);
            obj.transform.localPositionY = _HxGlobals2.default.VIEW_LEVEL_HEIGHT * 0.5; // + HxGlobals.VIEW_FLOOR_THICKNESS;
            obj.impulseDir = this._getRadAngleDir(2 * Math.PI * info.pos + startAngle * Math.PI / 180);
            obj.meshRenderer.sharedMaterial = this._skin.trapMat;
            obj.wall = info;
            console.log(obj.transform.localRotationEuler);
            return obj;
        }
    }, {
        key: "_getRadAngleDir",
        value: function _getRadAngleDir(rad) {
            return new Laya.Vector3(Math.cos(rad), 0, -Math.sin(rad));
        }
    }, {
        key: "_onLevelRemoved",
        value: function _onLevelRemoved(info) {
            var idx = this._levels.findIndex(function (itm) {
                return itm.info == info;
            });
            if (idx < 0) {
                console.error("_onLevelRemoved: level view not found");
                return;
            }
            var infoView = this._levels[idx];
            this._levels.splice(idx, 1);
            this._runRemoveAnimation(infoView.statContainer, info.crashedLevel);
            this._runRemoveAnimation(infoView.moveContainer, info.crashedLevel);
        }
    }, {
        key: "_onLevelResumed",
        value: function _onLevelResumed(info) {
            var view = this._levels.find(function (itm) {
                return itm.info == info;
            });
            this._repaintSegments(view.statContainer, this._skin.trapMat, this._skin.groundMat);
            this._repaintSegments(view.moveContainer, this._skin.trapMat, this._skin.groundMat);
            this._removeWall(view.statContainer);
        }
    }, {
        key: "_repaintSegments",
        value: function _repaintSegments(container, fromMaterial, toMaterail) {
            if (!container) return;
            for (var i = 0; i < container.numChildren; i++) {
                var renderer = container.getChildAt(i).meshRenderer;
                if (renderer.sharedMaterial == fromMaterial) {
                    renderer.sharedMaterial = toMaterail;
                }
            }
        }
    }, {
        key: "_removeWall",
        value: function _removeWall(container) {
            for (var i = 0; i < container.numChildren; i++) {
                var child = container.getChildAt(i);
                if (child.wall) {
                    child.parent.removeChild(child);
                }
            }
        }
    }, {
        key: "_onBounce",
        value: function _onBounce(seg) {
            if (this._movedCounter > 0 && this._levels.length && this._levels[0]) {
                this._movedCounter--;
                var levelView = this._levels[0];
                var segView = this._findSegView(levelView.statContainer, seg) || this._findSegView(levelView.moveContainer, seg);
                if (segView) {
                    var blot = this._blots.addTo(segView);
                    var pos = new Laya.Vector3(_HxGlobals2.default.VIEW_BALL_XPOS, 0, 0);
                    var m = _Utils2.default.fromToTransformMatrix(this._piecesWorld.transform, blot.transform);
                    Laya.Vector3.transformCoordinate(pos, m, pos);
                    pos.y = _HxGlobals2.default.VIEW_FLOOR_THICKNESS * 0.5 + _HxGlobals2.default.VIEW_BLOT_YOFFSET;
                    blot.transform.localPosition = pos;
                    blot.transform.localScale = new Laya.Vector3(0.5, 0.5, 0.5);
                    blot.transform.localRotationEulerY = 360 * Math.random();
                }
            }
        }
    }, {
        key: "_findSegView",
        value: function _findSegView(container, seg) {
            if (container) {
                var count = container.numChildren;
                for (var i = 0; i < count; i++) {
                    var child = container.getChildAt(i);
                    if (child.seg == seg) return child;
                }
            }
            return null;
        }
    }, {
        key: "_onResult",
        value: function _onResult(result) {
            if (result == _HelixGame2.default.RESULT_PLAYING) this._onFrame();
        }
    }, {
        key: "_onFrame",
        value: function _onFrame() {
            var _this2 = this;

            this._levels.forEach(function (info) {
                _this2._updateInfoViewPos(info);
            }, this);
        }
    }, {
        key: "_updateInfoViewPos",
        value: function _updateInfoViewPos(infoView) {
            var y = -infoView.info.pos * LEVEL_HEIGHT;
            if (infoView.statContainer) infoView.statContainer.transform.localPositionY = y;
            if (infoView.moveContainer) {
                infoView.moveContainer.transform.localPositionY = y;
                infoView.moveContainer.transform.localRotationEulerY = infoView.info.moveA;
            }
        }
    }, {
        key: "_runRemoveAnimation",
        value: function _runRemoveAnimation(container, crashedLevel) {
            if (!container) return;
            var world = this._piecesWorld; // this.parent.parent;
            var m = _Utils2.default.fromToTransformMatrix(container.transform, world.transform);
            var count = container.numChildren;
            var pieces = [];
            for (var i = count - 1; i >= 0; i--) {
                var child = container.getChildAt(i);
                // Velocility
                child.vel = child.impulseDir.clone();
                Laya.Vector3.TransformNormal(child.vel, m, child.vel);
                Laya.Vector3.scale(child.vel, DEBRIS_VELOCITY, child.vel);
                child.vel.y = -DEBRIS_VELOCITY * 0.2;
                var v = new Laya.Vector3(child.impulseDir.z, 0, -child.impulseDir.x);
                var rndScale = 0.5;
                v.y += Math.random() * rndScale;v.x += Math.random() * rndScale;v.z += Math.random() * rndScale;
                Laya.Vector3.normalize(v, v);
                child.axis = v;
                Laya.Vector3.TransformNormal(child.axis, m, child.axis);
                // Move sector to world
                _Utils2.default.reparentInplace(child, world);
                if (crashedLevel) child.meshRenderer.material = this._skin.crashMat;
                child.crashDelay = 0.1;
                pieces.push(child);
            }
            var lastInfo = this._levels.length ? this._levels[this._levels.length - 1].info : null;
            Laya.Tween.to(new FallingPieces(container, pieces, lastInfo, 0.8 + Math.random() * 0.5), { time: DEBRIS_FALL_DURATION }, DEBRIS_FALL_DURATION * 1000);
        }
    }]);

    return HelixView;
}(Laya.Sprite3D);

exports.default = HelixView;

var FallingPieces = function () {
    function FallingPieces(container, pieces, refLvl, avel) {
        _classCallCheck(this, FallingPieces);

        this._container = container;
        this._pieces = pieces;
        this._refLvl = refLvl;
        this._avel = avel;
        if (refLvl) this._refLvlPos = refLvl.pos;
        this._time = 0;
        this._q = new Laya.Quaternion();
    }

    _createClass(FallingPieces, [{
        key: "time",
        get: function get() {
            return this._time;
        },
        set: function set(value) {
            var _this3 = this;

            if (this._container.destroyed) return;
            var dt = value - this._time;
            this._time = value;
            var pieces = this._pieces;
            if (!pieces) return;
            var elevationDelta = 0;
            if (this._refLvl) {
                elevationDelta = this._refLvl.pos - this._refLvlPos;
                this._refLvlPos = this._refLvl.pos;
            }
            var bufQ = this._q;
            pieces.forEach(function (piece) {
                piece.crashDelay -= dt;
                if (piece.crashDelay > 0) {
                    piece.transform.localPositionY -= elevationDelta;
                    return;
                }
                var v = piece.transform.localPosition;
                v.x += piece.vel.x * dt;
                v.y += piece.vel.y * dt - elevationDelta;
                v.z += piece.vel.z * dt;
                piece.transform.localPosition = v;
                Laya.Quaternion.createFromAxisAngle(piece.axis, -dt * _this3._avel, bufQ);
                var q = piece.transform.localRotation;
                Laya.Quaternion.multiply(bufQ, q, q);
                piece.transform.localRotation = q;
                piece.vel.y -= DEBRIS_ACCELERATION * dt;
            });
            if (value >= DEBRIS_FALL_DURATION) {
                this._container.destroy();
                pieces.forEach(function (piece) {
                    piece.destroy();
                });
                this._pieces = null;
            }
        }
    }]);

    return FallingPieces;
}();

},{"./HelixGame":29,"./HxGlobals":37,"./RingSliceMesh":47,"./RingSliceMeshPool":48,"./Utils":61}],36:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Utils = require('./Utils');

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HxButton = function (_Laya$Panel) {
    _inherits(HxButton, _Laya$Panel);

    function HxButton() {
        _classCallCheck(this, HxButton);

        return _possibleConstructorReturn(this, (HxButton.__proto__ || Object.getPrototypeOf(HxButton)).call(this));
    }

    _createClass(HxButton, [{
        key: 'init',
        value: function init(extraProps) {
            _Utils2.default.initProps(this, ['normalView', 'disabledView'].concat(extraProps || []));
        }
    }, {
        key: 'disabled',
        get: function get() {
            return this._disabled;
        },
        set: function set(value) {
            //super.disabled = value;
            this._disabled = value;
            this.normalView.visible = !value;
            this.disabledView.visible = value;
        }
    }]);

    return HxButton;
}(Laya.Panel);

exports.default = HxButton;

},{"./Utils":61}],37:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HxGlobals = function () {
    function HxGlobals() {
        _classCallCheck(this, HxGlobals);
    }

    _createClass(HxGlobals, null, [{
        key: 'getLoadingPreload',
        value: function getLoadingPreload(pgrs) {
            return pgrs * 0.5;
        }
    }, {
        key: 'getLoadingSocial',
        value: function getLoadingSocial(pgrs) {
            return 0.5 * (1 - pgrs) + 0.6 * pgrs;
        }
    }, {
        key: 'getLoadingScenes',
        value: function getLoadingScenes(pgrs) {
            return 0.6 * (1 - pgrs) + 1.0 * pgrs;
        }

        // View

    }, {
        key: 'compareSegs',


        // static get MATERIAL_BALL() { return createMaterial("ball", 0, 1, 0); }
        // static get MATERIAL_COLUMN() { return createMaterial("column", 1, 1.5, 1.5); }
        // static get MATERIAL_GROUND() { return createMaterial("ground", 0, 0.9, 1); }
        // static get MATERIAL_DEATH() { return createMaterial("death", 1, 1, 0); }
        // static get MATERIAL_CRASHED() { return createMaterial("crashed", 1.5, 0.5, 0.5); }
        // static get MATERIAL_WIN() { return createMaterial("win", 0, 1, 0); }
        // static get MATERIAL_BACK() { return createBackMaterial(); }

        value: function compareSegs(a, b) {
            var map = HxGlobals.segPriorities;
            var diff = (a ? map[a.type] : 0) - (b ? map[b.type] : 0);
            return diff < 0 ? -1 : diff > 0 ? 1 : 0;
        }
    }, {
        key: 'FETCH_LEVELS',
        get: function get() {
            return 6;
        }
    }, {
        key: 'MAX_DELTA_TIME',
        get: function get() {
            return 0.25;
        }

        // Logic values

    }, {
        key: 'LOGIC_HEIGHT_LEVEL',
        get: function get() {
            return 1;
        }
    }, {
        key: 'LOGIC_LEVEL_BREAK_FROM',
        get: function get() {
            return 3;
        }
    }, {
        key: 'MIN_SEG_SIZE',
        get: function get() {
            return 2;
        }
    }, {
        key: 'EPSILON_SEG_SIZE',
        get: function get() {
            return 0.1;
        }
    }, {
        key: 'SEG_HOLE',
        get: function get() {
            return 'H';
        }
    }, {
        key: 'SEG_GROUND',
        get: function get() {
            return 'G';
        }
    }, {
        key: 'SEG_DEATH',
        get: function get() {
            return 'T';
        }
    }, {
        key: 'SEG_WIN',
        get: function get() {
            return 'V';
        }
    }, {
        key: 'WALL_ANGLE',
        get: function get() {
            return 10;
        }
    }, {
        key: 'VIEW_BALL_RADIUS',
        get: function get() {
            return 0.08;
        }
    }, {
        key: 'VIEW_BALL_XPOS',
        get: function get() {
            return (this.VIEW_SECTOR_RADIUS + this.VIEW_COLUMN_RADIUS) * 0.5;
        }
    }, {
        key: 'VIEW_FLOOR_THICKNESS',
        get: function get() {
            return 0.2;
        }
    }, {
        key: 'VIEW_LEVEL_HEIGHT',
        get: function get() {
            return 1.5;
        }
    }, {
        key: 'VIEW_BOUNCE_HEIGHT_SCALE',
        get: function get() {
            return HxGlobals.VIEW_LEVEL_HEIGHT * 1.5;
        }
    }, {
        key: 'VIEW_SECTOR_RADIUS',
        get: function get() {
            return 1.0;
        }
    }, {
        key: 'VIEW_SECTOR_DEATH_BUMP',
        get: function get() {
            return 0.002;
        }
    }, {
        key: 'VIEW_SECTOR_DEATH_RADIUS_BUMP',
        get: function get() {
            return 0.04;
        }
    }, {
        key: 'VIEW_COLUMN_RADIUS',
        get: function get() {
            return 0.45;
        }
    }, {
        key: 'VIEW_SECTOR_SLICES',
        get: function get() {
            return 36;
        }
    }, {
        key: 'VIEW_MIN_SECTOR_SLICES',
        get: function get() {
            return 4;
        }
    }, {
        key: 'VIEW_BLOT_YOFFSET',
        get: function get() {
            return 0.01;
        }
    }, {
        key: 'DEBRIS_ACCELERATION',
        get: function get() {
            return 2.5 * HxGlobals.VIEW_LEVEL_HEIGHT;
        }
    }, {
        key: 'DEBRIS_VELOCITY',
        get: function get() {
            return 2.5;
        }
    }, {
        key: 'DEBRIS_FALL_DURATION',
        get: function get() {
            return 1.5;
        }
    }, {
        key: 'INPUT_ROTATE_SENSITIVITY',
        get: function get() {
            return 1 / 500;
        }
    }, {
        key: 'FX_NAME_BOUNCE',
        get: function get() {
            return "fxBounce";
        }
    }, {
        key: 'FX_NAME_FAIL',
        get: function get() {
            return "fxFail";
        }
    }, {
        key: 'FX_NAME_TRAIL',
        get: function get() {
            return "fxTrail";
        }
    }, {
        key: 'FX_NAME_BACKGROUND',
        get: function get() {
            return "fxBackground";
        }
    }, {
        key: 'segPriorities',
        get: function get() {
            if (!HxGlobals._segPriorities) {
                HxGlobals._segPriorities = {};
                HxGlobals._segPriorities[HxGlobals.SEG_HOLE] = 1;
                HxGlobals._segPriorities[HxGlobals.SEG_GROUND] = 2;
                HxGlobals._segPriorities[HxGlobals.SEG_DEATH] = 3;
                HxGlobals._segPriorities[HxGlobals.SEG_WIN] = 4;
            }
            return HxGlobals._segPriorities;
        }
    }]);

    return HxGlobals;
}();

// var hxMaterials = { };

// function createMaterial(name, r, g, b) {
//     if (hxMaterials[name])
//         return hxMaterials[name];
//     const emission = 0.45;
//     const albedo = 0.4;
//     var mat = new Laya.PBRStandardMaterial();
//     mat.enableEmission = true;
//     mat.emissionColor = new Laya.Vector4(r * emission, g * emission, b * emission, 1);
//     mat.albedoColor = new Laya.Vector4(r * albedo, g * albedo, b * albedo, 1);
//     mat.smoothness = 0.3;
//     hxMaterials[name] = mat;
//     return mat;
// }

// function createBackMaterial() {
//     var name = 'back';
//     if (hxMaterials[name])
//         return hxMaterials[name];
//     var mat = new Laya.EffectMaterial();
//     mat.color = new Laya.Vector4(0.5, 0.5, 0.5, 1);
//     hxMaterials[name] = mat;
//     return mat;
// }


exports.default = HxGlobals;

},{}],38:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _LocaleData = require("./LocaleData");

var _CSVToArray = require("./CSVToArray");

var _CSVToArray2 = _interopRequireDefault(_CSVToArray);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Locale = function () {
    function Locale() {
        _classCallCheck(this, Locale);
    }

    _createClass(Locale, null, [{
        key: "initialize",
        value: function initialize() {
            var lang = GET['lang'] || window.ysdk && window.ysdk.environment['i18n'].lang || 'ru';
            if (['ar', 'de', 'en', 'es', 'fr', 'hi', 'id', 'ru'].indexOf(lang) < 0) lang = ['ru', 'be', 'kz', 'kk', 'ua', 'uk'].indexOf(lang) < 0 ? 'en' : 'ru';
            // if (!lang) {
            //     if (window.ysdk) {
            //         lang = window.ysdk.environment['i18n'].lang;
            //         lang = ['ru', 'be','kz', 'kk', 'ua', 'uk'].indexOf(lang) < 0 ? 'en' : 'ru';
            //     } else {
            //         lang = 'ru';
            //     }
            // }
            window.Locale = Locale;
            this.lang = lang;
            var data = Locale.parseData(_LocaleData.LocaleData);
            this.data = data[lang || 'en'];
        }
    }, {
        key: "text",
        value: function text(key) {
            return this.data[key];
        }
    }, {
        key: "format",
        value: function format(key) {
            var text = this.text(key);
            if (text) {
                for (var i = 1; i < arguments.length; i++) {
                    text = text.replace('{' + (i - 1) + '}', arguments[i]);
                }
            }
            return text;
        }
    }, {
        key: "russionPlural",
        value: function russionPlural(key, value) {
            var str = this.text(key);
            if (!str) return '';
            return this.getRussionPluralSuffix(value, str.split('|'));
        }
    }, {
        key: "getRussionPluralSuffix",
        value: function getRussionPluralSuffix(value, endings) {
            var cent = value % 100;
            var i = void 0;
            if (cent >= 10 && cent <= 20) i = 2;else {
                var dec = cent % 10;
                if (dec == 1) i = 0;else if (dec >= 2 && dec <= 4) i = 1;else i = 2;
            }
            return endings[Math.min(i, endings.length - 1)];
        }
    }, {
        key: "parseData",
        value: function parseData(strData) {
            var rawData = (0, _CSVToArray2.default)(strData);
            var data = {};
            var codes = rawData[0];
            for (var j = 1; j < codes.length; j++) {
                data[codes[j]] = {};
            }console.log(rawData, codes, data);
            for (var i = 1; i < rawData.length; i++) {
                var row = rawData[i];
                for (var _j = 1; _j < row.length; _j++) {
                    data[codes[_j]][row[0]] = row[_j];
                }
            }
            return data;
        }
    }]);

    return Locale;
}();

exports.default = Locale;

},{"./CSVToArray":15,"./LocaleData":39}],39:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var LocaleData = exports.LocaleData = "key,en,ru,de,fr,es,id,hi,ar\nL_CURRENCY_RUB,RUB,\u0420\u0443\u0431\u043B\u0435\u0439,RUB,RUB,RUB,RUB,RUB,RUB\nL_ADS_OFF_CONDITION,\"Any purchase will remove ads.\",\"\u041B\u044E\u0431\u043E\u0439 \u043F\u043B\u0430\u0442\u0435\u0436 \u043E\u0442\u043A\u043B\u044E\u0447\u0430\u0435\u0442 \u0440\u0435\u043A\u043B\u0430\u043C\u0443.\",\"Bei jedem Kauf werden die Anzeigen entfernt\",\"Tout achat supprimera les pubs\",\"Cualquier compra eliminar\xE1 los anuncios\",\"Pembelian apa pun akan menghapus iklan\",\"\u0915\u094B\u0908 \u0916\u0930\u0940\u0926 \u0935\u093F\u091C\u094D\u091E\u093E\u092A\u0928\u094B\u0902 \u0915\u094B \u0939\u091F\u093E\u090F\u0917\u0940\",\"\u0623\u064A \u0639\u0645\u0644\u064A\u0629 \u0634\u0631\u0627\u0621 \u0633\u062A\u0632\u064A\u0644 \u0627\u0644\u0625\u0639\u0644\u0627\u0646\u0627\u062A\"\nL_TIMER_IN,IN,\u0427\u0415\u0420\u0415\u0417,in,dans,en,di,\u092E\u0947\u0902,\u0641\u064A\nL_BEST_SCORE,Best,\u041B\u0443\u0447\u0448\u0438\u0439,Bestes Ergebnis,Meilleur,Mejor,Terbaik,\u0938\u0930\u094D\u0935\u0936\u094D\u0930\u0947\u0937\u094D\u0920,\u0627\u0644\u0623\u0641\u0636\u0644\nL_FREE,Free,\u0411\u0435\u0441\u043F\u043B\u0430\u0442\u043D\u043E,Gratis,Gratuit,Gratis,Gratis,\u092E\u0941\u092B\u093C\u094D\u0924,\u0645\u062C\u0627\u0646\u064A\nL_FREES,Free,\u0411\u0435\u0441\u043F\u043B\u0430\u0442\u043D\u044B\u0435,Gratis,Pi\xE8ces,Monedas,Koin,\u092E\u0941\u092B\u093C\u094D\u0924,\u0639\u0645\u0644\u0627\u062A \u0645\u062C\nL_COINS,\u0421oins,\u041C\u043E\u043D\u0435\u0442\u044B,M\xFCnzen,gratuites,gratis,gratis,\u0938\u093F\u0915\u094D\u0915\u0947,\u0627\u0646\u064A\u0629\nL_RESTART,RESTART,\u041D\u0410\u0427\u0410\u0422\u042C\\n\u0421\u041D\u0410\u0427\u0410\u041B\u0410,NEU\\nSTARTEN,RECOMMENCER,REINICIAR,MULAI ULANG,\u092B\u093F\u0930 \u0938\u0947 \u0936\u0941\u0930\u0942 \u0915\u0930\u0947\u0902,\u0625\u0639\u0627\u062F\u0629\\n\u0627\u0644\u0628\u062F\u0621\nL_CONTINUE,CONTINUE,\u041F\u0420\u041E\u0414\u041E\u041B\u0416\u0418\u0422\u042C,FORTSETZEN,CONTINUER,CONTINUAR,LANJUTKAN,\u091C\u093E\u0930\u0940 \u0930\u0916\u0947\u0902,\u0627\u0633\u062A\u0645\u0631\u0627\u0631\nL_BTN_CONTINUE,Continue,\u041F\u0440\u043E\u0434\u043E\u043B\u0436\u0438\u0442\u044C,FORTSETZEN,CONTINUER,CONTINUAR,LANJUTKAN,\u0935\u093F\u091C\u094D\u091E\u093E\u092A\u0928\u094B\u0902 \u0915\u0947,\u0627\u0644\u0625\u0639\u0644\u0627\u0646\u0627\u062A\nL_BTN_FOR,for,\u0437\u0430,f\xFCr,pour,para,untuk,\u0932\u093F\u090F, \u0645\u0642\u0627\u0628\u0644\nL_BTN_FOR_ADS,ADS,\u0420\u0415\u041A\u041B\u0410\u041C\u0423,ADS,des pubs,ANUNCIOS,IKLAN,\u091C\u093E\u0930\u0940 \u0930\u0916\u0947\u0902,\u0627\u0633\u062A\u0645\u0631\u0627\u0631\nL_THANX_FOR_PURCHASE,THANK YOU FOR PURCHASE!\\nYOU GOT,\u0421\u041F\u0410\u0421\u0418\u0411\u041E \u0417\u0410 \u041F\u041E\u041A\u0423\u041F\u041A\u0423!\\n\u0412\u0410\u041C \u041D\u0410\u0427\u0418\u0421\u041B\u0415\u041D\u041E,DANKE F\xDCR DEN KAUF!\\nDU HAST,MERCI DE VOTRE ACHAT!\\nVOUS AVEZ,\xA1GRACIAS POR LA COMPRA!\\nTIENES,TERIMA KASIH ATAS PEMBELIAN ANDA!\\nANDA MENDAPATKAN,\u0916\u0930\u0940\u0926 \u0915\u0947 \u0932\u093F\u090F \u0927\u0928\u094D\u092F\u0935\u093E\u0926!\n\u0906\u092A\u0915\u094B \u092A\u094D\u0930\u093E\u092A\u094D\u0924 \u0939\u0941\u090F,\u0646\u0634\u0643\u0631\u0643 \u0639\u0644\u0649 \u0627\u0644\u0634\u0631\u0627\u0621! \u062D\u0635\u0644\u062A \u0639\u0644\u0649\nL_TUT_ADD_MENU_0,Add the game to the sidebar,\u0414\u043E\u0431\u0430\u0432\u044C \u0438\u0433\u0440\u0443 \u0432 \u043C\u0435\u043D\u044E,Add the game to the sidebar,Add the game to the sidebar,Add the game to the sidebar,Add the game to the sidebar,Add the game to the sidebar,Add the game to the sidebar\nL_TUT_ADD_MENU_1,and keep it at hand!,\u0447\u0442\u043E\u0431\u044B \u043D\u0435 \u043F\u043E\u0442\u0435\u0440\u044F\u0442\u044C!,and keep it at hand!,and keep it at hand!,and keep it at hand!,and keep it at hand!,and keep it at hand!,and keep it at hand!\nL_RUB_SUFFIX,RUB|RUB|RUB,\u0420\u0443\u0431\u043B\u044C|\u0420\u0443\u0431\u043B\u044F|\u0420\u0443\u0431\u043B\u0435\u0439,RUB|RUB|RUB,RUB|RUB|RUB,RUB|RUB|RUB,RUB|RUB|RUB,RUB|RUB|RUB,RUB|RUB|RUB\n";

},{}],40:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GameProgress = require("./GameProgress");

var _GameProgress2 = _interopRequireDefault(_GameProgress);

var _GameUI = require("./GameUI");

var _GameUI2 = _interopRequireDefault(_GameUI);

var _GameResultUI = require("./GameResultUI");

var _GameResultUI2 = _interopRequireDefault(_GameResultUI);

var _MenuUI = require("./MenuUI");

var _MenuUI2 = _interopRequireDefault(_MenuUI);

var _BankUI = require("./BankUI");

var _BankUI2 = _interopRequireDefault(_BankUI);

var _ChestUI = require("./ChestUI");

var _ChestUI2 = _interopRequireDefault(_ChestUI);

var _FriendsUI = require("./FriendsUI");

var _FriendsUI2 = _interopRequireDefault(_FriendsUI);

var _HelixGameView = require("./HelixGameView");

var _HelixGameView2 = _interopRequireDefault(_HelixGameView);

var _HelixGame = require("./HelixGame");

var _HelixGame2 = _interopRequireDefault(_HelixGame);

var _Backend = require("./Backend");

var _Backend2 = _interopRequireDefault(_Backend);

var _BackendMock = require("./BackendMock");

var _BackendMock2 = _interopRequireDefault(_BackendMock);

var _ScenesOpener = require("./ScenesOpener");

var _ScenesOpener2 = _interopRequireDefault(_ScenesOpener);

var _WndMan = require("./WndMan");

var _WndMan2 = _interopRequireDefault(_WndMan);

var _SocialApi = require("./SocialApi");

var _SocialApi2 = _interopRequireDefault(_SocialApi);

var _UIResizeController = require("./UIResizeController");

var _UIResizeController2 = _interopRequireDefault(_UIResizeController);

var _HelixSkin = require("./HelixSkin");

var _HelixSkin2 = _interopRequireDefault(_HelixSkin);

var _HxGlobals = require("./HxGlobals");

var _HxGlobals2 = _interopRequireDefault(_HxGlobals);

var _HelixConfig = require("./HelixConfig");

var _HelixConfig2 = _interopRequireDefault(_HelixConfig);

var _HelixGeneratorInfinitRandom = require("./HelixGeneratorInfinitRandom");

var _HelixGeneratorInfinitRandom2 = _interopRequireDefault(_HelixGeneratorInfinitRandom);

var _HelixGeneratorConfigFloors = require("./HelixGeneratorConfigFloors");

var _HelixGeneratorConfigFloors2 = _interopRequireDefault(_HelixGeneratorConfigFloors);

var _BlotSpritePool = require("./BlotSpritePool");

var _BlotSpritePool2 = _interopRequireDefault(_BlotSpritePool);

var _SoundMan = require("./SoundMan");

var _SoundMan2 = _interopRequireDefault(_SoundMan);

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

var _AdShowPolicy = require("./AdShowPolicy");

var _AdShowPolicy2 = _interopRequireDefault(_AdShowPolicy);

var _Yandex = require("./Yandex");

var _Yandex2 = _interopRequireDefault(_Yandex);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MainUI = function (_Laya$Scene) {
    _inherits(MainUI, _Laya$Scene);

    function MainUI() {
        _classCallCheck(this, MainUI);

        var _this = _possibleConstructorReturn(this, (MainUI.__proto__ || Object.getPrototypeOf(MainUI)).call(this));

        _this.gp = new _GameProgress2.default();
        _SoundMan2.default.init();
        _this._createAndStartBackend();
        _WndMan2.default.inst.on(_WndMan2.default.EVENT_WND_CHANGED, _this, _this._onWndChanged);
        _this._resizeController = new _UIResizeController2.default(Laya.Scene.root);
        _this.helixConfig = new _HelixConfig2.default(window.helixConfigData);
        if (_Utils2.default.devMode) window.helixConfig = _this.helixConfig;
        window.addEventListener('focus', function () {
            _Utils2.default.forceUpdateLabels(Laya.Scene.root);
        });
        window.mainUI = _this;
        return _this;
    }

    _createClass(MainUI, [{
        key: "_createAndStartBackend",
        value: function _createAndStartBackend() {
            this.backend = window.userToken && !_Utils2.default.startsWith(window.userToken, '<?=') ? new _Backend2.default(window.userToken) : new _BackendMock2.default(new _Backend2.default('', _Utils2.default.apiUrl, true), function () {
                return _SocialApi2.default.inst.profileStorage;
            });
            this._adShowPolicy = new _AdShowPolicy2.default(this.backend, function () {
                return this.tutorUI.promoShow();
            }.bind(this));
            _SocialApi2.default.inst.once(_SocialApi2.default.EVENT_INITIALIZED, this, function () {
                var reloadApp = function reloadApp() {}; // document.location.reload(); }
                this.backend.on(_Backend2.default.ERROR_INFO_URGENT, null, reloadApp);
                this.backend.on(_Backend2.default.ERROR_EXCEPTION, null, reloadApp);
                this.backend.on(_Backend2.default.ERROR_GAME, this, this._onBackendErrorGame);
                this.backend.once(_Backend2.default.CLIENT_USER_EVENTS, this, this._loadScenes);
                this.backend.settingsAllGet();
                this.backend.bankCardsGet();
                this.backend.profileGet();
                this.backend.userOptionsGet();
                this.backend.userEventsGet();
                this.backend.friendReplyAll();
                this.backend.receiveHelps();
                window.backend = this.backend;
                _SocialApi2.default.inst.on(_SocialApi2.default.EVENT_ORDER_RESULT, this, this._onOrderResult);
            }.bind(this));
            _SocialApi2.default.inst.on(_SocialApi2.default.EVENT_INITIALIZE_PROGRESS, this, function (value) {
                this._showProgress(_HxGlobals2.default.getLoadingSocial(value));
            });
            _SocialApi2.default.inst.initialize(function (friendIds, onComplete) {
                var onUsersGet = function (data) {
                    var ids = data.list.reduce(function (s, itm) {
                        if (itm.hasApp) s.push(itm.idSocial);return s;
                    }, []);
                    onComplete(ids);
                }.bind(this);
                this.backend.once(_Backend2.default.CLIENT_USERS_GET, this, onUsersGet);
                this.backend.usersGet(friendIds);
            }.bind(this), this.backend);
        }
    }, {
        key: "_onOrderResult",
        value: function _onOrderResult(ok) {
            if (ok) {
                var tid = null;
                var curMoney = this.backend.profile.moneySoft;
                window.loadingIndicator.show();
                tid = setInterval(function () {
                    var moneyDelta = this.backend.profile.moneySoft - curMoney;
                    if (moneyDelta > 0) {
                        clearInterval(tid);
                        window.loadingIndicator.hide();
                        _WndMan2.default.inst.orderResultUI.showCoins(moneyDelta);
                    } else this.backend.profileGet();
                }.bind(this), 1500);
                this.backend.profileGet();
            }
        }
    }, {
        key: "_onBackendErrorGame",
        value: function _onBackendErrorGame(data) {
            if (data.code == _Backend2.default.CODE_ERR_RESOURCE_OPERATION) {
                _WndMan2.default.inst.bankUI.show();
            } else {
                console.error("Unhandled game error " + data.code + ": " + data.message);
            }
        }
    }, {
        key: "_loadScenes",
        value: function _loadScenes() {
            this.gp.bestScore = this.backend.profile.scoresMax;
            this.gp.bestScorePrev = this.gp.bestScore;
            this.gp.level = this.backend.profile.level;
            var scenes = [{ url: "fx/scene.ls", onOpened: this._onFxOpened }, { url: "scenes/GameUI.scene", onOpened: this._onGameUIOpened }, { url: "scenes/MenuUI.scene", onOpened: this._onMenuUIOpened }, { url: "scenes/GameResultUI.scene", onOpened: this._addWnd }, { url: "scenes/FriendsUI.scene", onOpened: this._addWnd },
            //{ url: "scenes/FriendDefeatUI.scene", onOpened: this._addWnd },
            { url: "scenes/FriendDefeatUI2.scene", onOpened: this._addWnd }, { url: "scenes/ChestUI.scene", onOpened: this._addWnd }, { url: "scenes/OrderResultUI.scene", onOpened: this._addWnd }, { url: "scenes/TutorUI.scene", onOpened: this._onTutorUIOpened }];
            if (_Utils2.default.canUsePurchases) scenes.push({ url: "scenes/BankUI.scene", onOpened: this._addWnd });else scenes.push({ url: "scenes/BankUIAds.scene", onOpened: this._addWnd });
            this._scenesOpener = new _ScenesOpener2.default(this, scenes);
            this._scenesOpener.once(_ScenesOpener2.default.EVENT_OPENED, this, this._onAllScenesOpened);
            this._scenesOpener.on(_ScenesOpener2.default.EVENT_PROGRESS, this, this._onScenesOpenerProgress);
            this._scenesOpener.open();
        }
    }, {
        key: "_onScenesOpenerProgress",
        value: function _onScenesOpenerProgress(value) {
            this._showProgress(_HxGlobals2.default.getLoadingScenes(value));
        }
    }, {
        key: "_showProgress",
        value: function _showProgress(value) {
            window.loadingIndicator.showProgress(value);
            this.backend.setLoadingProgress(Math.floor(value * 100));
        }
    }, {
        key: "_onAllScenesOpened",
        value: function _onAllScenesOpened(list) {
            this._blots = new _BlotSpritePool2.default();
            //this._newGame();
            //this.gameView.paused = true;

            this.backend.on(_Backend2.default.CLIENT_PROFILE, this, this._onProfile);
            this._onProfile(this.backend.profile);

            this.menuUI.init(this.backend, _SocialApi2.default.GROUP_LINK);
            this.menuUI.on(_MenuUI2.default.EVENT_INVITE, this, function () {
                _SocialApi2.default.inst.showInviteBox(_ChestUI2.default.REQUEST_TEXT);
            });
            this.menuUI.on(_MenuUI2.default.EVENT_RATING, this, function () {
                if (_Utils2.default.devMode) this.tutorUI.devVKScores.show(this.gp.bestScore);else _SocialApi2.default.inst.showLeaderboardBox(this.gp.level);
            }.bind(this));
            this.menuUI.on(_MenuUI2.default.EVENT_CHEST, this, function () {
                _WndMan2.default.inst.chestUI.show();
            });
            this.menuUI.on(_MenuUI2.default.EVENT_SOCIAL_GROUP, this, function () {
                window.open(_SocialApi2.default.GROUP_LINK, '_blank');
            });
            this.menuUI.visible = true;

            _WndMan2.default.inst.gameResultUI.init(this.backend);
            _WndMan2.default.inst.gameResultUI.on(_GameResultUI2.default.EVENT_WND_RESULT, this, this._onGameResultResult);

            _WndMan2.default.inst.chestUI.init(this.backend);
            _WndMan2.default.inst.bankUI.init(this.backend);

            this._scenesOpener.off(_ScenesOpener2.default.EVENT_PROGRESS, this, this._onScenesOpenerProgress);
            window.loadingIndicator.hide();

            this._resizeController.forceUpdate();
            this.gameUI.visible = true;
            this.menuUI.visible = true;

            this._newGame();
            //this.gameView.paused = true;

            _Utils2.default.preloadImages(_SocialApi2.default.inst.appFriends.map(function (f) {
                return f.avatar;
            }));

            _Utils2.default.foreachChildR(Laya.Scene.root, function (child) {
                if (child.name && _Utils2.default.startsWith(child.name, 'btn')) {
                    child.on(Laya.Event.MOUSE_DOWN, null, function () {
                        _SoundMan2.default.playClick();
                    });
                }
            });

            _SocialApi2.default.inst.logLevel(this.gp.state.level);
            _SocialApi2.default.inst.logBestScore(this.gp.state.bestScore);

            window.focus();
        }
    }, {
        key: "_onWndChanged",
        value: function _onWndChanged(wnd) {
            this.menuUI.visible = wnd == null;
            this._fixLabels(wnd);
        }

        // Trial to fix dirty text sprites of labels after some time of playing on Android or switching child webviews in VK app
        // https://devoler.atlassian.net/browse/HLX-27

    }, {
        key: "_fixLabels",
        value: function _fixLabels(wnd) {
            if (wnd) _Utils2.default.forceUpdateLabels(wnd);
            if (this.menuUI.visible) _Utils2.default.forceUpdateLabels(this.menuUI);
            _Utils2.default.forceUpdateLabels(this.gameUI);
        }
    }, {
        key: "_onFxOpened",
        value: function _onFxOpened(fxScene) {
            var list = _Utils2.default.getChildrenOf(fxScene);
            this._fxs = {};
            for (var i in list) {
                var fx = list[i];
                if (fx.particleSystem) {
                    this._fxs[fx.name] = fx;
                    fx.particleSystem.gravityModifier /= 9.81;
                }
            }
        }
    }, {
        key: "_onGameUIOpened",
        value: function _onGameUIOpened(gameUI) {
            this.gameUI = gameUI;
            this.gameUI.gp = this.gp;
            this.gameUI.backend = this.backend;
            gameUI.on(_GameUI2.default.EVENT_ADD_COINS, this, function () {
                _SoundMan2.default.playClick();
                if (_SocialApi2.default.isBankAvailable) _WndMan2.default.inst.bankUI.show();
            }.bind(this));
            gameUI.on(_GameUI2.default.EVENT_DEV_NEXT_LEVEL, this, function () {
                this.backend.gameWin();this._newGame();
            }.bind(this));
            this.gameUI.visible = false;
        }
    }, {
        key: "_onMenuUIOpened",
        value: function _onMenuUIOpened(menuUI) {
            this.menuUI = menuUI;
            this.menuUI.visible = false;
        }
    }, {
        key: "_addWnd",
        value: function _addWnd(wnd) {
            _WndMan2.default.inst.add(wnd);
        }
    }, {
        key: "_onTutorUIOpened",
        value: function _onTutorUIOpened(tutorUI) {
            this.tutorUI = tutorUI;
            this.tutorUI.init(this.backend);
        }

        // _startGame() {
        //     this.menuUI.visible = false;
        //     if (this.gameView && !this.gameView.helixGame.finished)
        //         return;
        //     this._newGame();
        // }

    }, {
        key: "_newGame",
        value: function _newGame() {
            if (this.gameView) {
                this._fxsRemove();
                this.gp.detachGame();
                this.gameView.destroy();
                this.gameView = null;
            }
            var resumeState = this.backend.userOptions.resumeState;
            //var generator = new HelixGeneratorInfinitRandom(6, 1, 3, 40);
            var generator = new _HelixGeneratorConfigFloors2.default(this.helixConfig.generateFloors(this.gp.state.level), this.helixConfig.moveFreq);
            this.gameView = new _HelixGameView2.default(generator, resumeState, _HelixSkin2.default.getLevel(this.gp.state.level), this.gameUI, this._blots, this._fxs);
            Laya.Scene.root.addChildAt(this.gameView, 0);
            this.gp.attachGame(this.gameView.helixGame);
            if (resumeState) {
                this.gp.isLastGameWasBest = resumeState.isLastGameWasBest;
                this.gp.curScore = resumeState.score;
                this.backend._resumeCount = resumeState.be_resumeCount;
                this._showResult();
            }
            this.gameView.helixGame.on(_HelixGame2.default.EVENT_RESULT, this, function (result) {
                var game = this.gameView.helixGame;
                if (game.finished) {
                    var win = game.result == _HelixGame2.default.RESULT_WIN;
                    setTimeout(function () {
                        if (win) this.backend.gameWin(this.gp.curScore);else this.backend.gameLoose(this.gp.curScore);
                        resumeState = game.getResumeState();
                        resumeState.score = this.gp.curScore;
                        resumeState.isLastGameWasBest = this.gp.isLastGameWasBest;
                        resumeState.be_resumeCount = this.backend._resumeCount;
                        this.backend.userOptions.resumeState = resumeState;
                        this._showResult();
                        //WndMan.inst.gameResultUI.showResult(win, this.gp.isLastGameWasBest, this.gp.level, this.gp.bestScore);
                    }.bind(this), 500);
                }
            });
            this.gameView.on(_HelixGameView2.default.EVENT_STARTED, this, function () {
                if (this.gp.curScore == 0) this.backend.gameStart();
                this.menuUI.visible = false;
            });
            this._fxsAddTo(this.gameView);
            this.backend.friendScoreUpdate(_SocialApi2.default.inst.appFriends);
            this._adShowPolicy.onNewGame();
            // if (this.backend.userEvents.Ad.showBeforeStart) {
            //     const SHOW_INTERVAL = 3;
            //     if (this._adsShowCounter === undefined) {
            //         this._adsShowCounter = SHOW_INTERVAL - 1;
            //     } else {
            //         this._adsShowCounter++;
            //         if (this._adsShowCounter >= SHOW_INTERVAL) {
            //             this._adsShowCounter = 0;
            //             SocialApi.inst.adsShow();
            //         }
            //     }
            // }
        }
    }, {
        key: "_showResult",
        value: function _showResult() {
            _WndMan2.default.inst.gameResultUI.showResult(this.gameView.helixGame.result == _HelixGame2.default.RESULT_WIN, this.gp.isLastGameWasBest, this.gp.level, this.gp.bestScore);
        }
    }, {
        key: "_onGameResultResult",
        value: function _onGameResultResult(result) {
            this.backend.userOptions.resumeState = null;
            if (result == _GameResultUI2.default.WND_RESULT_RESUME) {
                this.gameView.helixGame.resume();
                this.menuUI.visible = false;
            } else if (result == _GameResultUI2.default.WND_RESULT_RESTART) {
                var win = this.gameView.helixGame.result == _HelixGame2.default.RESULT_WIN;
                var curScore = this.gp.curScore;
                var prevScore = this.gp.bestScorePrev;
                this._newGame();
                this.menuUI.visible = true;
                if (!win) _WndMan2.default.inst.friendDefeatUI.tryShow(curScore, prevScore);
            }
        }
    }, {
        key: "_fxsRemove",
        value: function _fxsRemove() {
            for (var name in this._fxs) {
                _Utils2.default.removeFromParent(this._fxs[name]);
            }
        }
    }, {
        key: "_fxsAddTo",
        value: function _fxsAddTo(scene) {
            for (var name in this._fxs) {
                window.lastFx = scene.addChild(this._fxs[name]);
            }
        }

        // Backend responces

    }, {
        key: "_onProfile",
        value: function _onProfile(profile) {
            this.gp.state.level = profile.level;
            this.gp.state.bestScore = profile.scoresMax;
        }
    }]);

    return MainUI;
}(Laya.Scene);

exports.default = MainUI;

},{"./AdShowPolicy":5,"./Backend":6,"./BackendMock":7,"./BankUI":11,"./BlotSpritePool":14,"./ChestUI":16,"./FriendsUI":23,"./GameProgress":24,"./GameResultUI":25,"./GameUI":26,"./HelixConfig":28,"./HelixGame":29,"./HelixGameView":30,"./HelixGeneratorConfigFloors":32,"./HelixGeneratorInfinitRandom":33,"./HelixSkin":34,"./HxGlobals":37,"./MenuUI":41,"./ScenesOpener":49,"./SocialApi":51,"./SoundMan":52,"./UIResizeController":56,"./Utils":61,"./WndMan":62,"./Yandex":63}],41:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if ("value" in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _MainUI = require("./MainUI");

var _MainUI2 = _interopRequireDefault(_MainUI);

var _UserEvents = require("./UserEvents");

var _UserEvents2 = _interopRequireDefault(_UserEvents);

var _SocialApi = require("./SocialApi");

var _SocialApi2 = _interopRequireDefault(_SocialApi);

var _SoundMan = require("./SoundMan");

var _SoundMan2 = _interopRequireDefault(_SoundMan);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MenuUI = function (_Laya$Scene) {
    _inherits(MenuUI, _Laya$Scene);

    _createClass(MenuUI, null, [{
        key: "EVENT_INVITE",

        // static get STATE_GAME() { return "GAME"; }
        // static get STATE_DEFAULT() { return "DEFAULT"; }
        // static get STATE_BEST_SCORE() { return "BEST_SCORE"; }
        // static get STATE_LEVELUP() { return "LEVELUP"; }

        get: function get() {
            return "INVITE";
        }
    }, {
        key: "EVENT_RATING",
        get: function get() {
            return "RATING";
        }
    }, {
        key: "EVENT_CHEST",
        get: function get() {
            return "CHEST";
        }
    }, {
        key: "EVENT_SOCIAL_GROUP",
        get: function get() {
            return "SOCIAL_GROUP";
        }
        //static get EVENT_ACHIEVS() { return "ACHIEVS"; }

    }]);

    function MenuUI() {
        _classCallCheck(this, MenuUI);

        var _this2 = _possibleConstructorReturn(this, (MenuUI.__proto__ || Object.getPrototypeOf(MenuUI)).call(this));

        _this2.on("onViewCreated", _this2, _this2._onViewCreated);
        return _this2;
    }
    //get state() { return this._state; }


    _createClass(MenuUI, [{
        key: "init",
        value: function init(backend, groupLink) {
            this._backend = backend;
            this._backend.userEvents.on(_UserEvents2.default.EVENT_CHEST, this, this._onChestEvent);
            this._onChestEvent();
            _set(MenuUI.prototype.__proto__ || Object.getPrototypeOf(MenuUI.prototype), "visible", false, this);
            if (_SocialApi2.default.isYA) {
                this.menuBlock.visible = false;
            }
            $("#groupLink").attr("href", groupLink);
            $("#groupLink").click(function () {
                _SoundMan2.default.playClick();
            });
        }
    }, {
        key: "_onViewCreated",
        value: function _onViewCreated() {
            var _this = this;
            this.lblSocialGroup.text = _SocialApi2.default.GROUP_TITLE;
            this.btnInvite.on(Laya.Event.CLICK, this, function () {
                _this.event(MenuUI.EVENT_INVITE);
            });
            this.btnRating.on(Laya.Event.CLICK, this, function () {
                _this.event(MenuUI.EVENT_RATING);
            });
            this.btnChest.on(Laya.Event.CLICK, this, function () {
                _this.event(MenuUI.EVENT_CHEST);
            });
            this.btnChest.prefix = "";
            this.btnSocialGroup.on(Laya.Event.CLICK, this, function () {
                _this.event(MenuUI.EVENT_SOCIAL_GROUP);
            });
            if (_SocialApi2.default.isOK) {
                this.btnRating.visible = false;
                this._buttons = [this.btnInvite, this.btnChest, this.btnSocialGroup];
            } else this._buttons = [this.btnInvite, this.btnRating, this.btnChest, this.btnSocialGroup];
            this.on(Laya.Event.RESIZE, this, this._onResize);
            this._onResize();
        }
    }, {
        key: "_onChestEvent",
        value: function _onChestEvent() {
            var event = this._backend.userEvents.Chest;
            this.lblChestValue.text = String(event.money_soft) + ' / ' + event.money_soft_max;
        }
    }, {
        key: "_onResize",
        value: function _onResize() {
            for (var i = 0; i < this._buttons.length; i++) {
                var button = this._buttons[i];
                button.left = button.right = button.centerX = undefined;
                button.x = this.width * ((i + 0.5) / this._buttons.length) - button.width * 0.5;
            }
        }
    }, {
        key: "_onFrame",
        value: function _onFrame() {
            var event = this._backend.userEvents.Chest;
            this.lblChestValue.visible = event.expired;
            this.lblHintTimer.visible = !event.expired;
            if (!event.expired) this.btnChest.update(event);
        }
    }, {
        key: "visible",
        get: function get() {
            return _get(MenuUI.prototype.__proto__ || Object.getPrototypeOf(MenuUI.prototype), "visible", this);
        },
        set: function set(value) {
            if (value != _get(MenuUI.prototype.__proto__ || Object.getPrototypeOf(MenuUI.prototype), "visible", this)) {
                _set(MenuUI.prototype.__proto__ || Object.getPrototypeOf(MenuUI.prototype), "visible", value, this);
                if (value) {
                    $("#groupLink").show();
                    Laya.timer.frameLoop(1, this, this._onFrame);
                    this._onFrame();
                } else {
                    $("#groupLink").hide();
                    Laya.timer.clearAll(1, this, this._onFrame);
                }
            }
        }
    }]);

    return MenuUI;
}(Laya.Scene);

exports.default = MenuUI;

},{"./MainUI":40,"./SocialApi":51,"./SoundMan":52,"./UserEvents":57}],42:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MouseCtrl = function () {
    function MouseCtrl(dispatcher, getter, setter) {
        _classCallCheck(this, MouseCtrl);

        this._getter = getter;
        this._setter = setter;
        this._dispatcher = dispatcher;
        this._ctx = {};
        this._dispatcher.on(Laya.Event.MOUSE_DOWN, this, this._OnMouseDown);
        this._dispatcher.on(Laya.Event.MOUSE_UP, this, this._OnMouseUp);
        this._dispatcher.on(Laya.Event.MOUSE_OUT, this, this._OnMouseUp);
    }

    _createClass(MouseCtrl, [{
        key: "destroy",
        value: function destroy() {
            this._OnMouseUp();
            this._dispatcher.off(Laya.Event.MOUSE_DOWN, this, this._OnMouseDown);
            this._dispatcher.off(Laya.Event.MOUSE_UP, this, this._OnMouseUp);
        }
    }, {
        key: "_OnMouseDown",
        value: function _OnMouseDown(e) {
            if (this._isDown) return;
            this._isDown = true;
            this._ctx.startValue = this._getter();
            this._mouseDownX = e.stageX;
            this._mouseDownY = e.stageY;
            this._dispatcher.on(Laya.Event.MOUSE_MOVE, this, this._OnMouseMove);
        }
    }, {
        key: "_OnMouseUp",
        value: function _OnMouseUp(e) {
            this._isDown = false;
            this._dispatcher.off(Laya.Event.MOUSE_MOVE, this, this._OnMouseMove);
        }
    }, {
        key: "_OnMouseMove",
        value: function _OnMouseMove(e) {
            if (!this._isDown) return;
            this._ctx.deltaX = e.stageX - this._mouseDownX;
            this._ctx.deltaY = e.stageY - this._mouseDownY;
            this._setter(this._ctx);
        }
    }]);

    return MouseCtrl;
}();

exports.default = MouseCtrl;

},{}],43:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NetErrors = function () {
    function NetErrors() {
        _classCallCheck(this, NetErrors);
    }

    _createClass(NetErrors, null, [{
        key: "OK",
        get: function get() {
            return 200;
        }
    }, {
        key: "JSON_PARSE",
        get: function get() {
            return 250;
        }
    }, {
        key: "BAD_REQUEST",
        get: function get() {
            return 400;
        }
    }, {
        key: "UNAUTHORIZED",
        get: function get() {
            return 401;
        }
    }, {
        key: "FORBIDDEN",
        get: function get() {
            return 403;
        }
    }, {
        key: "NOT_FOUND",
        get: function get() {
            return 404;
        }
    }, {
        key: "METHOD_NOT_ALLOWED",
        get: function get() {
            return 405;
        }
    }, {
        key: "INTERNAL_SERVER_ERROR",
        get: function get() {
            return 500;
        }
    }, {
        key: "SERVICE_UNAVAILABLE",
        get: function get() {
            return 503;
        }
    }]);

    return NetErrors;
}();

exports.default = NetErrors;

},{}],44:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _NetErrors = require("./NetErrors");

var _NetErrors2 = _interopRequireDefault(_NetErrors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Network = function () {
    function Network(url) {
        _classCallCheck(this, Network);

        this._url = url;
    }

    _createClass(Network, [{
        key: "post",
        value: function post(data, onSuccess, onFail) {
            var xhr = new XMLHttpRequest();
            xhr.open("POST", this._url, true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.onreadystatechange = function () {
                if (xhr.readyState !== 4) return;
                if (xhr.status === 200) {
                    try {
                        var json = JSON.parse(xhr.responseText);
                        onSuccess(json);
                    } catch (e) {
                        onFail(_NetErrors2.default.JSON_PARSE, e.message);
                    }
                } else {
                    onFail(xhr.status, xhr.statusText);
                }
            };
            var dataStr = JSON.stringify(data);
            xhr.send(dataStr);
        }
    }]);

    return Network;
}();

exports.default = Network;

},{"./NetErrors":43}],45:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BaseWindow2 = require("./BaseWindow");

var _BaseWindow3 = _interopRequireDefault(_BaseWindow2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OrderResultUI = function (_BaseWindow) {
    _inherits(OrderResultUI, _BaseWindow);

    function OrderResultUI() {
        _classCallCheck(this, OrderResultUI);

        return _possibleConstructorReturn(this, (OrderResultUI.__proto__ || Object.getPrototypeOf(OrderResultUI)).call(this));
    }

    _createClass(OrderResultUI, [{
        key: "showCoins",
        value: function showCoins(value) {
            this.lblValue.text = String(value);
            this.show();
        }
    }]);

    return OrderResultUI;
}(_BaseWindow3.default);

exports.default = OrderResultUI;

},{"./BaseWindow":12}],46:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

var _SoundMan = require("./SoundMan");

var _SoundMan2 = _interopRequireDefault(_SoundMan);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PromoView = function (_Laya$Panel) {
    _inherits(PromoView, _Laya$Panel);

    function PromoView() {
        _classCallCheck(this, PromoView);

        return _possibleConstructorReturn(this, (PromoView.__proto__ || Object.getPrototypeOf(PromoView)).apply(this, arguments));
    }

    _createClass(PromoView, [{
        key: "init",
        value: function init(linkUrl, target) {
            this._linkUrl = linkUrl;
            //this._target = target;
            _Utils2.default.initProps(this, [
            //'link',
            'close']);
            this.close.on(Laya.Event.CLICK, this, this._onCloseClick);
            // HOTFIX: tracking of native clicks to process correctly window.open(...)
            // var canvas = document.getElementById('layaCanvas');
            // var onClick = function(e) {
            //     if (this._allowClickLink)
            //         laya.events.MouseManager.instance.check(window.stage, e.pageX || e.clientX, e.pageY || e.clientY, this._onLinkClick.bind(this));
            // }.bind(this)
            // canvas.addEventListener('click', onClick);
            // canvas.addEventListener('touchstart', onClick);
            // Create empty callback to make this.link clickable
            //this.link.on(Laya.Event.CLICK, this, function() { });
            $("#raccoonLink").attr("href", linkUrl);
            $("#raccoonLink").attr("target", target);
            $("#raccoonLink").click(function () {
                _SoundMan2.default.playClick();
            });
            this.hide();
        }
    }, {
        key: "show",
        value: function show() {
            if (this.visible) return true;
            if (!this._linkUrl) return false;
            this.visible = true;
            $("#raccoonLink").show();
            //this._allowClickLink = false; setTimeout(function() { this._allowClickLink = true; }.bind(this), 10);
            _SoundMan2.default.lock(this);
            return true;
        }
    }, {
        key: "hide",
        value: function hide() {
            this.visible = false;
            $("#raccoonLink").hide();
            //this._allowClickLink = false;
            _SoundMan2.default.unlock(this);
        }

        // _onLinkClick(sprite) {
        //     if (sprite == this.link)
        //         window.open(this._linkUrl, this._target);
        // }

    }, {
        key: "_onCloseClick",
        value: function _onCloseClick() {
            this.hide();
        }
    }]);

    return PromoView;
}(Laya.Panel);

exports.default = PromoView;

},{"./SoundMan":52,"./Utils":61}],47:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//import { PrimitiveMesh } from laya.d3.resource.models;
//import { VertexPositionNormalTexture } from laya.d3.graphics.Vertex;

var RingSliceMesh = function (_Laya$PrimitiveMesh) {
    _inherits(RingSliceMesh, _Laya$PrimitiveMesh);

    function RingSliceMesh(radius, radiusInner, height, degBegin, degEnd, slices, radiusBump) {
        _classCallCheck(this, RingSliceMesh);

        var _this = _possibleConstructorReturn(this, (RingSliceMesh.__proto__ || Object.getPrototypeOf(RingSliceMesh)).call(this));

        _this._radius = radius;
        _this._radiusInner = radiusInner;
        _this._height = height;
        _this._degBegin = degBegin;
        _this._degEnd = degEnd;
        _this._slices = slices;
        _this._radiusBump = radiusBump ? radiusBump : 0;
        _this._create();
        return _this;
    }

    _createClass(RingSliceMesh, [{
        key: "_getRBump",
        value: function _getRBump(t) {
            return this._radiusBump * 4 * t * (1 - t);
        }
    }, {
        key: "_create",
        value: function _create() {
            var slices = this._slices;
            var vCount = (slices + 1) * 2 + // top cap
            (slices + 1) * 2 + // outer wall
            (slices + 1) * 2 + // inner wall
            (slices + 1) * 2 + // bottom cap
            4 + 4; // 2 side caps
            var iCount = slices * 2 * 3 * 4 + 4 * 3;
            var vDecl = Laya.VertexPositionNormalTexture.vertexDeclaration;
            var vFloatStride = vDecl.vertexStride / 4;
            var verts = new Float32Array(vCount * vFloatStride);
            var inds = new Uint16Array(iCount);
            var vc = 0;
            var degToRad = Math.PI * 2.0 / 360.0;
            var da = (this._degEnd - this._degBegin) / slices * degToRad;
            var from_a = this._degBegin * degToRad;
            var to_a = this._degEnd * degToRad;
            var a = 0.0;
            var halfH = this._height * 0.5;
            var dt = 1 / slices;
            var t = 0.0;
            // Top cap
            a = from_a;
            for (var i = 0; i <= slices; i++, a += da) {
                var cos = Math.cos(a);
                var sin = Math.sin(a);
                var tx = (1 + cos) * 0.5;
                var ty = (1 + sin) * 0.5;
                var r = this._radius + this._getRBump(i / slices);
                // Outer
                verts[vc++] = r * cos;verts[vc++] = halfH;verts[vc++] = r * sin;
                verts[vc++] = 0;verts[vc++] = 1;verts[vc++] = 0;
                verts[vc++] = tx;verts[vc++] = ty;
                // Inner
                verts[vc++] = this._radiusInner * cos;verts[vc++] = halfH;verts[vc++] = this._radiusInner * sin;
                verts[vc++] = 0;verts[vc++] = 1;verts[vc++] = 0;
                verts[vc++] = tx;verts[vc++] = ty;
            }
            // Inner side
            a = from_a;
            t = 0.0;
            for (var i = 0; i <= slices; i++, t += dt, a += da) {
                var cos = Math.cos(a);
                var sin = Math.sin(a);
                var x = this._radiusInner * cos;
                var y = this._radiusInner * sin;
                // Top
                verts[vc++] = x;verts[vc++] = halfH;verts[vc++] = y;
                verts[vc++] = cos;verts[vc++] = 0;verts[vc++] = sin;
                verts[vc++] = t;verts[vc++] = 1;
                // Bottom
                verts[vc++] = x;verts[vc++] = -halfH;verts[vc++] = y;
                verts[vc++] = cos;verts[vc++] = 0;verts[vc++] = sin;
                verts[vc++] = t;verts[vc++] = 0;
            }
            // Outer side
            a = from_a;
            t = 0.0;
            for (var i = 0; i <= slices; i++, t += dt, a += da) {
                var cos = Math.cos(a);
                var sin = Math.sin(a);
                var r = this._radius + this._getRBump(i / slices);
                var x = r * cos;
                var y = r * sin;
                // Bottom
                verts[vc++] = x;verts[vc++] = -halfH;verts[vc++] = y;
                verts[vc++] = cos;verts[vc++] = 0;verts[vc++] = sin;
                verts[vc++] = t;verts[vc++] = 0;
                // Top
                verts[vc++] = x;verts[vc++] = halfH;verts[vc++] = y;
                verts[vc++] = cos;verts[vc++] = 0;verts[vc++] = sin;
                verts[vc++] = t;verts[vc++] = 1;
            }
            // Bottom cap
            a = from_a;
            for (var i = 0; i <= slices; i++, a += da) {
                var cos = Math.cos(a);
                var sin = Math.sin(a);
                var tx = (1 + cos) * 0.5;
                var ty = (1 + sin) * 0.5;
                var r = this._radius + this._getRBump(i / slices);
                // Innter
                verts[vc++] = this._radiusInner * cos;verts[vc++] = -halfH;verts[vc++] = this._radiusInner * sin;
                verts[vc++] = 0;verts[vc++] = -1;verts[vc++] = 0;
                verts[vc++] = tx;verts[vc++] = ty;
                // Outer
                verts[vc++] = r * cos;verts[vc++] = -halfH;verts[vc++] = r * sin;
                verts[vc++] = 0;verts[vc++] = -1;verts[vc++] = 0;
                verts[vc++] = tx;verts[vc++] = ty;
            }
            // Side caps
            {
                var r = this._radius;
                var ri = this._radiusInner;
                // Begin cap
                var cos = Math.cos(from_a);
                var sin = Math.sin(from_a);
                verts[vc++] = r * cos;verts[vc++] = halfH;verts[vc++] = r * sin;
                verts[vc++] = sin;verts[vc++] = 0;verts[vc++] = -cos;
                verts[vc++] = 0;verts[vc++] = 0;
                verts[vc++] = ri * cos;verts[vc++] = halfH;verts[vc++] = ri * sin;
                verts[vc++] = sin;verts[vc++] = 0;verts[vc++] = -cos;
                verts[vc++] = 1;verts[vc++] = 0;
                verts[vc++] = r * cos;verts[vc++] = -halfH;verts[vc++] = r * sin;
                verts[vc++] = sin;verts[vc++] = 0;verts[vc++] = -cos;
                verts[vc++] = 0;verts[vc++] = 1;
                verts[vc++] = ri * cos;verts[vc++] = -halfH;verts[vc++] = ri * sin;
                verts[vc++] = sin;verts[vc++] = 0;verts[vc++] = -cos;
                verts[vc++] = 1;verts[vc++] = 1;
                // End cap
                var cos = Math.cos(to_a);
                var sin = Math.sin(to_a);
                verts[vc++] = ri * cos;verts[vc++] = halfH;verts[vc++] = ri * sin;
                verts[vc++] = -sin;verts[vc++] = 0;verts[vc++] = cos;
                verts[vc++] = 0;verts[vc++] = 0;
                verts[vc++] = r * cos;verts[vc++] = halfH;verts[vc++] = r * sin;
                verts[vc++] = -sin;verts[vc++] = 0;verts[vc++] = cos;
                verts[vc++] = 1;verts[vc++] = 0;
                verts[vc++] = ri * cos;verts[vc++] = -halfH;verts[vc++] = ri * sin;
                verts[vc++] = -sin;verts[vc++] = 0;verts[vc++] = cos;
                verts[vc++] = 0;verts[vc++] = 1;
                verts[vc++] = r * cos;verts[vc++] = -halfH;verts[vc++] = r * sin;
                verts[vc++] = -sin;verts[vc++] = 0;verts[vc++] = cos;
                verts[vc++] = 1;verts[vc++] = 1;
            }
            // Indices
            var ic = 0;
            var iv = 0;
            for (var i = 0; i < 4; i++) {
                // 4 strips - top cap, inner side, bottom cap, outer side
                for (var j = 0; j < slices; j++, iv += 2) {
                    inds[ic++] = iv;inds[ic++] = iv + 3;inds[ic++] = iv + 1;
                    inds[ic++] = iv;inds[ic++] = iv + 2;inds[ic++] = iv + 3;
                }
                iv += 2;
            }
            // Side caps
            {
                var idx = iv; // vCount - 8;
                inds[ic++] = idx;inds[ic++] = idx + 1;inds[ic++] = idx + 3;
                inds[ic++] = idx;inds[ic++] = idx + 3;inds[ic++] = idx + 2;
                idx += 4;
                inds[ic++] = idx;inds[ic++] = idx + 1;inds[ic++] = idx + 3;
                inds[ic++] = idx;inds[ic++] = idx + 3;inds[ic++] = idx + 2;
            }
            // Apply geometry
            this.setData(vDecl, verts, inds);
        }
    }]);

    return RingSliceMesh;
}(Laya.PrimitiveMesh);

exports.default = RingSliceMesh;

},{}],48:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _RingSliceMesh = require('./RingSliceMesh');

var _RingSliceMesh2 = _interopRequireDefault(_RingSliceMesh);

var _HxGlobals = require('./HxGlobals');

var _HxGlobals2 = _interopRequireDefault(_HxGlobals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RingSliceMeshPool = function () {
    function RingSliceMeshPool(radius, radiusInner, height) {
        _classCallCheck(this, RingSliceMeshPool);

        this._radius = radius;
        this._radiusInner = radiusInner;
        this._height = height;
        this._meshes = [];
    }

    _createClass(RingSliceMeshPool, [{
        key: 'destroy',
        value: function destroy() {
            var meshes = this._meshes;
            for (var i = 0; i < meshes.length; i++) {
                if (meshes[i]) meshes[i].releaseResource();
            }this._meshes = [];
        }
    }, {
        key: 'getMesh',
        value: function getMesh(circlePart, bump, radusBump, height) {
            var key = circlePart.toPrecision(3) + ',' + bump + ',' + radusBump;
            if (height) key += ',' + height;
            var meshes = this._meshes;
            if (!meshes[key]) {
                meshes[key] = this._createMesh(circlePart, bump, radusBump, height);
            }
            return meshes[key];
        }
    }, {
        key: '_createMesh',
        value: function _createMesh(circlePart, bump, radusBump, height) {
            var ratio = circlePart;
            var slices = Math.max(_HxGlobals2.default.VIEW_MIN_SECTOR_SLICES, Math.ceil(_HxGlobals2.default.VIEW_SECTOR_SLICES * ratio));
            var r = this._radius;
            var h = height || _HxGlobals2.default.VIEW_FLOOR_THICKNESS;
            if (bump) {
                r += _HxGlobals2.default.VIEW_SECTOR_DEATH_BUMP;
                h += _HxGlobals2.default.VIEW_SECTOR_DEATH_BUMP;
            }
            return new _RingSliceMesh2.default(r, this._radiusInner, h, 0, ratio * 360, slices, radusBump ? _HxGlobals2.default.VIEW_SECTOR_DEATH_RADIUS_BUMP : 0);
        }
    }]);

    return RingSliceMeshPool;
}();

exports.default = RingSliceMeshPool;

},{"./HxGlobals":37,"./RingSliceMesh":47}],49:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ScenesOpener = function (_Laya$EventDispatcher) {
    _inherits(ScenesOpener, _Laya$EventDispatcher);

    _createClass(ScenesOpener, null, [{
        key: "EVENT_OPENED",
        get: function get() {
            return "PRELOADED";
        }
    }, {
        key: "EVENT_PROGRESS",
        get: function get() {
            return "PROGRESS";
        }
    }]);

    function ScenesOpener(caller, scenes) {
        _classCallCheck(this, ScenesOpener);

        var _this = _possibleConstructorReturn(this, (ScenesOpener.__proto__ || Object.getPrototypeOf(ScenesOpener)).call(this));

        _this._caller = caller;
        _this._scenes = scenes;
        _this._curIndex = -1;
        _this._openedScenes = [];
        return _this;
    }

    _createClass(ScenesOpener, [{
        key: "open",
        value: function open() {
            if (this._curIndex < 0) this._openNext();
        }
    }, {
        key: "_openNext",
        value: function _openNext() {
            this._curIndex++;
            if (this._curIndex >= this._scenes.length) {
                this.event(ScenesOpener.EVENT_PROGRESS, 1);
                this.event(ScenesOpener.EVENT_OPENED, this._openedScenes);
                return;
            }
            var url = this._scenes[this._curIndex].url;
            var handler = new Laya.Handler(this, this._onOpened);
            if (_Utils2.default.endsWith(url, '.ls')) this._loadLayaScene(url, handler);else Laya.Scene.open(url, false, handler);
            this.event(ScenesOpener.EVENT_PROGRESS, this._curIndex / this._scenes.length);
        }
    }, {
        key: "_loadLayaScene",
        value: function _loadLayaScene(url, handler) {
            var loader = new Laya.SceneLoader();
            loader.on(Laya.Event.COMPLETE, null, onLoaded);
            loader.load(url);
            function onLoaded() {
                var scene = Laya.Loader.getRes(url);
                Laya.Scene.root.addChild(scene);
                handler.runWith(scene);
            }
        }
    }, {
        key: "_onOpened",
        value: function _onOpened(scene) {
            this._openedScenes.push(scene);
            this._scenes[this._curIndex].onOpened.call(this._caller, scene);
            this._openNext();
        }
    }]);

    return ScenesOpener;
}(Laya.EventDispatcher);

exports.default = ScenesOpener;

},{"./Utils":61}],50:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SettingsAll = function () {
    function SettingsAll(data) {
        _classCallCheck(this, SettingsAll);

        this._data = data;
    }

    _createClass(SettingsAll, [{
        key: "getMoneySoft4Resume",
        value: function getMoneySoft4Resume(tryIndex) {
            var arr = this._data.arrayMoneySoft4Resume;
            return tryIndex < arr.length ? arr[tryIndex] : arr[arr.length - 1];
        }
    }, {
        key: "moneySoftPerFriendHelp",
        get: function get() {
            return this._data.moneySoftPerFriendHelp;
        }
    }, {
        key: "timeBetweenFriendHelp",
        get: function get() {
            return this._data.timeBetweenFriendHelp;
        }
    }, {
        key: "moneySoft4Resume",
        get: function get() {
            return this._data.moneySoft4Resume;
        }
    }, {
        key: "moneySoft4Ad",
        get: function get() {
            return this._data.moneySoft4Ad;
        }
    }, {
        key: "chest",
        get: function get() {
            return this._data.chest;
        } // example: { timeOpen: 21600, maxMoneySoft: 100 }

    }, {
        key: "timeToFreeLife",
        get: function get() {
            return this._data.timeToFreeLife;
        }
    }]);

    return SettingsAll;
}();

exports.default = SettingsAll;

},{}],51:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _FriendInfo = require("./FriendInfo");

var _FriendInfo2 = _interopRequireDefault(_FriendInfo);

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

var _Yandex = require("./Yandex");

var _Yandex2 = _interopRequireDefault(_Yandex);

var _Locale = require("./Locale");

var _Locale2 = _interopRequireDefault(_Locale);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SocialApi = function (_Laya$EventDispatcher) {
    _inherits(SocialApi, _Laya$EventDispatcher);

    _createClass(SocialApi, null, [{
        key: "EVENT_INITIALIZED",
        get: function get() {
            return "INITIALIZED";
        }
    }, {
        key: "EVENT_INITIALIZE_PROGRESS",
        get: function get() {
            return "INITIALIZE_PROGRESS";
        }
    }, {
        key: "EVENT_ORDER_RESULT",
        get: function get() {
            return "ORDER_RESULT";
        }
    }, {
        key: "EVENT_ADS_READY_CHANGED",
        get: function get() {
            return "ADS_READY_CHANGED";
        }
    }, {
        key: "EVENT_ADS_SHOW_STARTED",
        get: function get() {
            return "ADS_SHOWN_STARTED";
        }
    }, {
        key: "EVENT_ADS_REQUESTED",
        get: function get() {
            return "ADS_REQUESTED";
        }
    }, {
        key: "EVENT_ADS_NO",
        get: function get() {
            return "ADS_NO";
        }
    }, {
        key: "EVENT_ADS_SHOW_STOPPED",
        get: function get() {
            return "ADS_SHOW_STOPPED";
        }
    }, {
        key: "EVENT_ADS_SHOW_COMPLETE",
        get: function get() {
            return "ADS_SHOW_COMPLETE";
        }
    }, {
        key: "EVENT_ADS_SHOW_SKIPPED",
        get: function get() {
            return "ADS_SHOW_SKIPPED";
        }
    }, {
        key: "EVENT_PAYMENT_RESULT",
        get: function get() {
            return "showPayment";
        }
    }, {
        key: "PROMO_TSAR_GORY",
        get: function get() {
            return true;
        }
    }, {
        key: "GAME_LINK",
        get: function get() {
            var isTsarGory = SocialApi.PROMO_TSAR_GORY;
            if (SocialApi.isOK) return (SocialApi.isMobile ? 'https://m.' : 'https://') + 'ok.ru/app/' + (isTsarGory ? 'tsar-gory' : 'coiny');
            if (SocialApi.isVK) return (SocialApi.isMobile ? 'vk' : 'https') + '://vk.com/' + (isTsarGory ? 'app8023481' : 'raccoin');
            if (SocialApi.isYA && isTsarGory) return 'https://yandex.ru/games/play/182328';
            return "";
        }
    }, {
        key: "GROUP_LINK",
        get: function get() {
            if (SocialApi.inst._isVK) return (SocialApi.inst._isVKMobile ? "vk" : "https") + "://vk.com/club173621551";else if (SocialApi.inst._isOK) {
                if (SocialApi.inst._isOKMobile) return "https://m.ok.ru/group/59384228675644";else return "https://ok.ru/group/59384228675644";
            }
            return "https://www.google.com";
        }
    }, {
        key: "GROUP_TITLE",
        get: function get() {
            if (SocialApi.inst._isVK) return "VK ГРУППА";
            return "ГРУППА";
        }
    }, {
        key: "isBankAvailable",
        get: function get() {
            return true; //!SocialApi.inst._isOK || Utils.devMode;
        }
    }, {
        key: "providerId",
        get: function get() {
            return window.isYandex ? "ya" : SocialApi.inst._isOK ? "ok" : "vk";
        }
    }, {
        key: "isVK",
        get: function get() {
            return SocialApi.inst._isVK;
        }
    }, {
        key: "isOK",
        get: function get() {
            return SocialApi.inst._isOK;
        }
    }, {
        key: "isYA",
        get: function get() {
            return window.isYandex;
        }
    }, {
        key: "isMobile",
        get: function get() {
            var inst = SocialApi.inst;
            return inst._isOKMobile || inst._isVKMobile;
        }
    }, {
        key: "PHOTO_NEW_LEVEL",
        get: function get() {
            return SocialApi.inst._isOK ? "https://jump-vk-api.candygrill.com/ok/common/jumper_new_level.jpg" : "photo-173621551_456239028";
        }
    }, {
        key: "PHOTO_NEW_SCORE",
        get: function get() {
            return SocialApi.inst._isOK ? "https://jump-vk-api.candygrill.com/ok/common/jumper_new_record.jpg" : "photo-173621551_456239029";
        }
    }, {
        key: "isVKBridgeWebView",
        get: function get() {
            return window.vkBridge && window.vkBridge.isWebView && window.vkBridge.isWebView();
        }
    }, {
        key: "isVKBridgeAds",
        get: function get() {
            return SocialApi.isVK && SocialApi.isVKBridgeWebView;
        }
    }]);

    function SocialApi() {
        _classCallCheck(this, SocialApi);

        var _this = _possibleConstructorReturn(this, (SocialApi.__proto__ || Object.getPrototypeOf(SocialApi)).call(this));

        var sp = _Utils2.default.getSearchParam;
        _this._isVK = !!sp('viewer_id');
        _this._isVKMobile = _this._isVK && sp('platform') != "web";
        _this._isOK = !!sp('logged_user_id');
        _this._isOKMobile = _this._isOK && sp('mob') == "true";
        _this._isOKAnon = sp('logged_user_id') === '0';
        _this._vkAdman = null;
        if (_this._isVK && SocialApi.isVKBridgeWebView) {
            window.vkBridge.send("VKWebAppInit", {});
        }
        if (SocialApi.isYA) {
            _this._yaAdReady = true;
        }
        return _this;
    }

    _createClass(SocialApi, [{
        key: "preBankShow",
        value: function preBankShow() {
            // if (this._yandex)
            //     return this._yandex.prePurchase();
            return true;
        }
    }, {
        key: "logTutorComplete",
        value: function logTutorComplete() {
            if (this._yandex) return this._yandex.logTutor();
        }
    }, {
        key: "logLevel",
        value: function logLevel(level) {
            if (this._yandex) this._yandex.logLevel(level);
            this._loggedLevel = level;
        }
    }, {
        key: "logBestScore",
        value: function logBestScore(score) {
            this._loggedBestScore = score;
        }
    }, {
        key: "initialize",
        value: function initialize(appFriendsRequester, purchaseValidator) {
            if (this._initalizing || this.initialized) return;
            this._initalizing = true;
            this._appFriendsRequester = appFriendsRequester;
            if (this._isVK) {
                var users_get_callback = function (data) {
                    this.event(SocialApi.EVENT_INITIALIZE_PROGRESS, 0.2);
                    if (!data.response) {
                        alert(JSON.stringify(data));
                        this.user = new _FriendInfo2.default('1', 'Anonimous', '');
                    } else {
                        var obj = data.response[0];
                        this.user = new _FriendInfo2.default(obj.id, obj.first_name, obj.photo_100);
                    }
                    this._requestFriends2();
                }.bind(this);
                VK.init(function () {
                    if (this._isVKMobile) {
                        VK.addCallback('onSettingsBoxDone', function (status) {
                            if (this._settingsCallback) this._settingsCallback(status == 'success');
                        }.bind(this));
                        VK.addCallback('onOrderBoxDone', function (status) {
                            this._issueOrderResult(status == 'success');
                        }.bind(this));
                    } else {
                        VK.addCallback('onSettingsChanged', function (perms) {
                            if (this._settingsCallback) this._settingsCallback((this._settingsPerms & perms) == perms);
                        }.bind(this));
                        VK.addCallback('onSettingsCancel', function (perms) {
                            if (this._settingsCallback) this._settingsCallback(false);
                        }.bind(this));
                        VK.addCallback('onOrderCancel', function () {
                            this._issueOrderResult(false);
                        }.bind(this));
                        VK.addCallback('onOrderSuccess', function () {
                            this._issueOrderResult(true);
                        }.bind(this));
                        VK.addCallback('onOrderFail', function () {
                            this._issueOrderResult(false);
                        }.bind(this));
                    }
                    VK.api('users.get', this._VKArgsFilter({ fields: 'first_name,photo_100' }), users_get_callback);
                }.bind(this), function () {
                    alert('VK.init FAILED');
                }, '5.122');
            } else if (this._isOK) {
                var app_key = _Utils2.default.getSearchParam('application_key');
                var config = {
                    app_id: app_key == 'CBALFOOMEBABABABA' ? 1273846272 : 1273510144,
                    app_key: app_key //'CBAKDJOMEBABABABA'
                };
                var rest = FAPI.REST;
                var getCurrentUserCallback = function (status, data, error) {
                    if (status == 'ok') {
                        this.user = new _FriendInfo2.default(data.uid, data.name, data.pic_2);
                        this.appFriends = [];
                        this.on(SocialApi.EVENT_PAYMENT_RESULT, this, function (data) {
                            if (data) this._issueOrderResult(data.result == 'ok');
                        });
                        window.okCallbackEvents = this;
                        this._callOKREST('friends.getAppUsers', {}, function (status, data, error) {
                            if (error) {
                                this.initialized = true;return;
                            }
                            this._callOKREST('users.getInfo', { uids: data.uids.join(','), fields: 'first_name,pic_2' }, function (status, data, error) {
                                if (!error) {
                                    this.appFriends = data.map(function (e) {
                                        return new _FriendInfo2.default(e.uid, e.first_name, e.pic_2);
                                    });
                                    console.log('users.getInfo', data);
                                }
                                this.initialized = true;
                            }.bind(this));
                        }.bind(this));
                    } else {
                        alert('Unable to retrieve current user ' + FAPI.Util.toString(error));
                    }
                }.bind(this);
                var rParams = FAPI.Util.getRequestParameters();
                FAPI.init(config, function () {
                    if (this._isOKAnon) {
                        this.user = new _FriendInfo2.default('0', 'You', "stubAvatars/7.jpg");
                        this.appFriends = [];
                        window.okCallbackEvents = this;
                        this.initialized = true;
                    } else {
                        FAPI.Client.call({ method: 'users.getCurrentUser', fields: 'UID,NAME,PIC_2' }, getCurrentUserCallback);
                    }
                    if (window.OkMidroll) {
                        this._okMidroll = new OkMidroll(config.app_id, function () {
                            this.event(SocialApi.EVENT_ADS_READY_CHANGED);
                        }.bind(this));
                        NativeAds.inst;
                    }
                }.bind(this), function (error) {
                    alert('FAPI error' + FAPI.Util.toString(error));
                }.bind(this));
            } else {
                this.user = new _FriendInfo2.default(1, "You", "stubAvatars/7.jpg");
                if (SocialApi.isYA) {
                    this.appFriends = [];
                    this._yandex = new _Yandex2.default(purchaseValidator);
                } else {
                    this.appFriends = [new _FriendInfo2.default(1, "Bob", "stubAvatars/1.jpg"), new _FriendInfo2.default(2, "Alice", "stubAvatars/2.jpg"), new _FriendInfo2.default(3, "Vasya", "stubAvatars/3.jpg"), new _FriendInfo2.default(4, "Samanta", "stubAvatars/4.jpg"), new _FriendInfo2.default(5, "Jack", "stubAvatars/5.jpg"), new _FriendInfo2.default(6, "Masha", "stubAvatars/6.jpg"), new _FriendInfo2.default(7, "Matvey", "stubAvatars/7.jpg"), new _FriendInfo2.default(8, "Bella", "stubAvatars/8.jpg")];
                }
                console.log('FREINDS', this.appFriends);
                this.initialized = true;
            }
        }
    }, {
        key: "_request_VK_adman",
        value: function _request_VK_adman(onReply) {
            this.event(SocialApi.EVENT_ADS_REQUESTED);
            window.request_VK_adman(function (adman) {
                // if (Utils.devMode)
                //     alert(adman ? "Has Ads" : "No Ads");
                if (adman) {
                    this._vkAdman = adman;
                    this.event(SocialApi.EVENT_ADS_READY_CHANGED);
                    this._vkAdman.onCompleted(function () {
                        this._vkAdman = null;
                        this.event(SocialApi.EVENT_ADS_READY_CHANGED);
                        this._request_VK_adman();
                        this.event(SocialApi.EVENT_ADS_SHOW_COMPLETE);
                        this.event(SocialApi.EVENT_ADS_SHOW_STOPPED);
                    }.bind(this));
                    this._vkAdman.onSkipped(function () {
                        this.event(SocialApi.EVENT_ADS_SHOW_SKIPPED);
                        this.event(SocialApi.EVENT_ADS_SHOW_STOPPED);
                    }.bind(this));
                } else {
                    this.event(SocialApi.EVENT_ADS_NO);
                }
                if (onReply) onReply();
            }.bind(this));
        }
    }, {
        key: "_callOKREST",
        value: function _callOKREST(method, args, callback) {
            FAPI.Client.call(Object.assign({ method: method }, args), callback);
        }
    }, {
        key: "showInviteBox",
        value: function showInviteBox(message) {
            if (this._isVK) VK.callMethod('showInviteBox');else if (this._isOK) {
                if (this._checkOKAnon()) return;
                FAPI.UI.showInvite(message);
            } else alert(message || "Приходи играть, помоги другу!");
        }
    }, {
        key: "showRequestBox",
        value: function showRequestBox(user_id, message) {
            //, request_key) {
            if (this._isVK) VK.callMethod('showRequestBox', user_id, message, ""); // request_key);
            else if (this._isOK) {
                    if (this._checkOKAnon()) return;
                    FAPI.UI.showNotification(message, null, user_id);
                } else alert("Requst: " + message);
        }
    }, {
        key: "showShareBox",
        value: function showShareBox(message, photo) {
            if (this._isVK) {
                if (this._isVKMobile) {
                    var attachements = ['https://vk.com/jumpyball'];
                    if (photo) attachements.push(photo);
                    VK.callMethod('showShareBox', message, attachements, 'wall');
                } else {
                    alert(message);
                };
            } else if (this._isOK) {
                if (this._checkOKAnon()) return;
                var _attachements = { media: [] };
                _attachements.media.push({ type: "app", text: message, images: [{ url: photo, title: message }], actions: [{ text: "Играть", mark: "Play" }] });
                FAPI.UI.postMediatopic(_attachements, false);
            } else {
                alert(message);
            }
        }
    }, {
        key: "showLeaderboardBox",
        value: function showLeaderboardBox(result) {
            if (this._isVKMobile) {
                VK.callMethod('showLeaderboardBox', result);
            } else if (this._isOK) {
                console.error("Learboard NOT SUPPORTED for OK");
            } else {
                alert('Learboard not available');
            }
        }
    }, {
        key: "getPriceString",
        value: function getPriceString(card) {
            return this.getPrice(card) + ' ' + this.getCurrencyString(card);
        }
    }, {
        key: "getPrice",
        value: function getPrice(card) {
            if (this._isOK) return card.ok.price;
            if (SocialApi.isYA) return card.ya;
            return card.votes;
        }
    }, {
        key: "getCurrencyString",
        value: function getCurrencyString(card) {
            if (this._isOK) return _Utils2.default.getPluralByValue(card.ok.price, ['OK', 'OK', 'OK']);
            //if (SocialApi.isYA) return Locale.russionPlural('L_RUB_SUFFIX', card.ya);// Utils.getPluralByValue(card.ya, ['Рублей', 'Рублей', 'Рублей']);
            if (SocialApi.isYA) return this._yandex.currencyCode; // Utils.getPluralByValue(card.ya, ['Рублей', 'Рублей', 'Рублей']);
            return _Utils2.default.getPluralByValue(card.votes, ['Голос', 'Голоса', 'Голосов']);
        }
    }, {
        key: "showOrderBox",
        value: function showOrderBox(card) {
            if (this._isVK) VK.callMethod('showOrderBox', { type: 'item', item: card.name });else if (this._isOK) {
                if (this._checkOKAnon()) return;
                FAPI.UI.showPayment(card.ok.title, card.ok.title, card.name, card.ok.price, null, null, "ok", "true");
            }if (SocialApi.isYA) {
                if (window.ysdk_player) {
                    this._yandex.purchase(card).then(function (ok) {
                        this._issueOrderResult(ok);
                    }.bind(this));
                } else {
                    ysdk.auth.openAuthDialog().then(function () {
                        location.reload();
                    });
                }
            } else {
                setTimeout(function () {
                    alert('Банка закрыта');
                    this._issueOrderResult(false);
                }.bind(this), 500);
            }
        }
    }, {
        key: "adsShow",
        value: function adsShow(rewardedHint) {
            if (SocialApi.isVKBridgeAds) {
                console.log('[AdsNetworkVKBridge] show');
                this.event(SocialApi.EVENT_ADS_REQUESTED);
                this.event(SocialApi.EVENT_ADS_SHOW_STARTED);
                setTimeout(function () {
                    vkBridge.sendPromise('VKWebAppShowNativeAds', { ad_format: 'reward' }).then(function (data) {
                        console.log('[AdsNetworkVKBridge] show result=' + data.result);
                        if (data.result) this.event(SocialApi.EVENT_ADS_SHOW_COMPLETE);else this.event(SocialApi.EVENT_ADS_SHOW_SKIPPED);
                        this.event(SocialApi.EVENT_ADS_SHOW_STOPPED);
                    }.bind(this)).catch(function (error) {
                        console.log('[AdsNetworkVKBridge] show error=' + error + ' error.message=' + error.message, error);
                        this.event(SocialApi.EVENT_ADS_SHOW_SKIPPED);
                        this.event(SocialApi.EVENT_ADS_SHOW_STOPPED);
                    }.bind(this));
                }.bind(this), 10);
                return;
            }
            if (this._vkAdman) {
                this.event(SocialApi.EVENT_ADS_SHOW_STARTED);
                this._vkAdman.start('preroll');
                return;
            }
            if (SocialApi.isYA) {
                if (!rewardedHint && this._yandex.isAdsPayed()) return;
                var resetAdsReady = function (result, seconds) {
                    this._yaAdReady = false;
                    this.event(SocialApi.EVENT_ADS_READY_CHANGED);
                    if (seconds) {
                        setTimeout(function () {
                            this._yaAdReady = true;
                            this.event(SocialApi.EVENT_ADS_READY_CHANGED);
                        }.bind(this), seconds * 1000);
                    }
                }.bind(this);
                this.event(SocialApi.EVENT_ADS_REQUESTED);
                if (rewardedHint) {
                    var start = new Date().getTime();
                    ysdk.adv.showRewardedVideo({
                        callbacks: {
                            onOpen: function () {
                                console.log('[showRewardedVideo] onOpen(Video)');
                                this.event(SocialApi.EVENT_ADS_SHOW_STARTED);
                            }.bind(this),
                            onRewarded: function () {
                                console.log('[showRewardedVideo] onRewarded');
                                var delayMS = 5000 - (new Date().getTime() - start); // 5 seconds minimum
                                var doResolve = function () {
                                    this._yandex.logAdRewarded();
                                    this.event(SocialApi.EVENT_ADS_SHOW_COMPLETE);
                                    this.event(SocialApi.EVENT_ADS_SHOW_STOPPED);
                                }.bind(this);
                                if (delayMS > 0) {
                                    console.log('[showRewardedVideo] extra delayMS=' + delayMS);setTimeout(doResolve, delayMS);
                                } else doResolve();
                            }.bind(this),
                            onClose: function () {
                                console.log('[showRewardedVideo] onClose(Video)');
                                this.event(SocialApi.EVENT_ADS_SHOW_SKIPPED);
                                this.event(SocialApi.EVENT_ADS_SHOW_STOPPED);
                            }.bind(this),
                            onError: function (e) {
                                console.log('[showRewardedVideo] onError(Video)', e);
                                this.event(SocialApi.EVENT_ADS_SHOW_SKIPPED);
                                this.event(SocialApi.EVENT_ADS_SHOW_STOPPED);
                            }.bind(this)
                        }
                    });
                } else {
                    this.event(SocialApi.EVENT_ADS_SHOW_STARTED);
                    var onAdsClose = function (wasShown) {
                        this.event(SocialApi.EVENT_ADS_SHOW_SKIPPED);
                        this.event(SocialApi.EVENT_ADS_SHOW_STOPPED);
                        if (wasShown) {
                            this._yandex.logAdRewarded();
                            resetAdsReady(false, 181);
                        }
                    }.bind(this);
                    ysdk.adv.showFullscreenAdv({ callbacks: { onClose: onAdsClose, onError: onAdsClose } });
                }
                return;
            }
            if (!rewardedHint && NativeAds.inst.supportedInterstitial) {
                NativeAds.inst.showInterstitial();
                return;
            }
            if (!this.adsCanShow) return;
            // Emulate request
            this.event(SocialApi.EVENT_ADS_REQUESTED);
            this.event(SocialApi.EVENT_ADS_SHOW_STARTED);
            NativeAds.inst.show(function (nativeOk) {
                if (nativeOk) {
                    this.event(SocialApi.EVENT_ADS_SHOW_COMPLETE);
                } else {
                    this._okMidroll.show(function (ok) {
                        if (ok) this.event(SocialApi.EVENT_ADS_SHOW_COMPLETE);else this.event(SocialApi.EVENT_ADS_SHOW_SKIPPED);
                        this.event(SocialApi.EVENT_ADS_SHOW_STOPPED);
                    }.bind(this));
                }
            }.bind(this));
        }
    }, {
        key: "_checkOKAnon",
        value: function _checkOKAnon() {
            if (this._isOKAnon) {
                FAPI.UI.showLoginSuggestion(JSON.stringify({ level: this._loggedLevel, bestScore: this._loggedBestScore }));
            }
            return this._isOKAnon;
        }
    }, {
        key: "_requestFriends",
        value: function _requestFriends() {
            VK.api('friends.getAppUsers', this._VKArgsFilter({}), function (data) {
                this.event(SocialApi.EVENT_INITIALIZE_PROGRESS, 0.7);
                if (!data.response) {
                    alert(JSON.stringify(data));
                    return;
                }
                var user_ids = data.response.join(',');
                VK.api('users.get', this._VKArgsFilter({ user_ids: user_ids, fields: 'first_name,photo_100' }), function (data) {
                    this.event(SocialApi.EVENT_INITIALIZE_PROGRESS, 1);
                    this.appFriends = [];
                    if (data.response) {
                        for (var i in data.response) {
                            var obj = data.response[i];
                            this.appFriends.push(new _FriendInfo2.default(obj.id, obj.first_name, obj.photo_100));
                        }
                    }
                    this.initialized = true;
                }.bind(this));
            }.bind(this));
        }
    }, {
        key: "_requestFriends2",
        value: function _requestFriends2() {
            VK.api('friends.get', this._VKArgsFilter({ order: 'mobile', count: 100, fields: 'first_name,photo_100' }), function (data) {
                this.event(SocialApi.EVENT_INITIALIZE_PROGRESS, 0.7);
                this.appFriends = [];
                if (!data.response) {
                    alert(JSON.stringify(data));
                    this.event(SocialApi.EVENT_INITIALIZE_PROGRESS, 1);
                    this.initialized = true;
                } else {
                    this._appFriendsRequester(data.response.items.reduce(function (s, itm) {
                        s.push(itm.id);return s;
                    }, []), function (ids) {
                        this.event(SocialApi.EVENT_INITIALIZE_PROGRESS, 1);
                        for (var i in data.response.items) {
                            var obj = data.response.items[i];
                            if (ids.indexOf(obj.id) != -1) this.appFriends.push(new _FriendInfo2.default(obj.id, obj.first_name, obj.photo_100));
                        }
                        this._request_VK_adman(function () {
                            this.initialized = true;
                        }.bind(this));
                    }.bind(this));
                }
            }.bind(this));
        }
    }, {
        key: "_checkVKPermissions",
        value: function _checkVKPermissions(perms, onComplete) {
            VK.api('account.getAppPermissions', this._VKArgsFilter({}), function (data) {
                if (data.error) onComplete(false);else {
                    if (data.response & perms) onComplete(true);else {
                        this._settingsPerms = perms;
                        this._settingsCallback = function (success) {
                            this._settingsCallback = null;
                            onComplete(success);
                        }.bind(this);
                        VK.callMethod('showSettingsBox', perms);
                    }
                }
            }.bind(this));
        }
    }, {
        key: "_VKArgsFilter",
        value: function _VKArgsFilter(args) {
            if (_Utils2.default.devMode) args.test_mode = 1;
            return args;
        }
    }, {
        key: "_issueOrderResult",
        value: function _issueOrderResult(result) {
            this.event(SocialApi.EVENT_ORDER_RESULT, result);
        }
        // _pendPageReloadOnFocus() {
        //     window.addEventListener('focus', function() { window.location.reload(); });
        // }

    }, {
        key: "initialized",
        get: function get() {
            return this._initialized;
        },
        set: function set(value) {
            if (!this._initialized && value) {
                this._initialized = true;
                this.event(SocialApi.EVENT_INITIALIZED);
            }
        }
    }, {
        key: "profileStorage",
        get: function get() {
            return this._yandex && this._yandex.profileStorage;
        }
    }, {
        key: "adsSupported",
        get: function get() {
            return SocialApi.isVK || SocialApi.isOK || SocialApi.isYA;
        }
    }, {
        key: "adsForCoinsSupported",
        get: function get() {
            return SocialApi.isVK || SocialApi.isOK || SocialApi.isYA;
        }
    }, {
        key: "adsCanShow",
        get: function get() {
            return this.adsSupported && (SocialApi.isYA && this._yaAdReady || this._vkAdman || SocialApi.isVKBridgeAds || this._okMidroll && this._okMidroll.canShow() || NativeAds.inst.ready || NativeAds.inst.supportedInterstitial);
        }
    }, {
        key: "adsCanShowRewarded",
        get: function get() {
            return this.adsCanShow || SocialApi.isYA;
        }
    }], [{
        key: "inst",
        get: function get() {
            if (!SocialApi._inst) window.SocialApi = SocialApi._inst = new SocialApi();
            return SocialApi._inst;
        }
    }]);

    return SocialApi;
}(Laya.EventDispatcher);

exports.default = SocialApi;

var NativeAds = function () {
    _createClass(NativeAds, [{
        key: "supported",
        get: function get() {
            return window.FAPI && FAPI.UI.loadAd && FAPI.UI.showLoadedAd;
        }
    }, {
        key: "supportedInterstitial",
        get: function get() {
            return window.FAPI && !!FAPI.UI.showAd;
        }
    }, {
        key: "ready",
        get: function get() {
            return this._ready;
        }
    }], [{
        key: "inst",
        get: function get() {
            if (!NativeAds._inst) {
                window.NativeAds = NativeAds._inst = new NativeAds();
            }
            return NativeAds._inst;
        }
    }]);

    function NativeAds() {
        _classCallCheck(this, NativeAds);

        console.log('[NativeAds] constructor');
        this._ready = false;
        if (this.supported) {
            SocialApi.inst.on("loadAd", this, this.on_loadAd);
            SocialApi.inst.on("showLoadedAd", this, this.on_showLoadedAd);
            setInterval(function () {
                this._updateAds();
            }.bind(this), 31000); // > 30 seconds
            this._updateAds();
            this._onShowResult = null;
        }
    }

    _createClass(NativeAds, [{
        key: "show",
        value: function show(onComplete) {
            console.log('[NativeAds] show supported=' + !!this.supported + ' ready=' + this._ready);
            if (!this._ready) {
                onComplete(false);
            } else {
                this._onShowResult = function (ok) {
                    console.log('[NativeAds] _onShowResult ok=' + ok);
                    this._onShowResult = null;
                    this._setReady(false);
                    onComplete(ok);
                }.bind(this);
                console.log('[NativeAds] FAPI.UI.showLoadedAd');
                FAPI.UI.showLoadedAd();
            }
        }
    }, {
        key: "showInterstitial",
        value: function showInterstitial() {
            console.log('[NativeAds] showInterstitial: FAPI.UI.showAd');
            FAPI.UI.showAd();
        }
    }, {
        key: "_updateAds",
        value: function _updateAds() {
            if (!this._ready) FAPI.UI.loadAd();
        }
    }, {
        key: "_setReady",
        value: function _setReady(value) {
            if (value != this._ready) {
                this._ready = value;
                SocialApi.inst.event(SocialApi.EVENT_ADS_READY_CHANGED);
            }
        }
    }, {
        key: "on_loadAd",
        value: function on_loadAd(ev) {
            this.logCallback('loadAd', ev);
            if (ev.result == 'ok' && (ev.data == 'ad_prepared' || ev.data == 'ready')) {
                this._setReady(true);
                SocialApi.inst.event(SocialApi.EVENT_ADS_READY_CHANGED);
            }
        }
    }, {
        key: "on_showLoadedAd",
        value: function on_showLoadedAd(ev) {
            this.logCallback('showLoadedAd', ev);
            if (this._onShowResult) this._onShowResult(ev.result == 'ok' && (ev.data == 'ad_shown' || ev.data == 'complete'));
        }
    }, {
        key: "logCallback",
        value: function logCallback(name, ev) {
            console.log('[NativeAds] ' + name + ' result=' + ev.result + ' data=' + ev.data);
        }
    }]);

    return NativeAds;
}();

},{"./FriendInfo":21,"./Locale":38,"./Utils":61,"./Yandex":63}],52:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SoundMan = function () {
    function SoundMan() {
        _classCallCheck(this, SoundMan);
    }

    _createClass(SoundMan, null, [{
        key: "ID_BREAK",
        value: function ID_BREAK(idx) {
            return "break" + (idx + 1);
        }
    }, {
        key: "init",
        value: function init() {
            if (!SoundMan._inited) {
                SoundMan._inited = true;
                SoundMan._enabled = true;
                var ids = [SoundMan.ID_CLICK, SoundMan.ID_DEATH, SoundMan.ID_JUMP, SoundMan.ID_CRACK];
                for (var i = 0; i < SoundMan.BREAK_SOUND_COUNT; i++) {
                    ids.push(SoundMan.ID_BREAK(i));
                }SoundMan._registerIds(ids);
            }
        }
    }, {
        key: "lock",
        value: function lock(obj) {
            if (!this._locks) {
                this._locks = [];
            }
            this._locks.push(obj);
        }
    }, {
        key: "unlock",
        value: function unlock(obj) {
            if (this._locks) {
                var idx = this._locks.indexOf(obj);
                if (idx >= 0) this._locks.splice(idx, 1);
            }
        }
    }, {
        key: "playClick",
        value: function playClick() {
            SoundMan._play(SoundMan.ID_CLICK);
        }
    }, {
        key: "playJump",
        value: function playJump() {
            SoundMan._play(SoundMan.ID_JUMP);
        }
    }, {
        key: "playDeath",
        value: function playDeath() {
            SoundMan._play(SoundMan.ID_DEATH);
        }
    }, {
        key: "playBreak",
        value: function playBreak(idx) {
            SoundMan._play(SoundMan.ID_BREAK(Math.min(idx, SoundMan.BREAK_SOUND_COUNT - 1)));
        }
    }, {
        key: "playCrack",
        value: function playCrack() {
            SoundMan._play(SoundMan.ID_CRACK);
        }
    }, {
        key: "_registerIds",
        value: function _registerIds(ids) {
            for (var i = 0; i < ids.length; i++) {
                createjs.Sound.registerSound(SoundMan._toFilePath(ids[i]), ids[i]);
            }
        }
    }, {
        key: "_toFilePath",
        value: function _toFilePath(id) {
            return SoundMan.FOLDER + id + ".mp3";
        }
    }, {
        key: "_play",
        value: function _play(id) {
            if (document.visibilityState == 'visible' && SoundMan.enabled && (!this._locks || !this._locks.length)) createjs.Sound.play(id);
        }
    }, {
        key: "FOLDER",
        get: function get() {
            return "sound/";
        }
    }, {
        key: "BREAK_SOUND_COUNT",
        get: function get() {
            return 4;
        }
    }, {
        key: "ID_CLICK",
        get: function get() {
            return "click";
        }
    }, {
        key: "ID_DEATH",
        get: function get() {
            return "death";
        }
    }, {
        key: "ID_JUMP",
        get: function get() {
            return "jump";
        }
    }, {
        key: "ID_CRACK",
        get: function get() {
            return "crack";
        }
    }, {
        key: "enabled",
        get: function get() {
            return this._enabled;
        },
        set: function set(value) {
            this._enabled = value;
        }
    }]);

    return SoundMan;
}();

exports.default = SoundMan;

},{}],53:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if ("value" in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };

var _UserOptions = require("./UserOptions");

var _UserOptions2 = _interopRequireDefault(_UserOptions);

var _SoundMan = require("./SoundMan");

var _SoundMan2 = _interopRequireDefault(_SoundMan);

var _SocialApi = require("./SocialApi");

var _SocialApi2 = _interopRequireDefault(_SocialApi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SoundToggle = function (_Laya$CheckBox) {
    _inherits(SoundToggle, _Laya$CheckBox);

    function SoundToggle() {
        _classCallCheck(this, SoundToggle);

        return _possibleConstructorReturn(this, (SoundToggle.__proto__ || Object.getPrototypeOf(SoundToggle)).apply(this, arguments));
    }

    _createClass(SoundToggle, [{
        key: "init",
        value: function init(userOptions) {
            this._userOptions = userOptions;
            this.selected = userOptions.getOption(_UserOptions2.default.SOUND_OFF) != '1';
            _SocialApi2.default.inst.on(_SocialApi2.default.EVENT_ADS_SHOW_STARTED, this, function () {
                _SoundMan2.default.enabled = false;
            });
            _SocialApi2.default.inst.on(_SocialApi2.default.EVENT_ADS_SHOW_STOPPED, this, function () {
                _SoundMan2.default.enabled = this.get_super_selected();
            });
            this.on(Laya.Event.CHANGE, this, this._onChange);
        }
    }, {
        key: "get_super_selected",
        value: function get_super_selected() {
            return _get(SoundToggle.prototype.__proto__ || Object.getPrototypeOf(SoundToggle.prototype), "selected", this);
        }
    }, {
        key: "_onChange",
        value: function _onChange() {
            this._userOptions.setOption(_UserOptions2.default.SOUND_OFF, _get(SoundToggle.prototype.__proto__ || Object.getPrototypeOf(SoundToggle.prototype), "selected", this) ? '0' : '1');
        }
    }, {
        key: "selected",
        set: function set(value) {
            _set(SoundToggle.prototype.__proto__ || Object.getPrototypeOf(SoundToggle.prototype), "selected", value, this);
            _SoundMan2.default.enabled = value;
        }
    }]);

    return SoundToggle;
}(Laya.CheckBox);

exports.default = SoundToggle;

},{"./SocialApi":51,"./SoundMan":52,"./UserOptions":58}],54:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TriangleMesh = function (_Laya$PrimitiveMesh) {
    _inherits(TriangleMesh, _Laya$PrimitiveMesh);

    function TriangleMesh(width, height) {
        _classCallCheck(this, TriangleMesh);

        var _this = _possibleConstructorReturn(this, (TriangleMesh.__proto__ || Object.getPrototypeOf(TriangleMesh)).call(this));

        var vCount = 3;
        var iCount = 3;
        var vDecl = Laya.VertexPositionNormalTexture.vertexDeclaration;
        var vFloatStride = vDecl.vertexStride / 4;
        var verts = new Float32Array(vCount * vFloatStride);
        var inds = new Uint16Array(iCount);
        var vc = 0;
        var ic = 0;
        // 0
        verts[vc++] = -width * 0.5;verts[vc++] = 0;verts[vc++] = 0;
        verts[vc++] = 0;verts[vc++] = 0;verts[vc++] = 1;
        verts[vc++] = 0;verts[vc++] = 0;
        // 1
        verts[vc++] = width * 0.5;verts[vc++] = 0;verts[vc++] = 0;
        verts[vc++] = 0;verts[vc++] = 0;verts[vc++] = 1;
        verts[vc++] = 1;verts[vc++] = 0;
        // 2
        verts[vc++] = 0;verts[vc++] = height;verts[vc++] = 0;
        verts[vc++] = 0;verts[vc++] = 0;verts[vc++] = 1;
        verts[vc++] = 0;verts[vc++] = 1;
        // Indicies
        inds[ic++] = 0;inds[ic++] = 1;inds[ic++] = 2;
        _this.setData(vDecl, verts, inds);
        return _this;
    }

    return TriangleMesh;
}(Laya.PrimitiveMesh);

exports.default = TriangleMesh;

},{}],55:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GameResultUI = require("./GameResultUI");

var _GameResultUI2 = _interopRequireDefault(_GameResultUI);

var _WndMan = require("./WndMan");

var _WndMan2 = _interopRequireDefault(_WndMan);

var _SocialApi = require("./SocialApi");

var _SocialApi2 = _interopRequireDefault(_SocialApi);

var _BaseWindow = require("./BaseWindow");

var _BaseWindow2 = _interopRequireDefault(_BaseWindow);

var _Locale = require("./Locale");

var _Locale2 = _interopRequireDefault(_Locale);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TutorUI = function (_Laya$Scene) {
    _inherits(TutorUI, _Laya$Scene);

    function TutorUI() {
        _classCallCheck(this, TutorUI);

        return _possibleConstructorReturn(this, (TutorUI.__proto__ || Object.getPrototypeOf(TutorUI)).apply(this, arguments));
    }

    _createClass(TutorUI, [{
        key: "init",
        value: function init(backend) {
            window.tutorUI = this;
            this._backend = backend;
            this._initAddToMenu();
            this.btnSound.init(backend.userOptions);
            this.devVKScores.init(backend);
            if (_SocialApi2.default.GAME_LINK) this.promoView.init(_SocialApi2.default.GAME_LINK + '?utm_source=ad_jumpcross&utm_campaign=banner1', '_blank'); //SocialApi.isOK && SocialApi.isMobile ? '_self' : '_blank');
        }
    }, {
        key: "promoShow",
        value: function promoShow() {
            //if (this._shown) return false;
            //this._shown = true;
            var showCount = Number(this._backend.userOptions.getOption('promo' + this.promoName + 'Count')) || 0;
            if (showCount >= 5) return false;
            var stampCur = Math.floor(new Date().getTime() * 0.001 / 3600 / 24).toString();
            var stampPrev = this._backend.userOptions.getOption('promo' + this.promoName + 'Stamp');
            if (stampCur == stampPrev) return false;
            this._backend.userOptions.setOption('promo' + this.promoName + 'Stamp', stampCur);
            this._backend.userOptions.setOption('promo' + this.promoName + 'Count', showCount + 1);
            return this.promoView.show();
        }
    }, {
        key: "_initAddToMenu",
        value: function _initAddToMenu() {
            if (!_SocialApi2.default.isMobile || this._isComplete(TutorUI.TUTOR_ADD_TO_MENU)) return;
            this._restartGameCount = 0;
            _WndMan2.default.inst.gameResultUI.on(_GameResultUI2.default.EVENT_WND_RESULT, this, function (res) {
                if (res == _GameResultUI2.default.WND_RESULT_RESTART) {
                    this._restartGameCount++;
                    this._tryRun(TutorUI.TUTOR_ADD_TO_MENU);
                }
            });
            _WndMan2.default.inst.friendDefeatUI.on(_BaseWindow2.default.EVENT_HIDDEN, this, this._onFriendDefeatUIHidden);
        }
    }, {
        key: "_onFriendDefeatUIHidden",
        value: function _onFriendDefeatUIHidden() {
            this._tryRun(TutorUI.TUTOR_ADD_TO_MENU);
        }
    }, {
        key: "_tryRun",
        value: function _tryRun(name) {
            setTimeout(function () {
                if (this._isComplete(name)) return;
                if (this._restartGameCount < 2) return;
                if (_WndMan2.default.inst.curWnd) return;
                this[name].visible = true;
                setTimeout(function () {
                    this._hookOnClick();
                }.bind(this), 1000);
            }.bind(this), 0.1);
        }
    }, {
        key: "_isComplete",
        value: function _isComplete(tutor) {
            return this._backend.userOptions.getOption(this._optionKey(tutor)) == TutorUI.COMPLETE_MARK;
        }
    }, {
        key: "_optionKey",
        value: function _optionKey(tutor) {
            return 'tutor.' + tutor;
        }
    }, {
        key: "_hookOnClick",
        value: function _hookOnClick() {
            this.addToMenu.once(Laya.Event.CLICK, this, this._onClickComplete);
            _SocialApi2.default.inst.logTutorComplete();
        }
    }, {
        key: "_onClickComplete",
        value: function _onClickComplete(e) {
            e.target.visible = false;
            var name = e.target.name;
            this._backend.userOptions.setOption(this._optionKey(name), TutorUI.COMPLETE_MARK);
            this.event(TutorUI.EVENT_TUTOR_COMPLETE(name));
        }
    }, {
        key: "promoView",
        get: function get() {
            return _SocialApi2.default.PROMO_TSAR_GORY ? this.promoTsar : this.promoRaccoon;
        }
    }, {
        key: "promoName",
        get: function get() {
            return _SocialApi2.default.PROMO_TSAR_GORY ? 'Tsar' : 'Raccoon';
        }
    }], [{
        key: "EVENT_TUTOR_COMPLETE",
        value: function EVENT_TUTOR_COMPLETE(name) {
            return name + '.' + TutorUI.COMPLETE_MARK;
        }
    }, {
        key: "TUTOR_ADD_TO_MENU",
        get: function get() {
            return "addToMenu";
        }
    }, {
        key: "COMPLETE_MARK",
        get: function get() {
            return "complete";
        }
    }]);

    return TutorUI;
}(Laya.Scene);

exports.default = TutorUI;

},{"./BaseWindow":12,"./GameResultUI":25,"./Locale":38,"./SocialApi":51,"./WndMan":62}],56:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UIResizeController = function () {
    function UIResizeController(root) {
        _classCallCheck(this, UIResizeController);

        this._root = root;
        Laya.stage.on(Laya.Event.RESIZE, this, this._updateSizes);
        Laya.stage.scaleMode = "full";
    }

    _createClass(UIResizeController, [{
        key: "forceUpdate",
        value: function forceUpdate() {
            this._updateSizes();
        }
    }, {
        key: "_updateSizes",
        value: function _updateSizes() {
            var scale = Laya.stage.height / Laya.stage.designHeight;
            var width = Laya.stage.width / scale;
            for (var i = 0; i < this._root.numChildren; i++) {
                var child = this._root.getChildAt(i);
                if (child.__proto__.__className == "laya.display.Scene") {
                    child.scale(scale, scale);
                    child.width = width;
                }
            }
        }
    }]);

    return UIResizeController;
}();

exports.default = UIResizeController;

},{}],57:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Backend = require("./Backend");

var _Backend2 = _interopRequireDefault(_Backend);

var _UserTimeEvent = require("./UserTimeEvent");

var _UserTimeEvent2 = _interopRequireDefault(_UserTimeEvent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var UserEvents = function (_Laya$EventDispatcher) {
    _inherits(UserEvents, _Laya$EventDispatcher);

    _createClass(UserEvents, null, [{
        key: "EVENT_CHEST",
        get: function get() {
            return "Chest";
        } // params: {money_soft:0, money_soft_max:100}

    }, {
        key: "EVENT_LIFE",
        get: function get() {
            return "Life";
        } // params: {lives:1,expired:<boolean>}

    }, {
        key: "EVENT_AD",
        get: function get() {
            return "Ad";
        } // params: {dateShow:"20190129", showBeforeLife:false, showBeforeStart:true}

    }]);

    function UserEvents(backend, data) {
        _classCallCheck(this, UserEvents);

        var _this = _possibleConstructorReturn(this, (UserEvents.__proto__ || Object.getPrototypeOf(UserEvents)).call(this));

        _this.backend = backend;
        _this.backend.on(_Backend2.default.CLIENT_USER_EVENTS, _this, _this._onEvents);
        _this._onEvents(data);
        return _this;
    }

    _createClass(UserEvents, [{
        key: "_onEvents",
        value: function _onEvents(data) {
            var events = data.events;
            for (var name in events) {
                this._processEvent(events[name], name);
            }
        }
    }, {
        key: "_processEvent",
        value: function _processEvent(list, name) {
            if (list.length) {
                var data = list[0];
                var evData = 'timeRemain' in data ? new _UserTimeEvent2.default(data) : Object.assign({ id: data.id }, data.params);
                this[name] = evData;
                this._issueEvent(name);
            }
        }
    }, {
        key: "_issueEvent",
        value: function _issueEvent(name) {
            this.event(name, this[name]);
        }
    }]);

    return UserEvents;
}(Laya.EventDispatcher);

exports.default = UserEvents;

},{"./Backend":6,"./UserTimeEvent":60}],58:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Backend = require("./Backend");

var _Backend2 = _interopRequireDefault(_Backend);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UserOptions = function () {
    _createClass(UserOptions, null, [{
        key: "SOUND_OFF",
        get: function get() {
            return "SOUND_OFF";
        }
    }]);

    function UserOptions(backend) {
        _classCallCheck(this, UserOptions);

        this._backend = backend;
        backend.on(_Backend2.default.CLIENT_USER_OPTION_GET_ALL, this, this._onUserOption);
    }

    _createClass(UserOptions, [{
        key: "getOption",
        value: function getOption(name) {
            return this._options[name];
        }
    }, {
        key: "setOption",
        value: function setOption(name, value) {
            if (this._options[name] != value) {
                this._options[name] = value;
                this._backend.userOptionSet(name, value);
            }
        }
    }, {
        key: "_onUserOption",
        value: function _onUserOption(data) {
            this._options = {};
            for (var i in data.list) {
                var e = data.list[i];
                this._options[e.key] = e.value;
            }
        }
    }, {
        key: "options",
        get: function get() {
            return this._options;
        }
    }, {
        key: "resumeState",
        get: function get() {
            var res = this.getOption("resumeState");
            return res ? JSON.parse(res) : null;
        },
        set: function set(value) {
            this.setOption("resumeState", value ? JSON.stringify(value) : "");
        }
    }]);

    return UserOptions;
}();

exports.default = UserOptions;

},{"./Backend":6}],59:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UserProfile = function () {
    function UserProfile(data) {
        _classCallCheck(this, UserProfile);

        this._data = data;
    }

    _createClass(UserProfile, [{
        key: "id",
        get: function get() {
            return this._data.id;
        }
    }, {
        key: "name",
        get: function get() {
            return this._data.name;
        }
    }, {
        key: "lang",
        get: function get() {
            return this._data.lang;
        } // optinal

    }, {
        key: "level",
        get: function get() {
            return this._data.level;
        }
    }, {
        key: "lives",
        get: function get() {
            return this._data.lives;
        } // optinal

    }, {
        key: "scores",
        get: function get() {
            return this._data.scores;
        }
    }, {
        key: "scoresMax",
        get: function get() {
            return this._data.scoresMax;
        },
        set: function set(value) {
            this._data.scoresMax = value;
        }
    }, {
        key: "moneySoft",
        get: function get() {
            return this._data.moneySoft;
        }
    }, {
        key: "isTester",
        get: function get() {
            return this._data.isTester;
        } // optinal

    }]);

    return UserProfile;
}();

exports.default = UserProfile;

},{}],60:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UserTimeEvent = function () {
    function UserTimeEvent(data) {
        _classCallCheck(this, UserTimeEvent);

        Object.assign(this, data.params);
        this.id = data.id;
        this._reset(data.timeRemain);
        //this.expairStamp = Date.now() + data.timeRemain * 1000;
    }

    _createClass(UserTimeEvent, [{
        key: '_reset',
        value: function _reset(timeRemain) {
            this.expairStamp = Date.now() + timeRemain * 1000;
        }
    }, {
        key: '_toTimeDigitStr',
        value: function _toTimeDigitStr(value) {
            value = Math.floor(value);
            return value > 9 ? String(value) : '0' + value;
        }
    }, {
        key: 'secondsRemain',
        get: function get() {
            var now = Date.now();
            return Math.ceil(Math.max(this.expairStamp - now) * 0.001);
        }
    }, {
        key: 'timerText',
        get: function get() {
            var t = this.secondsRemain;
            return this._toTimeDigitStr(t / 3600) + ':' + this._toTimeDigitStr(t / 60 % 60) + ':' + this._toTimeDigitStr(t % 60);
        }
    }, {
        key: 'expired',
        get: function get() {
            return this.secondsRemain <= 0;
        }
    }]);

    return UserTimeEvent;
}();

exports.default = UserTimeEvent;

},{}],61:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _SocialApi = require('./SocialApi');

var _SocialApi2 = _interopRequireDefault(_SocialApi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Utils = function () {
    function Utils() {
        _classCallCheck(this, Utils);
    }

    _createClass(Utils, null, [{
        key: 'fromToTransformMatrix',
        value: function fromToTransformMatrix(transformFrom, transformTo, outMatrix) {
            if (outMatrix) Laya.Matrix4x4.DEFAULT.cloneTo(outMatrix);else outMatrix = new Laya.Matrix4x4();
            if (transformTo) {
                transformTo.worldMatrix.invert(outMatrix);
                Laya.Matrix4x4.multiply(transformFrom.worldMatrix, outMatrix, outMatrix);
            } else if (transformFrom) transformFrom.cloneTo(outMatrix);
            return outMatrix;
        }
    }, {
        key: 'reparentInplace',
        value: function reparentInplace(child, newParent) {
            var m = Utils.fromToTransformMatrix(child.transform, newParent.transform);
            newParent.addChild(child);
            child.transform.localMatrix = m;
        }
    }, {
        key: 'createAnimatedCounter',
        value: function createAnimatedCounter(label, initValue) {
            return new Counter(label, initValue);
        }
    }, {
        key: 'clamp',
        value: function clamp(value, min, max) {
            return Math.max(min, Math.min(value, max));
        }
    }, {
        key: 'getChildrenOf',
        value: function getChildrenOf(node) {
            var children = [];
            var count = node.numChildren;
            for (var i = 0; i < count; i++) {
                children.push(node.getChildAt(i));
            }return children;
        }
    }, {
        key: 'removeFromParent',
        value: function removeFromParent(node) {
            var parent = node.parent;
            if (parent) parent.removeChild(node);
            return node;
        }
    }, {
        key: 'toColor',
        value: function toColor(str) {
            var c = Laya.ColorUtils.create(str);
            return new Laya.Color(c.arrColor[0], c.arrColor[1], c.arrColor[2], c.arrColor[3]);
        }
    }, {
        key: 'bitCount',
        value: function bitCount(n) {
            n = n - (n >> 1 & 0x55555555);
            n = (n & 0x33333333) + (n >> 2 & 0x33333333);
            return (n + (n >> 4) & 0xF0F0F0F) * 0x1010101 >> 24;
        }
    }, {
        key: 'startsWith',
        value: function startsWith(str, prefix) {
            return str && prefix && str.indexOf(prefix) == 0;
        }
    }, {
        key: 'endsWith',
        value: function endsWith(str, suffix) {
            return str && suffix && str.indexOf(suffix) == str.length - suffix.length;
        }
    }, {
        key: 'getSearchParam',
        value: function getSearchParam(name) {
            if (!Utils._searchParams) {
                var arr = window.location.href.split('?');
                if (arr.length < 2) Utils._searchParams = {};else {
                    arr = arr[1].split('&');
                    Utils._searchParams = arr.reduce(function (s, e) {
                        var pair = e.split('=');s[pair[0]] = pair[1];return s;
                    }, {});
                }
            }
            return Utils._searchParams[name];
        }
    }, {
        key: 'foreachChildR',
        value: function foreachChildR(root, action) {
            for (var i = 0; i < root.numChildren; i++) {
                var child = root.getChildAt(i);
                action(child);
                Utils.foreachChildR(child, action);
            }
        }
    }, {
        key: 'initProps',
        value: function initProps(root, childNames) {
            if (root.__initPropsDone) return false;
            root.__initPropsDone = true;
            Utils._initPropsR(root, root, childNames);
            return true;
        }
    }, {
        key: '_initPropsR',
        value: function _initPropsR(node, root, names) {
            for (var i = 0; i < node.numChildren; i++) {
                var child = node.getChildAt(i);
                if (names.indexOf(child.name) != -1) {
                    root[child.name] = child;
                }
                Utils._initPropsR(child, root, names);
            }
        }
    }, {
        key: 'forceUpdateLabels',
        value: function forceUpdateLabels(root) {
            for (var i = 0; i < root.numChildren; i++) {
                var child = root.getChildAt(i);
                if (child._tf && child._tf.font) child._tf.isChanged = true;else Utils.forceUpdateLabels(child);
            }
        }
    }, {
        key: 'formatPrice',
        value: function formatPrice(value, names) {
            return String(value) + ' ' + Utils.getPluralByValue(value, names);
        }
    }, {
        key: 'getPluralByValue',
        value: function getPluralByValue(value, plurals) {
            var name;
            if (value >= 5 && value <= 20) name = plurals[2];else {
                var digit = value % 10;
                name = digit == 1 ? plurals[0] : digit >= 2 && digit <= 4 ? plurals[1] : plurals[2];
            }
            return name;
        }
    }, {
        key: 'preloadImages',
        value: function preloadImages(urls) {
            for (var i in urls) {
                var url = urls[i];
                if (url && !Laya.Loader.getRes(url)) Laya.loader.load(url, null, null, Laya.Loader.IMAGE, 1, true);
            }
        }
    }, {
        key: 'apiUrl',
        get: function get() {
            if (Utils.devMode) return 'https://jumper-dev.candygrill.com/api-web/v1';
            return 'https://jump-vk-api.candygrill.com/api-web/v1';
        }
    }, {
        key: 'devMode',
        get: function get() {
            if (!("_devMode" in Utils)) {
                //var sp = new URL(document.location.href).searchParams;
                if (_SocialApi2.default.isYA) {
                    return Utils._devMode = document.location.href.indexOf('app-99506') > 0;
                }
                var sp = Utils.getSearchParam;
                var viewer_id = sp('viewer_id');
                var logged_user_id = sp('logged_user_id');
                var app_id = sp('api_id');
                Utils._devMode = Utils.endsWith(document.location.pathname, ".html")
                //|| document.location.href.indexOf("gastel") != -1
                || viewer_id == '78421410' //|| viewer_id == '746830'
                || viewer_id == '1152690' || app_id == '6753472'
                //|| logged_user_id == '443796597909' || logged_user_id == '587022090254' || logged_user_id == '236055280912' || logged_user_id == '590741026578' || logged_user_id == '536885159256';
                || sp('env') == 'dev';
            }
            return Utils._devMode;
        }
    }, {
        key: 'canUsePurchases',
        get: function get() {
            if (_SocialApi2.default.isYA) return true;
            var ua = window.navigator.userAgent || "";
            if (ua.indexOf("iPhone") < 0) return true;
            if (_SocialApi2.default.isVK) return !_SocialApi2.default.isMobile;
            if (_SocialApi2.default.isOK) return ua.indexOf("OkApp") < 0;
            return true;
        }
    }]);

    return Utils;
}();

exports.default = Utils;

var Counter = function () {
    function Counter(label, initValue) {
        _classCallCheck(this, Counter);

        this._label = label;
        if (!initValue) initValue = 0;
        this._value = initValue;
        this.animValue = initValue;
    }

    _createClass(Counter, [{
        key: 'value',
        get: function get() {
            return this._value;
        },
        set: function set(value) {
            this._animValue = this._value;
            this._value = value;
            Laya.Tween.to(this, { animValue: value }, 500);
        }
    }, {
        key: 'animValue',
        get: function get() {
            return this._animValue;
        },
        set: function set(value) {
            this._animValue = value;
            this._label.text = String(Math.ceil(value));
        }
    }]);

    return Counter;
}();

},{"./SocialApi":51}],62:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BaseWindow = require("./BaseWindow");

var _BaseWindow2 = _interopRequireDefault(_BaseWindow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var WndMan = function (_Laya$EventDispatcher) {
    _inherits(WndMan, _Laya$EventDispatcher);

    _createClass(WndMan, null, [{
        key: "EVENT_WND_CHANGED",
        get: function get() {
            return "WND_CHANGED";
        }
    }, {
        key: "inst",
        get: function get() {
            if (!WndMan._inst) {
                WndMan._inst = new WndMan();
            }
            return WndMan._inst;
        }
    }]);

    function WndMan() {
        _classCallCheck(this, WndMan);

        var _this = _possibleConstructorReturn(this, (WndMan.__proto__ || Object.getPrototypeOf(WndMan)).call(this));

        window.WndMan = _this;
        _this._windows = [];
        _this._stack = [];
        _this._curWnd = null;
        _this._blocker = new Laya.Scene();
        _this._blocker.width = 4000; // Laya.stage.width;
        _this._blocker.height = 4000; // Laya.stage.height;
        _this._blocker.visible = false;
        _this._blocker.alpha = 0.2;
        _this._blocker.on(Laya.Event.RESIZE, _this, _this._onBlockerResize);
        _this._onBlockerResize();
        return _this;
    }

    _createClass(WndMan, [{
        key: "add",
        value: function add(wnd) {
            if (this._windows.indexOf(wnd) < 0) {
                this[wnd.name] = wnd;
                this._windows.push(wnd);
                wnd.hide();
                wnd.on(_BaseWindow2.default.EVENT_SHOWN, this, this._onWindowShown);
                wnd.on(_BaseWindow2.default.EVENT_HIDDEN, this, this._onWindowHidden);
                //wnd.on(Laya.Event.CLICK, wnd, function() { this.hide(); });
                this._updateBlockerPos();
            }
        }
    }, {
        key: "_updateBlockerPos",
        value: function _updateBlockerPos() {
            if (!this._windows.length) return;
            var minIdx = 0;
            for (var i in this._windows) {
                var w = this._windows[i];
                minIdx = Math.min(minIdx, w.parent.getChildIndex(w));
            }
            this._windows[0].parent.addChildAt(this._blocker, minIdx);
        }
    }, {
        key: "_onWindowShown",
        value: function _onWindowShown(wnd) {
            if (this._eventProcessing) return;
            this._eventProcessing = true;
            if (this.curWnd) {
                this._stack.push(this.curWnd);
                this.curWnd.hide();
            }
            this._setCurWnd(wnd);
            this._eventProcessing = false;
            this.event(WndMan.EVENT_WND_CHANGED, this.curWnd);
        }
    }, {
        key: "_onWindowHidden",
        value: function _onWindowHidden(wnd) {
            if (this._eventProcessing) return;
            this._eventProcessing = true;
            if (this._stack.length) {
                this._setCurWnd(this._stack.pop());
                this.curWnd.show();
            } else this._setCurWnd(null);
            this._eventProcessing = false;
            this.event(WndMan.EVENT_WND_CHANGED, this.curWnd);
        }
    }, {
        key: "_setCurWnd",
        value: function _setCurWnd(value) {
            this._curWnd = value;
            this._blocker.visible = value != null;
            // if (this._blocker.visible) {
            //     this._blocker.width = Laya.stage.width;
            //     this._blocker.height = Laya.stage.height;
            // }
        }
    }, {
        key: "_onBlockerResize",
        value: function _onBlockerResize() {
            this._blocker.graphics.clear();
            this._blocker.graphics.drawRect(0, 0, this._blocker.width, this._blocker.height / this._blocker.scaleY, "0xffffff");
        }
    }, {
        key: "curWnd",
        get: function get() {
            return this._curWnd;
        }
    }]);

    return WndMan;
}(Laya.EventDispatcher);

exports.default = WndMan;

},{"./BaseWindow":12}],63:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _YandexProfileStorage = require('./YandexProfileStorage');

var _YandexProfileStorage2 = _interopRequireDefault(_YandexProfileStorage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ysdk = window.ysdk;
var ysdk_player = window.ysdk_player;
var ysdk_data = window.ysdk_data;
var ym = window.ym;

var localStorage = [];
try {
    localStorage = window.localStorage;
} catch (e) {
    console.warn('window.localStorage is not accessable');
};

var Yandex = function () {

    // static get inst() {
    //     if (!Yandex._inst)
    //         Yandex._inst = new Yandex();
    //     return Yandex._inst;
    // }

    function Yandex(validator) {
        _classCallCheck(this, Yandex);

        this._validator = validator;
        window.Yandex = this;
        this.counter = 70986439;
        if (window.ysdk_player) this.profileStorage = new _YandexProfileStorage2.default(this);
        if (ysdk_data) this.ysdk_data_string = JSON.stringify(ysdk_data);
        this._currencyCode = 'RUB';
        ysdk.getPayments({ signed: true }).then(function (payments) {
            this._payments = payments;
            payments.getCatalog().then(function (catalog) {
                // Search short name in catalog (from full one 'com.candygrill.jump.pack*') and fill its price (card.ya)
                for (var i in validator.bankCards) {
                    var card = validator.bankCards[i];
                    var id = card.name.split('.')[3];
                    var c = catalog.filter(function (c) {
                        return c.id == id;
                    })[0];
                    if (c) {
                        card.ya = Number(c.price.match(/\d+/)[0]);
                        if (c.priceCurrencyCode) this._currencyCode = c.priceCurrencyCode;
                    }
                }
            }.bind(this));
            if (window.ysdk_player) this._processNotConsumed();
        }.bind(this));
        this.logInstall();
    }

    _createClass(Yandex, [{
        key: 'isAdsPayed',
        value: function isAdsPayed() {
            return this._validator.bankCards[0] && this._donated >= this._validator.bankCards[0].ya;
        }
    }, {
        key: 'purchase',
        value: function purchase(card) {
            if (this.prePurchase()) {
                return new Promise(function (resolve) {
                    this._payments.purchase(card.shortName).then(function (purchase) {
                        this._addPurchase(purchase.token, purchase.signature, card);
                        this._validate(purchase, card).then(function (ok) {
                            resolve(ok);
                        });
                        this.logPurchase();
                    }.bind(this));
                }.bind(this));
            } else {
                return Promise.resolve(false);
            }
        }
    }, {
        key: 'prePurchase',
        value: function prePurchase() {
            if (window.ysdk_player) return true;
            ysdk.auth.openAuthDialog().then(function () {
                location.reload();
            });
            return false;
        }
    }, {
        key: 'logInstall',
        value: function logInstall() {
            this._logOnceYM('jmp_install');
        }
    }, {
        key: 'logPurchase',
        value: function logPurchase() {
            this._logYM('jmp_purchase');
        }
    }, {
        key: 'logTutor',
        value: function logTutor() {
            this._logOnceYM('jmp_tutor');
        }
    }, {
        key: 'logLevel',
        value: function logLevel(level) {
            if (this.lastLoglevel == level) return;
            this.lastLoglevel = level;
            ysdk.getLeaderboards().then(function (lb) {
                lb.setLeaderboardScore('level', level);
            });
        }
    }, {
        key: 'logAdRewarded',
        value: function logAdRewarded() {
            this._logYM('jmp_adview');
        }
    }, {
        key: 'getData',
        value: function getData(key) {
            return ysdk_data && ysdk_data[key];
        }
    }, {
        key: 'setData',
        value: function setData(key, value, flush) {
            if (!ysdk_data) return;
            ysdk_data[key] = value;
            var ysdk_data_string = JSON.stringify(ysdk_data);
            if (ysdk_data_string != this.ysdk_data_string) {
                this.ysdk_data_string = ysdk_data_string;
                ysdk_player.setData(ysdk_data, flush);
            }
        }
    }, {
        key: '_processNotConsumed',
        value: function _processNotConsumed() {
            console.log('[Yandex] _processNotConsumed');
            this._payments.getPurchases().then(function (purchases) {
                if (purchases.length) {
                    var lastPromise = null;
                    for (var i in purchases) {
                        lastPromise = this._validate(purchases[i]);
                    }lastPromise.then(function () {
                        this._flushPurchases();
                    }.bind(this));
                }
            }.bind(this));
        }
    }, {
        key: '_validate',
        value: function _validate(purchase, card) {
            return new Promise(function (resolve) {
                if (!card) card = this._getPurchaseCard(purchase.purchaseToken) || this._validator.bankCards[0];
                var sign = purchase.signature || this._getPurchase(purchase.purchaseToken);
                console.log('[Yandex] validate purchase productID=' + purchase.productID + ' purchaseToken=' + purchase.purchaseToken + ' signature=' + sign);
                var purchaseInfo = { paymentType: 'yandex', signature: sign };
                return this._validator.validatePurchase({
                    name: purchase.productID,
                    info: purchaseInfo,
                    hash: purchase.purchaseToken
                }, card).then(function (ok) {
                    this._removePurchase(purchase.purchaseToken);
                    this._payments.consumePurchase(purchase.purchaseToken);
                    if (ok) this._donated += Number(card.ya) || 0;
                    resolve(ok);
                }.bind(this)).catch(function (reason) {
                    console.error('[Yandex] validate', reason);
                    resolve(false);
                }.bind(this));
            }.bind(this));
        }
    }, {
        key: '_getPurchase',
        value: function _getPurchase(token) {
            return this._getPurchases()[token];
        }
    }, {
        key: '_getPurchaseCard',
        value: function _getPurchaseCard(token) {
            var id = this._getPurchases()[token + '_card'];
            return this._validator.bankCards.filter(function (c) {
                return c.id == id;
            })[0] || this._validator.bankCards[0];
        }
    }, {
        key: '_getPurchases',
        value: function _getPurchases() {
            return this.getData('purchases') || {};
        }
    }, {
        key: '_setPurchases',
        value: function _setPurchases(purchases) {
            this.setData('purchases', purchases);
        }
    }, {
        key: '_flushPurchases',
        value: function _flushPurchases() {
            this.setData('purchases', this._getPurchases(), true);
        }
    }, {
        key: '_addPurchase',
        value: function _addPurchase(token, signature, card) {
            var purchases = this._getPurchases();
            purchases[token] = signature;
            purchases[token + '_card'] = card.id;
            this._setPurchases(purchases);
        }
    }, {
        key: '_removePurchase',
        value: function _removePurchase(token) {
            var purchases = this._getPurchases();
            delete purchases[token];
            delete purchases[token + '_card'];
            this._setPurchases(purchases);
        }
    }, {
        key: '_logOnceYM',
        value: function _logOnceYM(goal) {
            var KEY = 'ym_logged_' + goal;
            var localValue = '';
            var logged = localStorage[KEY] || ysdk_data && ysdk_data[KEY];
            if (!logged) this._logYM(goal);
            localStorage[KEY] = 1;
            this.setData(KEY, 1, true);
        }
    }, {
        key: '_logYM',
        value: function _logYM(goal) {
            if (!ym) return;
            console.log('[YandexMetrics] goal reached: ' + goal);
            ym(this.counter, 'reachGoal', goal);
        }
    }, {
        key: 'currencyCode',
        get: function get() {
            return this._currencyCode;
        }
    }, {
        key: '_donated',
        get: function get() {
            return this.profileStorage && this.profileStorage.get('donated') || 0;
        },
        set: function set(value) {
            this.profileStorage && this.profileStorage.set('donated', value);
        }
    }]);

    return Yandex;
}();

exports.default = Yandex;

},{"./YandexProfileStorage":64}],64:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var YandexProfileStorage = function () {
    function YandexProfileStorage(yandex) {
        _classCallCheck(this, YandexProfileStorage);

        this.yandex = yandex;
        this.profile = this.yandex.getData('profile') || {};
    }

    _createClass(YandexProfileStorage, [{
        key: 'get',
        value: function get(key) {
            return this.profile[key];
        }
    }, {
        key: 'set',
        value: function set(key, value) {
            this.profile[key] = value;
            this.yandex.setData('profile', this.profile);
        }
    }]);

    return YandexProfileStorage;
}();

exports.default = YandexProfileStorage;

},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
