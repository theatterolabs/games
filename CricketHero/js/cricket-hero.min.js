var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var CricketHero;
(function (CricketHero) {
    var AchievementsManager = (function () {
        function AchievementsManager() {
        }
        AchievementsManager.init = function (game) {
            AchievementsManager.game = game;
            CricketHero.GameManager.getStorageData(CricketHero.GameConstants.ACHIEVEMENTS_DATA, function (data) {
                if (data) {
                    CricketHero.GameVars.achievementsData = JSON.parse(data);
                }
                else {
                    CricketHero.GameVars.achievementsData = {
                        award_30_bats: false,
                        award_50_bats: false,
                        award_75_bats: false,
                        award_100_bats: false,
                        award_25_smashedEggs: false,
                        award_50_smashedEggs: false,
                        award_25_bombsSmashed: false,
                        award_50_bombsSmashed: false
                    };
                }
            }, function (error) {
                CricketHero.GameManager.log("error retriving saved game data.", error);
            });
        };
        AchievementsManager.onGameStart = function () {
            AchievementsManager.eggsSmashed = 0;
            AchievementsManager.bombsSmashed = 0;
            AchievementsManager.refereesSmashed = 0;
            AchievementsManager.onFireTimes = 0;
        };
        AchievementsManager.onEggSmashed = function () {
            AchievementsManager.eggsSmashed++;
        };
        AchievementsManager.onBombSmashed = function () {
            AchievementsManager.bombsSmashed++;
        };
        AchievementsManager.onRefereeSmashed = function () {
            AchievementsManager.refereesSmashed++;
        };
        AchievementsManager.onFireSet = function () {
            AchievementsManager.onFireTimes++;
        };
        AchievementsManager.onGameOver = function () {
            if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_MINIJUEGOS) {
                miniplaySend2API("plays", 1);
                miniplaySend2API("last", CricketHero.GameVars.matchData.score);
                miniplaySend2API("best", CricketHero.GameVars.gameData.score);
                miniplaySend2API("eggs", AchievementsManager.eggsSmashed);
                miniplaySend2API("bombs", AchievementsManager.bombsSmashed);
                miniplaySend2API("extra", AchievementsManager.refereesSmashed);
                miniplaySend2API("onfire", AchievementsManager.onFireTimes);
            }
            else if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_LAGGED) {
                var api_awards = [];
                if (!CricketHero.GameVars.achievementsData.award_30_bats && CricketHero.GameVars.gameData.score >= 30) {
                    CricketHero.GameVars.achievementsData.award_30_bats = true;
                    api_awards.push("cricket_hero_vja001");
                    CricketHero.GameManager.log("achievement 30 bats");
                }
                if (!CricketHero.GameVars.achievementsData.award_50_bats && CricketHero.GameVars.gameData.score >= 50) {
                    CricketHero.GameVars.achievementsData.award_50_bats = true;
                    api_awards.push("cricket_hero_vja002");
                    CricketHero.GameManager.log("achievement 50 bats");
                }
                if (!CricketHero.GameVars.achievementsData.award_75_bats && CricketHero.GameVars.gameData.score >= 75) {
                    CricketHero.GameVars.achievementsData.award_75_bats = true;
                    api_awards.push("cricket_hero_vja003");
                    CricketHero.GameManager.log("achievement 75 bats");
                }
                if (!CricketHero.GameVars.achievementsData.award_100_bats && CricketHero.GameVars.gameData.score >= 100) {
                    CricketHero.GameVars.achievementsData.award_100_bats = true;
                    api_awards.push("cricket_hero_vja004");
                    CricketHero.GameManager.log("achievement 100 bats");
                }
                if (!CricketHero.GameVars.achievementsData.award_25_smashedEggs && CricketHero.GameVars.gameData.tomatoesSmashed >= 25) {
                    CricketHero.GameVars.achievementsData.award_25_smashedEggs = true;
                    api_awards.push("cricket_hero_vja005");
                    CricketHero.GameManager.log("achievement 25 smashed eggs");
                }
                if (!CricketHero.GameVars.achievementsData.award_50_smashedEggs && CricketHero.GameVars.gameData.tomatoesSmashed >= 50) {
                    CricketHero.GameVars.achievementsData.award_50_smashedEggs = true;
                    CricketHero.GameManager.log("achievement 50 smashed eggs");
                }
                if (!CricketHero.GameVars.achievementsData.award_25_bombsSmashed && CricketHero.GameVars.gameData.bombsSmashed >= 25) {
                    CricketHero.GameVars.achievementsData.award_25_bombsSmashed = true;
                    CricketHero.GameManager.log("achievement 25 explosions");
                }
                if (!CricketHero.GameVars.achievementsData.award_50_bombsSmashed && CricketHero.GameVars.gameData.bombsSmashed >= 50) {
                    CricketHero.GameVars.achievementsData.award_50_bombsSmashed = true;
                    api_awards.push("cricket_hero_vja008");
                    CricketHero.GameManager.log("achievement 50 explosions");
                }
                if (api_awards.length > 0) {
                    LaggedAPI.Achievements.save(api_awards, function (response) {
                        if (response.success) {
                            CricketHero.GameManager.log("achievement saved");
                        }
                        else {
                            CricketHero.GameManager.log(response.errormsg);
                        }
                    });
                    CricketHero.GameManager.setStorageData(CricketHero.GameConstants.ACHIEVEMENTS_DATA, CricketHero.GameVars.achievementsData, function () {
                        CricketHero.GameManager.log("achievements data successfully saved");
                    }, function (error) {
                        CricketHero.GameManager.log("error saving achievements data", error);
                    });
                }
            }
        };
        return AchievementsManager;
    }());
    CricketHero.AchievementsManager = AchievementsManager;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var AudioManager = (function () {
        function AudioManager() {
        }
        AudioManager.init = function (game) {
            AudioManager.game = game;
            AudioManager.timeLastEffectPlayed = 0;
            AudioManager.lastEffectPlayed = null;
            AudioManager.loopPlayingKey = null;
            AudioManager.audioSprite = AudioManager.game.add.audioSprite("audio-sprite");
            AudioManager.game.sound.mute = CricketHero.GameVars.gameData.muted;
        };
        AudioManager.mute = function () {
            CricketHero.GameVars.gameData.muted = true;
            AudioManager.game.sound.mute = CricketHero.GameVars.gameData.muted;
            CricketHero.GameManager.writeGameData();
        };
        AudioManager.unmute = function () {
            CricketHero.GameVars.gameData.muted = false;
            AudioManager.game.sound.mute = CricketHero.GameVars.gameData.muted;
            CricketHero.GameManager.writeGameData();
        };
        AudioManager.playSound = function (key, loop, volume) {
            loop = loop || false;
            if (loop) {
                if (AudioManager.loopPlayingKey && (AudioManager.loopPlayingKey !== key)) {
                    AudioManager.stopSound(AudioManager.loopPlayingKey, false, true);
                }
                if (AudioManager.loopPlayingKey !== key) {
                    try {
                        AudioManager.audioSprite.play(key, volume);
                    }
                    catch (error) {
                        CricketHero.GameManager.log("Audio no encontrado:" + key, error);
                    }
                }
                AudioManager.loopPlayingKey = key;
            }
            else {
                if (AudioManager.lastEffectPlayed === key) {
                    if (AudioManager.game.time.time - AudioManager.timeLastEffectPlayed > 200) {
                        AudioManager.timeLastEffectPlayed = AudioManager.game.time.time;
                        try {
                            AudioManager.audioSprite.play(key, volume);
                        }
                        catch (error) {
                            CricketHero.GameManager.log("Audio no encontrado:" + key, error);
                        }
                    }
                }
                else {
                    AudioManager.timeLastEffectPlayed = AudioManager.game.time.time;
                    AudioManager.lastEffectPlayed = key;
                    try {
                        AudioManager.audioSprite.play(key, volume);
                    }
                    catch (error) {
                        CricketHero.GameManager.log("Audio no encontrado:" + key, error);
                    }
                }
            }
        };
        AudioManager.stopSound = function (key, fade, loop) {
            if (key === null || typeof key === "undefined") {
                return;
            }
            if (fade) {
                var sound = this.audioSprite.get(key);
                sound.fadeOut(850);
            }
            else {
                AudioManager.audioSprite.stop(key);
            }
            if (loop) {
                AudioManager.loopPlayingKey = null;
            }
        };
        return AudioManager;
    }());
    CricketHero.AudioManager = AudioManager;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var Game = (function (_super) {
        __extends(Game, _super);
        function Game() {
            var _this = this;
            var renderer;
            var ua = navigator.userAgent;
            if (ua.match(/iPhone/i) || ua.match(/iPad/i) || ua.match(/iPod/i) || /Kindle/i.test(ua) || /Silk/i.test(ua) || /KFTT/i.test(ua) || /KFOT/i.test(ua) || /KFJWA/i.test(ua) || /KFJWI/i.test(ua) || /KFSOWI/i.test(ua) || /KFTHWA/i.test(ua) || /KFTHWI/i.test(ua) || /KFAPWA/i.test(ua) || /KFAPWI/i.test(ua)) {
                renderer = Phaser.CANVAS;
            }
            else {
                renderer = Phaser.AUTO;
            }
            _this = _super.call(this, CricketHero.GameConstants.GAME_WIDTH, CricketHero.GameConstants.GAME_HEIGHT, renderer, "canvas", null, false, true) || this;
            Game.currentInstance = _this;
            _this.state.add("Boot", CricketHero.Boot, true);
            _this.state.add("PreLoader", CricketHero.PreLoader, false);
            _this.state.add("MatchState", CricketHero.MatchState, false);
            _this.state.add("DisplayDevelopmentState", CricketHero.DisplayDevelopmentState, false);
            _this.state.add("LevelSelectionState", CricketHero.LevelSelectionState, false);
            _this.state.start("Boot");
            return _this;
        }
        Game.pause = function () {
            if (typeof Game.currentInstance !== "undefined") {
                Game.currentInstance.paused = true;
            }
        };
        Game.resume = function () {
            if (typeof Game.currentInstance !== "undefined") {
                Game.currentInstance.paused = false;
            }
        };
        return Game;
    }(Phaser.Game));
    CricketHero.Game = Game;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var GameConstants = (function () {
        function GameConstants() {
        }
        GameConstants.VERSION = "1.2";
        GameConstants.DEVELOPMENT = false;
        GameConstants.DEBUG = false;
        GameConstants.VERBOSE = false;
        GameConstants.SCOREBOARD_DEVELOPMENT = false;
        GameConstants.GAME_WIDTH = 480;
        GameConstants.GAME_HEIGHT = 640;
        GameConstants.LAGUANGE_EN = "en";
        GameConstants.LANGUAGE_PT = "pt";
        GameConstants.LANGUAGE_HI = "hi";
        GameConstants.HOMERUN_4 = "home run 4";
        GameConstants.HOMERUN_6 = "home run 6";
        GameConstants.PRICE_CONTINUE = 10;
        GameConstants.SPONSOR_LAGGED = "lagged";
        GameConstants.SPONSOR_GAME_DISTRIBUTION = "gamedistribution";
        GameConstants.SPONSOR_POKI = "poki";
        GameConstants.SPONSOR_MINIJUEGOS = "minijuegos";
        GameConstants.SPONSOR_GAMEZOP = "gamezop";
        GameConstants.SPONSOR_GAMEPIND = "gamepind";
        GameConstants.SPONSOR_GAMEPIX = "gamepix";
        GameConstants.SPONSOR_FUNO = "funo";
        GameConstants.SPONSOR_INLOGIC = "inlogic";
        GameConstants.SPONSOR_PLAYS = "plays.org";
        GameConstants.SPONSOR_NONE = "none";
        GameConstants.SPONSOR = GameConstants.SPONSOR_PLAYS;
        GameConstants.BITMAP_SIZE = 64;
        GameConstants.LEFT = "left";
        GameConstants.RIGHT = "right";
        GameConstants.CENTER = "center";
        GameConstants.BLACK_SQUARE = "black-square";
        GameConstants.GRAY_SQUARE = "gray-square";
        GameConstants.LIGHT_GRAY_SQUARE = "light_gray-square";
        GameConstants.WHITE_SQUARE = "white-square";
        GameConstants.BLUE_SQUARE = "blue-square";
        GameConstants.RED_SQUARE = "red-square";
        GameConstants.DARK_ORANGE_SQUARE = "dark-orange-square";
        GameConstants.YELLOW_SQUARE = "yellow-square";
        GameConstants.GREEN_SQUARE = "green-square";
        GameConstants.DARK_BLUE_SQUARE = "dark-blue-square";
        GameConstants.GAME_DATA = "cricket-hero-game-data";
        GameConstants.ACHIEVEMENTS_DATA = "cricket-hero-achievements-data";
        return GameConstants;
    }());
    CricketHero.GameConstants = GameConstants;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var GameManager = (function () {
        function GameManager() {
        }
        GameManager.init = function (game) {
            GameManager.game = game;
            CricketHero.GameVars.randomGenerator = new Phaser.RandomDataGenerator([game.time.time]);
            CricketHero.GameVars.showZeppelinOrAeroplane = Math.random() > .85;
            CricketHero.GameVars.zeppelinOrAeroplaneShown = false;
            CricketHero.GameVars.isZeppelin = false;
            CricketHero.GameVars.replayed = false;
            CricketHero.GameVars.editingLevels = false;
            CricketHero.GameVars.coinsFrenzyShown = false;
            CricketHero.GameVars.avatarsLoaded = false;
            CricketHero.GameVars.gameDistributionPreRollAdShown = null;
            CricketHero.GameVars.enterGameDirectly = false;
            if (CricketHero.GameVars.enterGameDirectly) {
                CricketHero.GameVars.matchData = {
                    credits: 275,
                    score: 25,
                    itemsThrown: 0,
                    missedBalls: 1,
                    upscaled: false,
                    ballsStreak: 0,
                    fairyShown: false,
                    burnt: false,
                    continued: false,
                    heroSide: CricketHero.GameConstants.CENTER,
                    targetCircles: 1,
                    eventsData: {
                        eventsSet: [
                            { ball_number: 12, state: "activate_home_run" },
                            { ball_number: 14, state: "deactivate_home_run" },
                            { ball_number: 20, state: "scale_up" },
                            { ball_number: 25, state: "scale_down" },
                            { ball_number: 38, state: "scale_up" }
                        ],
                        i: 0,
                        deltaItems: 0,
                        rounds: 1
                    }
                };
            }
            else {
                CricketHero.GameVars.matchData = {
                    credits: 0,
                    score: 0,
                    itemsThrown: 0,
                    missedBalls: 0,
                    upscaled: false,
                    ballsStreak: 0,
                    fairyShown: false,
                    burnt: false,
                    continued: false,
                    heroSide: CricketHero.GameConstants.CENTER,
                    targetCircles: 1,
                    eventsData: {
                        eventsSet: [
                            { ball_number: 8, state: "activate_2_circles" },
                            { ball_number: 12, state: "activate_home_run" },
                            { ball_number: 14, state: "deactivate_home_run" },
                            { ball_number: 20, state: "scale_up" },
                            { ball_number: 25, state: "scale_down" },
                            { ball_number: 38, state: "scale_up" }
                        ],
                        i: 0,
                        deltaItems: 0,
                        rounds: 1
                    }
                };
            }
            GameManager.readGameData();
        };
        GameManager.readGameData = function () {
            GameManager.getStorageData(CricketHero.GameConstants.GAME_DATA, function (data) {
                if (data) {
                    CricketHero.GameVars.gameData = JSON.parse(data);
                    CricketHero.GameVars.gameData.totalSessions++;
                    GameManager.writeGameData();
                }
                else {
                    CricketHero.GameVars.gameData = {
                        muted: false,
                        credits: 10,
                        score: 0,
                        lastScore: 0,
                        nextRelevantRecord: 20,
                        twoCirclesTutorialShown: false,
                        hitTutorialShown: false,
                        handIconOnStartShown: false,
                        matchesPlayed: 0,
                        totalSessions: 1,
                        ballsHit: 0,
                        ballsMissed: 0,
                        tomatoesSmashed: 0,
                        bombsSmashed: 0,
                        language: CricketHero.GameConstants.LAGUANGE_EN
                    };
                }
                if (CricketHero.GameConstants.DEVELOPMENT) {
                    CricketHero.GameVars.gameData.credits = 100;
                }
                if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_POKI) {
                    PokiSDK.gameLoadingStart();
                }
                GameManager.game.state.start("PreLoader", true, false);
            }, function (error) {
                GameManager.log("error retriving saved game data.", error);
            });
        };
        GameManager.onGameAssetsLoaded = function () {
            if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_POKI) {
                PokiSDK.gameLoadingFinished();
            }
            if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_GAMEPIX) {
                GamePix.game.gameLoaded(function () {
                    CricketHero.AudioManager.init(GameManager.game);
                    CricketHero.AchievementsManager.init(GameManager.game);
                    GameManager.game.state.start("MatchState", true, false);
                });
            }
            else {
                CricketHero.AudioManager.init(GameManager.game);
                CricketHero.AchievementsManager.init(GameManager.game);
                GameManager.game.state.start("MatchState", true, false);
            }
        };
        GameManager.changeLanguege = function (language) {
            CricketHero.GameVars.gameData.language = language;
            GameManager.game.state.start("MatchState", true, false);
        };
        GameManager.startMatch = function () {
            CricketHero.GameVars.playing = true;
            CricketHero.GameVars.matchData.continued = false;
            if (!CricketHero.GameVars.gameData.handIconOnStartShown) {
                CricketHero.GameVars.gameData.handIconOnStartShown = true;
                GameManager.writeGameData();
            }
            CricketHero.GameVars.matchData = {
                credits: CricketHero.GameVars.gameData.credits,
                score: 0,
                itemsThrown: 0,
                missedBalls: 0,
                upscaled: false,
                ballsStreak: 0,
                fairyShown: false,
                burnt: false,
                continued: false,
                heroSide: CricketHero.GameConstants.CENTER,
                targetCircles: 1,
                eventsData: {
                    eventsSet: [
                        { ball_number: 8, state: "activate_2_circles" },
                        { ball_number: 12, state: "activate_home_run" },
                        { ball_number: 14, state: "deactivate_home_run" },
                        { ball_number: 20, state: "scale_up" },
                        { ball_number: 25, state: "scale_down" },
                        { ball_number: 38, state: "scale_up" }
                    ],
                    i: 0,
                    deltaItems: 0,
                    rounds: 1
                }
            };
            if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_POKI) {
                PokiSDK.gameplayStart();
                GameManager.game.paused = true;
                PokiSDK.commercialBreak()
                    .then(function () {
                    GameManager.game.paused = false;
                    CricketHero.MatchState.currentInstance.startMatch();
                });
                return;
            }
            if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_GAME_DISTRIBUTION && CricketHero.GameVars.gameDistributionPreRollAdShown === false) {
                CricketHero.GameVars.gameDistributionPreRollAdShown = true;
                if (typeof gdsdk !== "undefined" && typeof gdsdk.showBanner !== "undefined") {
                    gdsdk.showBanner();
                }
            }
            CricketHero.AchievementsManager.onGameStart();
            CricketHero.MatchState.currentInstance.startMatch();
            GameManager.log("START MATCH");
        };
        GameManager.zeppelinAeroplaneShown = function () {
            CricketHero.GameVars.zeppelinOrAeroplaneShown = true;
        };
        GameManager.playSelectelBallSequence = function (seq) {
            CricketHero.GameVars.editingLevels = true;
            CricketHero.BallsManager.currentShotsSequence = seq;
            CricketHero.GameVars.enterGameDirectly = true;
            GameManager.game.state.start("MatchState", true, false);
        };
        GameManager.goToSequenceSelectionScene = function () {
            GameManager.game.state.start("LevelSelectionState", true, false);
        };
        GameManager.replay = function () {
            if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_POKI) {
                GameManager.game.paused = true;
                PokiSDK.commercialBreak()
                    .then(function () {
                    GameManager.game.paused = false;
                });
            }
            if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_GAMEPIX) {
                GamePix.game.ping("level_complete", { score: CricketHero.GameVars.gameData.score, level: 0, achievements: {} });
            }
            CricketHero.GameVars.replayed = true;
            GameManager.game.time.events.resume();
            GameManager.game.state.start("MatchState", true, false);
        };
        GameManager.gameOver = function () {
            CricketHero.GameVars.newRecord = false;
            CricketHero.GameVars.relevantRecord = false;
            if (CricketHero.GameVars.matchData.score > CricketHero.GameVars.gameData.score) {
                if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_LAGGED) {
                    var boardinfo = {};
                    boardinfo.score = CricketHero.GameVars.matchData.score;
                    boardinfo.board = "cricket_hero_gmhsrdd";
                    LaggedAPI.Scores.save(boardinfo, function (response) {
                        if (response.success) {
                            console.log("high score saved");
                        }
                        else {
                            console.log(response.errormsg);
                        }
                    });
                }
                if (CricketHero.GameVars.gameData.score !== 0) {
                    CricketHero.GameVars.newRecord = true;
                    if (CricketHero.GameVars.matchData.score >= CricketHero.GameVars.gameData.nextRelevantRecord) {
                        CricketHero.GameVars.gameData.nextRelevantRecord = Math.floor(CricketHero.GameVars.gameData.nextRelevantRecord / 10) * 10 + 10;
                        CricketHero.GameVars.relevantRecord = true;
                    }
                    else {
                        CricketHero.GameVars.relevantRecord = false;
                    }
                }
                CricketHero.GameVars.gameData.score = CricketHero.GameVars.matchData.score;
            }
            CricketHero.GameVars.gameData.lastScore = CricketHero.GameVars.matchData.score;
            CricketHero.AchievementsManager.onGameOver();
            GameManager.writeGameData();
            CricketHero.MatchState.currentInstance.gameOver();
            if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_LAGGED) {
                GameManager.game.time.events.add(300, function () {
                    if (typeof prerollStart === "undefined") {
                        GameManager.log("skip ad, prerollStart not found");
                    }
                    else {
                        GameManager.game.paused = true;
                        LaggedAPI.APIAds.show("interstitial", "cricket-hero", "cricket-hero-game.jpg", function (response) {
                            if (response.success) {
                                GameManager.game.paused = false;
                                GameManager.log("ad done");
                            }
                            else {
                                GameManager.game.paused = false;
                                GameManager.log("ad error, continue");
                            }
                        });
                    }
                });
            }
            if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_POKI) {
                PokiSDK.gameplayStop();
                if (CricketHero.GameVars.relevantRecord) {
                    var intensity = void 0;
                    if (CricketHero.GameVars.gameData.score > 50) {
                        intensity = 1;
                    }
                    else if (CricketHero.GameVars.gameData.score > 30) {
                        intensity = .5;
                    }
                    else {
                        intensity = .25;
                    }
                    PokiSDK.happyTime(intensity);
                }
            }
            if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_GAME_DISTRIBUTION) {
                if (typeof gdsdk !== "undefined" && typeof gdsdk.showBanner !== "undefined") {
                    gdsdk.showBanner();
                }
            }
        };
        GameManager.continueButtonPressed = function () {
            CricketHero.GameVars.matchData.continued = true;
            CricketHero.GameVars.gameData.credits -= CricketHero.GameConstants.PRICE_CONTINUE;
            CricketHero.MatchState.currentInstance.removeGameOverLayer();
            CricketHero.AchievementsManager.onGameStart();
            CricketHero.MatchManager.resumeGameAfterContinue();
            if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_POKI) {
                PokiSDK.gameplayStart();
            }
        };
        GameManager.onPause = function () {
            GameManager.game.sound.mute = true;
        };
        GameManager.onResume = function () {
            if (!CricketHero.GameVars.gameData.muted) {
                GameManager.game.sound.mute = false;
            }
        };
        GameManager.log = function (text, error) {
            if (!CricketHero.GameConstants.VERBOSE) {
                return;
            }
            if (error) {
                console.error(text + ":", error);
            }
            else {
                console.log(text);
            }
        };
        GameManager.writeGameData = function () {
            GameManager.setStorageData(CricketHero.GameConstants.GAME_DATA, CricketHero.GameVars.gameData, function () {
            }, function (error) {
            });
        };
        GameManager.getStorageData = function (key, successCb, failureCb) {
            var data;
            if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_GAMEPIX) {
                data = GamePix.localStorage.getItem(key);
            }
            else {
                data = localStorage.getItem(key);
            }
            successCb(data);
        };
        GameManager.setStorageData = function (key, value, successCb, failureCb) {
            if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_GAMEPIX) {
                GamePix.localStorage.setItem(key, JSON.stringify(value));
            }
            else {
                localStorage.setItem(key, JSON.stringify(value));
            }
        };
        return GameManager;
    }());
    CricketHero.GameManager = GameManager;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var GameVars = (function () {
        function GameVars() {
        }
        GameVars.areValidDomains = function (domains) {
            var isValid = false;
            for (var i = 0; i < domains.length; i++) {
                if (window.location.hostname.indexOf(domains[i]) !== -1) {
                    isValid = true;
                    break;
                }
            }
            return isValid;
        };
        GameVars.playing = false;
        return GameVars;
    }());
    CricketHero.GameVars = GameVars;
})(CricketHero || (CricketHero = {}));
window.onload = function () {
    var game = new CricketHero.Game();
    if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_GAMEPIX) {
        GamePix.on.pause = function () {
            game.paused = true;
        };
        GamePix.on.resume = function () {
            game.paused = false;
        };
        GamePix.on.soundOn = function () {
            if (!CricketHero.GameVars.gameData.muted) {
                game.sound.mute = false;
            }
        };
        GamePix.on.soundOff = function () {
            game.sound.mute = true;
        };
    }
    window.addEventListener("orientationchange", onOrientationChange, false);
};
function onOrientationChange() {
    setTimeout(function () {
        var w = window.innerWidth;
        var h = window.innerHeight;
        var isPortrait = w < h;
        if (isPortrait) {
            if (CricketHero.Boot.bootedInWrongOrientation) {
                CricketHero.Boot.bootedInWrongOrientation = false;
                CricketHero.GameManager.init(CricketHero.Boot.currentInstance.game);
            }
            document.getElementById("orientation").style.display = "none";
            document.getElementById("canvas").style.display = "block";
        }
        else {
            document.getElementById("orientation").style.display = "block";
            document.getElementById("canvas").style.display = "none";
        }
    }, 250);
}
var CricketHero;
(function (CricketHero) {
    var AudioButton = (function (_super) {
        __extends(AudioButton, _super);
        function AudioButton(game) {
            var _this = _super.call(this, game, null, "audio-button") || this;
            _this.button = new Phaser.Button(_this.game, 0, 0, "texture_atlas_1", _this.onAudioButtonClicked, _this);
            if (CricketHero.GameVars.gameData.muted) {
                _this.button.setFrames("button_audio_off_on.png", "button_audio_off_off.png", "button_audio_off_on.png");
            }
            else {
                _this.button.setFrames("button_audio_on_on.png", "button_audio_on_off.png", "button_audio_on_on.png");
            }
            _this.button.anchor.set(.5);
            _this.button.forceOut = true;
            _this.add(_this.button);
            return _this;
        }
        AudioButton.prototype.onAudioButtonClicked = function (b) {
            b.clearFrames();
            if (CricketHero.GameVars.gameData.muted) {
                CricketHero.AudioManager.unmute();
                this.button.setFrames("button_audio_on_on.png", "button_audio_on_off.png", "button_audio_on_on.png");
            }
            else {
                CricketHero.AudioManager.mute();
                this.button.setFrames("button_audio_off_on.png", "button_audio_off_off.png", "button_audio_off_on.png");
            }
            this.button.clearFrames();
        };
        return AudioButton;
    }(Phaser.Group));
    CricketHero.AudioButton = AudioButton;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var Boot = (function (_super) {
        __extends(Boot, _super);
        function Boot() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Boot.prototype.init = function () {
            Boot.currentInstance = this;
            this.input.maxPointers = 1;
            this.game.stage.disableVisibilityChange = true;
            this.game.stage.backgroundColor = "#0C9ED0";
            this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            this.game.scale.pageAlignHorizontally = true;
            this.game.scale.pageAlignVertically = true;
            if (this.game.device.desktop) {
                this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
                CricketHero.GameVars.scaleY = 1;
            }
            else {
                this.game.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
                CricketHero.GameVars.scaleY = (4 / 3) / (window.innerHeight / window.innerWidth);
                if (CricketHero.GameConstants.SPONSOR !== CricketHero.GameConstants.SPONSOR_GAMEPIX) {
                    this.game.scale.isPortrait = false;
                    this.game.scale.forceOrientation(true, false);
                }
            }
            this.game.onBlur.add(function () {
                CricketHero.Game.currentInstance.sound.mute = true;
                CricketHero.MatchManager.pauseGame();
            }, this);
            this.game.onFocus.add(function () {
                if (!CricketHero.GameVars.gameData.muted) {
                    CricketHero.Game.currentInstance.sound.mute = false;
                }
            }, this);
            if (CricketHero.GameConstants.DEVELOPMENT) {
                this.game.time.advancedTiming = true;
            }
        };
        Boot.prototype.preload = function () {
            this.load.crossOrigin = "anonymous";
            this.load.bitmapFont("04b03_white", "assets/fonts/04b03_white.png", "assets/fonts/04b03_white.xml");
            if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_LAGGED) {
                this.load.image("sponsor-logo", "assets/lagged-logo.png");
            }
        };
        Boot.prototype.create = function () {
            if (!this.game.device.desktop) {
                var w = window.innerWidth;
                var h = window.innerHeight;
                if (w < h) {
                    Boot.bootedInWrongOrientation = false;
                    CricketHero.GameManager.init(this.game);
                }
                else {
                    Boot.bootedInWrongOrientation = true;
                    document.getElementById("orientation").style.display = "block";
                    document.getElementById("canvas").style.display = "none";
                }
            }
            else {
                CricketHero.GameManager.init(this.game);
            }
        };
        Boot.prototype.shutdown = function () {
            Boot.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        return Boot;
    }(Phaser.State));
    CricketHero.Boot = Boot;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var PreLoader = (function (_super) {
        __extends(PreLoader, _super);
        function PreLoader() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PreLoader.prototype.init = function () {
            PreLoader.currentInstance = this;
        };
        PreLoader.prototype.preload = function () {
            Phaser.Canvas.setBackgroundColor(this.game.canvas, "#000000");
            this.generateBitmapData();
            this.composeScene();
            this.loadAssets();
        };
        PreLoader.prototype.create = function () {
            this.loadingPercentagelabel.fontSize = 52;
            this.loadingPercentagelabel.text = "GAME LOADED";
            CricketHero.GameManager.onGameAssetsLoaded();
        };
        PreLoader.prototype.shutdown = function () {
            PreLoader.currentInstance = this;
            _super.prototype.shutdown.call(this);
        };
        PreLoader.prototype.updateLoadedPercentage = function () {
            if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_POKI) {
                PokiSDK.gameLoadingProgress({ percentageDone: this.load.progress });
            }
            if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_GAMEPIX) {
                GamePix.game.gameLoading(this.load.progress);
            }
            this.loadingPercentagelabel.text = this.load.progress < 10 ? "0" + this.load.progress : this.load.progress.toString();
        };
        PreLoader.prototype.generateBitmapData = function () {
            var bmd = this.game.add.bitmapData(CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BLACK_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BITMAP_SIZE);
            bmd.ctx.fillStyle = "#000000";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 128, "gradient-sky", true);
            var grd = bmd.ctx.createLinearGradient(0, 0, 0, 128);
            grd.addColorStop(0, "#0C9ED0");
            grd.addColorStop(1, "#14CCE2");
            bmd.ctx.fillStyle = grd;
            bmd.ctx.fillRect(0, 0, 16, 128);
            bmd = this.game.add.bitmapData(CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BLUE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BITMAP_SIZE);
            bmd.ctx.fillStyle = "#0000FF";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.GRAY_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BITMAP_SIZE);
            bmd.ctx.fillStyle = "#333333";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.LIGHT_GRAY_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BITMAP_SIZE);
            bmd.ctx.fillStyle = "#555555";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.WHITE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BITMAP_SIZE);
            bmd.ctx.fillStyle = "#FFFFFF";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.RED_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BITMAP_SIZE);
            bmd.ctx.fillStyle = "#FF0000";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.DARK_ORANGE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BITMAP_SIZE);
            bmd.ctx.fillStyle = "#b25902";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.DARK_BLUE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BITMAP_SIZE);
            bmd.ctx.fillStyle = "#222E3E";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.YELLOW_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BITMAP_SIZE);
            bmd.ctx.fillStyle = "#FFFF00";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.GREEN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.BITMAP_SIZE);
            bmd.ctx.fillStyle = "#00FF00";
            bmd.ctx.fill();
        };
        PreLoader.prototype.composeScene = function () {
            var background = this.add.sprite(0, 0, this.game.cache.getBitmapData("gradient-sky"));
            background.scale.set(CricketHero.GameConstants.GAME_WIDTH / 16, CricketHero.GameConstants.GAME_HEIGHT / 128);
            var scaledItemsContainer = this.add.group();
            scaledItemsContainer.x = CricketHero.GameConstants.GAME_WIDTH / 2;
            scaledItemsContainer.y = CricketHero.GameConstants.GAME_HEIGHT / 2;
            scaledItemsContainer.scale.y = CricketHero.GameVars.scaleY;
            if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_LAGGED) {
                var sponsorLogo = new Phaser.Image(this.game, 0, -80, "sponsor-logo");
                sponsorLogo.anchor.set(.5);
                scaledItemsContainer.add(sponsorLogo);
                var presentsLabel = new Phaser.BitmapText(this.game, 0, 20, "04b03_white", "PRESENTS", 34);
                presentsLabel.anchor.set(.5);
                scaledItemsContainer.add(presentsLabel);
            }
            this.loadingPercentagelabel = new Phaser.BitmapText(this.game, 0, 235, "04b03_white", "00", 68);
            this.loadingPercentagelabel.anchor.set(.5);
            scaledItemsContainer.add(this.loadingPercentagelabel);
        };
        PreLoader.prototype.loadAssets = function () {
            this.game.load.crossOrigin = "Anonymous";
            this.load.json("game-text", "assets/config/game-text.json");
            this.load.json("shots-data", "assets/config/shotsData.json");
            this.load.json("stage-state-data", "assets/config/stageStateData.json");
            this.load.bitmapFont("freshman", "assets/fonts/freshman.png", "assets/fonts/freshman.xml");
            this.load.bitmapFont("freshman-red", "assets/fonts/freshman-red.png", "assets/fonts/freshman-red.xml");
            this.load.bitmapFont("freshman_white", "assets/fonts/freshman_white.png", "assets/fonts/freshman_white.xml");
            this.load.bitmapFont("alfa_slab_one", "assets/fonts/alfa_slab_one.png", "assets/fonts/alfa_slab_one.xml");
            if (CricketHero.GameConstants.DEVELOPMENT) {
                this.load.atlas("texture_atlas_0", "assets/texture_atlas_0.png", "assets/texture_atlas_0.json");
            }
            this.load.atlas("texture_atlas_1", "assets/texture_atlas_1.png", "assets/texture_atlas_1.json");
            this.load.atlas("texture_atlas_2", "assets/texture_atlas_2.png", "assets/texture_atlas_2.json");
            this.load.atlas("texture_atlas_4", "assets/texture_atlas_4.png", "assets/texture_atlas_4.json");
            this.load.atlas("texture_atlas_3", "assets/texture_atlas_3.png", "assets/texture_atlas_3.json");
            this.load.xml("cricket-player", "assets/spriter-animations/cricket-player.xml");
            this.load.xml("wickets", "assets/spriter-animations/wickets.xml");
            this.load.audiosprite("audio-sprite", ["assets/audio/audiosprite.mp3", "assets/audio/audiosprite.ogg"], "assets/audio/audiosprite.json");
            this.load.onFileComplete.add(this.updateLoadedPercentage, this);
        };
        return PreLoader;
    }(Phaser.State));
    CricketHero.PreLoader = PreLoader;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var DisplayDevelopmentState = (function (_super) {
        __extends(DisplayDevelopmentState, _super);
        function DisplayDevelopmentState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DisplayDevelopmentState.prototype.init = function () {
            DisplayDevelopmentState.currentInstance = this;
            CricketHero.GameVars.matchData.score = 0;
            CricketHero.GameVars.matchData.missedBalls = 0;
            CricketHero.GameVars.relevantRecord = true;
            CricketHero.GameVars.matchData.score = 45;
        };
        DisplayDevelopmentState.prototype.create = function () {
            var background = this.add.sprite(0, 0, this.game.cache.getBitmapData("gradient-sky"));
            background.scale.set(CricketHero.GameConstants.GAME_WIDTH / 16, CricketHero.GameConstants.GAME_HEIGHT / 128);
            this.stageContainer = new Phaser.Group(this.game);
            this.stageContainer.position.set(CricketHero.GameConstants.GAME_WIDTH / 2, CricketHero.GameConstants.GAME_HEIGHT / 2);
            this.stageContainer.scale.y = CricketHero.GameVars.scaleY;
            CricketHero.DisplayManager.init(this.game);
            CricketHero.DisplayManager.display.y = -115;
            this.stageContainer.add(CricketHero.DisplayManager.display);
            CricketHero.DisplayManager.setState(CricketHero.DisplayManager.SCROLLING_BOARD_STATE);
            var startButton = this.add.button(50, 360, "texture_atlas_0", this.onStartButtonPressed, this);
            startButton.setFrames("button_start_on.png", "button_start_off.png", "button_start_on.png");
            startButton.anchor.set(.5);
            var ballHitButton = this.add.button(140, 360, "texture_atlas_0", this.onBallHitPressed, this);
            ballHitButton.setFrames("button_ball_hit_on.png", "button_ball_hit_off.png", "button_ball_hit_on.png");
            ballHitButton.anchor.set(.5);
            var strikeButton = this.add.button(230, 360, "texture_atlas_0", this.onStrikePressed, this);
            strikeButton.anchor.set(.5);
            strikeButton.setFrames("button_strike_on.png", "button_strike_off.png", "button_strike_on.png");
            var tomatoButton = this.add.button(320, 360, "texture_atlas_0", this.onTomatoPressed, this);
            tomatoButton.anchor.set(.5);
            tomatoButton.setFrames("button_tomato_on.png", "button_tomato_off.png", "button_tomato_on.png");
            var pauseButton = this.add.button(410, 360, "texture_atlas_0", this.onPausePressed, this);
            pauseButton.anchor.set(.5);
            pauseButton.setFrames("button_pause_on.png", "button_pause_off.png", "button_pause_on.png");
            var bombButton = this.add.button(50, 410, "texture_atlas_0", this.onBombPressed, this);
            bombButton.anchor.set(.5);
            bombButton.setFrames("button_bomb_on.png", "button_bomb_off.png", "button_bomb_on.png");
            var newRecordButton = this.add.button(230, 410, "texture_atlas_0", this.onNewRecordPressed, this);
            newRecordButton.anchor.set(.5);
            newRecordButton.setFrames("button_new_record_on.png", "button_new_record_off.png", "button_new_record_on.png");
            var adversarydButton = this.add.button(320, 410, "texture_atlas_0", this.onAdversaryAheadPressed, this);
            adversarydButton.anchor.set(.5);
            adversarydButton.setFrames("button_adversary_on.png", "button_adversary_off.png", "button_adversary_on.png");
            var resumeButton = this.add.button(410, 410, "texture_atlas_0", this.onResumePressed, this);
            resumeButton.anchor.set(.5);
            resumeButton.setFrames("button_resume_on.png", "button_resume_off.png", "button_resume_on.png");
            var startBreakAnimButton = this.add.button(50, 460, "texture_atlas_0", this.onStartBreakPressed, this);
            startBreakAnimButton.anchor.set(.5);
            startBreakAnimButton.setFrames("button_start_break_seq_on.png", "button_start_break_seq_off.png", "button_start_break_seq_on.png");
            var curvyBallButton = this.add.button(140, 460, "texture_atlas_0", this.onCurvyBallPressed, this);
            curvyBallButton.anchor.set(.5);
            curvyBallButton.setFrames("button_curve_ball_on.png", "button_curve_ball_off.png", "button_curve_ball_on.png");
            var onFireButton = this.add.button(230, 460, "texture_atlas_0", this.onFirePressed, this);
            onFireButton.anchor.set(.5);
            onFireButton.setFrames("button_on_fire_on.png", "button_on_fire_off.png", "button_on_fire_on.png");
            var afterAdButton = this.add.button(320, 460, "texture_atlas_0", this.onAfterAdPressed, this);
            afterAdButton.anchor.set(.5);
            afterAdButton.setFrames("button_after_ad_on.png", "button_after_ad_off.png", "button_after_ad_on.png");
            var goButton = this.add.button(410, 460, "texture_atlas_0", this.onGoPressed, this);
            goButton.anchor.set(.5);
            goButton.setFrames("button_go_on.png", "button_go_off.png", "button_go_on.png");
            var twoCirclesButton = this.add.button(50, 510, "texture_atlas_0", this.onTwoCirclesPressed, this);
            twoCirclesButton.anchor.set(.5);
            twoCirclesButton.setFrames("button_two_circles_on.png", "button_two_circles_off.png", "button_two_circles_on.png");
            var oneCircleButton = this.add.button(140, 510, "texture_atlas_0", this.onOneCirclePressed, this);
            oneCircleButton.anchor.set(.5);
            oneCircleButton.setFrames("button_one_circle_on.png", "button_one_circle_off.png", "button_one_circle_on.png");
            var gameoverButton = this.add.button(230, 510, "texture_atlas_0", this.onGameOverPressed, this);
            gameoverButton.anchor.set(.5);
            gameoverButton.setFrames("button_game_over_on.png", "button_game_over_off.png", "button_game_over_on.png");
            var homerunButton = this.add.button(320, 510, "texture_atlas_0", this.onHomerunPressed, this);
            homerunButton.anchor.set(.5);
            homerunButton.setFrames("button_homerun_on.png", "button_homerun_off.png", "button_homerun_on.png");
            var resetButton = this.add.button(410, 510, "texture_atlas_0", this.onResetPressed, this);
            resetButton.anchor.set(.5);
            resetButton.setFrames("button_reset_on.png", "button_reset_off.png", "button_reset_on.png");
            var startCoinsFrenzyButton = this.add.button(50, 560, "texture_atlas_0", this.startCoinsFrenzyPressed, this);
            startCoinsFrenzyButton.anchor.set(.5);
            startCoinsFrenzyButton.setFrames("button_coin_frenzy_start_on.png", "button_coin_frenzy_start_off.png", "button_coin_frenzy_start_on.png");
            var stopCoinsFrenzyButton = this.add.button(140, 560, "texture_atlas_0", this.stopCoinsFrenzyPressed, this);
            stopCoinsFrenzyButton.anchor.set(.5);
            stopCoinsFrenzyButton.setFrames("button_coin_frenzy_end_on.png", "button_coin_frenzy_end_off.png", "button_coin_frenzy_end_on.png");
        };
        DisplayDevelopmentState.prototype.shutdown = function () {
            DisplayDevelopmentState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        DisplayDevelopmentState.prototype.startCoinsFrenzyPressed = function () {
            CricketHero.DisplayManager.coinsFrenzyStarted();
        };
        DisplayDevelopmentState.prototype.stopCoinsFrenzyPressed = function () {
            CricketHero.DisplayManager.coinsFrenzyEnds();
        };
        DisplayDevelopmentState.prototype.onHomerunPressed = function () {
            CricketHero.DisplayManager.setState(CricketHero.DisplayManager.HOMERUN_STATE);
        };
        DisplayDevelopmentState.prototype.onPausePressed = function () {
            CricketHero.DisplayManager.pause();
        };
        DisplayDevelopmentState.prototype.onResumePressed = function () {
            CricketHero.DisplayManager.resume();
        };
        DisplayDevelopmentState.prototype.onDownFairy = function () {
            CricketHero.GameVars.matchData.missedBalls--;
            CricketHero.DisplayManager.fairyPressed();
        };
        DisplayDevelopmentState.prototype.onAfterAdPressed = function () {
            CricketHero.DisplayManager.setState(CricketHero.DisplayManager.AFTER_BREAK_STATE);
        };
        DisplayDevelopmentState.prototype.onGoPressed = function () {
            CricketHero.DisplayManager.go();
        };
        DisplayDevelopmentState.prototype.onStartBreakPressed = function () {
            CricketHero.DisplayManager.startBreak(3000);
        };
        DisplayDevelopmentState.prototype.onTwoCirclesPressed = function () {
            CricketHero.DisplayManager.setState(CricketHero.DisplayManager.TWO_CIRCLES_STATE);
        };
        DisplayDevelopmentState.prototype.onOneCirclePressed = function () {
            CricketHero.DisplayManager.setState(CricketHero.DisplayManager.ONE_CIRCLE_STATE);
        };
        DisplayDevelopmentState.prototype.onGameOverPressed = function () {
            CricketHero.DisplayManager.setState(CricketHero.DisplayManager.GAME_OVER_STATE);
        };
        DisplayDevelopmentState.prototype.onStartButtonPressed = function () {
            CricketHero.GameVars.matchData.score = 0;
            CricketHero.GameVars.matchData.missedBalls = 0;
            var fairy = new CricketHero.Referee(this.game);
            this.stageContainer.add(fairy);
            CricketHero.DisplayManager.setState(CricketHero.DisplayManager.COUNTDOWN_STATE);
        };
        DisplayDevelopmentState.prototype.onBallHitPressed = function () {
            CricketHero.GameVars.matchData.score++;
            CricketHero.DisplayManager.updateScore();
        };
        DisplayDevelopmentState.prototype.onStrikePressed = function () {
            CricketHero.GameVars.matchData.missedBalls++;
            CricketHero.DisplayManager.setState(CricketHero.DisplayManager.STRIKE_STATE);
        };
        DisplayDevelopmentState.prototype.onCurvyBallPressed = function () {
            CricketHero.DisplayManager.setState(CricketHero.DisplayManager.CURVE_BALL_STATE);
        };
        DisplayDevelopmentState.prototype.onFirePressed = function () {
            CricketHero.DisplayManager.setOnFire();
        };
        DisplayDevelopmentState.prototype.onTomatoPressed = function () {
            CricketHero.DisplayManager.setState(CricketHero.DisplayManager.TOMATO_STATE);
        };
        DisplayDevelopmentState.prototype.onBombPressed = function () {
            CricketHero.DisplayManager.setState(CricketHero.DisplayManager.BOMB_STATE);
        };
        DisplayDevelopmentState.prototype.onResetPressed = function () {
            this.game.state.start("DisplayDevelopmentState", true, false);
        };
        DisplayDevelopmentState.prototype.onNewRecordPressed = function () {
            CricketHero.DisplayManager.setState(CricketHero.DisplayManager.NEW_RECORD_STATE);
        };
        DisplayDevelopmentState.prototype.onAdversaryAheadPressed = function () {
            CricketHero.DisplayManager.setState(CricketHero.DisplayManager.PLAYER_AHEAD_STATE);
        };
        DisplayDevelopmentState.prototype.onAnim2Pressed = function () {
        };
        return DisplayDevelopmentState;
    }(Phaser.State));
    CricketHero.DisplayDevelopmentState = DisplayDevelopmentState;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var LevelSelectionButton = (function (_super) {
        __extends(LevelSelectionButton, _super);
        function LevelSelectionButton(game, index, boss) {
            var _this = _super.call(this, game, null, "dev-level-button" + index, false) || this;
            var button = new Phaser.Button(_this.game, 0, 0, "texture_atlas_0", _this.onClickButton);
            button.setFrames("button_level_selection_on.png", "button_level_selection_off.png", "button_level_selection_on.png");
            button.anchor.set(.5);
            button.name = index.toString();
            _this.add(button);
            var levelLabel = new Phaser.Text(_this.game, 0, 0, index.toString(), { font: "20px Arial", fill: "#FF0000" });
            levelLabel.anchor.set(.5, .4);
            _this.add(levelLabel);
            _this.scale.y = CricketHero.GameVars.scaleY;
            return _this;
        }
        LevelSelectionButton.prototype.onClickButton = function (b) {
            CricketHero.GameManager.playSelectelBallSequence(parseInt(b.name));
        };
        return LevelSelectionButton;
    }(Phaser.Group));
    CricketHero.LevelSelectionButton = LevelSelectionButton;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var LevelSelectionState = (function (_super) {
        __extends(LevelSelectionState, _super);
        function LevelSelectionState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LevelSelectionState.prototype.init = function () {
            LevelSelectionState.currentInstance = this;
            var shotsData = this.game.cache.getJSON("shots-data");
            this.firstRoundSequences = [];
            this.secondRoundSequences = [];
            for (var i = 0; i < shotsData.length; i++) {
                var shotSequence = shotsData[i];
                if (shotSequence.firstRound) {
                    this.firstRoundSequences.push(shotSequence.sequenceId);
                }
                else {
                    this.secondRoundSequences.push(shotSequence.sequenceId);
                }
            }
        };
        LevelSelectionState.prototype.create = function () {
            var darkBackground = new Phaser.Sprite(this.game, 0, 0, this.game.cache.getBitmapData(CricketHero.GameConstants.DARK_BLUE_SQUARE));
            darkBackground.scale.set(CricketHero.GameConstants.GAME_WIDTH / CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.GAME_HEIGHT / CricketHero.GameConstants.BITMAP_SIZE);
            this.add.existing(darkBackground);
            var sceneTitle = this.add.text(CricketHero.GameConstants.GAME_WIDTH / 2, 5, "BALLS SEQUENCE SELECTION", { font: "25px Arial", fill: "#FFFFFF" });
            sceneTitle.anchor.x = .5;
            sceneTitle.scale.y = CricketHero.GameVars.scaleY;
            var firstRoundSeqLabel = this.add.text(CricketHero.GameConstants.GAME_WIDTH / 2, 45 * CricketHero.GameVars.scaleY, "FIRST ROUND SEQUENCES", { font: "20px Arial", fill: "#FFFF00" });
            firstRoundSeqLabel.anchor.x = .5;
            firstRoundSeqLabel.scale.y = CricketHero.GameVars.scaleY;
            var button;
            for (var i = 0; i < 4; i++) {
                for (var j = 0; j < 5; j++) {
                    if (typeof this.firstRoundSequences[5 * i + j] !== "undefined") {
                        button = new CricketHero.LevelSelectionButton(this.game, this.firstRoundSequences[5 * i + j]);
                        button.x = CricketHero.GameConstants.GAME_WIDTH / 2 - 60 * (2 - j);
                        button.y = (100 + 50 * i) * CricketHero.GameVars.scaleY;
                        this.add.existing(button);
                    }
                }
            }
            var secondRoundSeqLabel = this.add.text(CricketHero.GameConstants.GAME_WIDTH / 2, 350 * CricketHero.GameVars.scaleY, "SECOND ROUND SEQUENCES", { font: "20px Arial", fill: "#FFFF00" });
            secondRoundSeqLabel.anchor.x = .5;
            secondRoundSeqLabel.scale.y = CricketHero.GameVars.scaleY;
            for (var i = 0; i < 4; i++) {
                for (var j = 0; j < 5; j++) {
                    if (typeof this.secondRoundSequences[5 * i + j] !== "undefined") {
                        button = new CricketHero.LevelSelectionButton(this.game, this.secondRoundSequences[5 * i + j]);
                        button.x = CricketHero.GameConstants.GAME_WIDTH / 2 - 60 * (2 - j);
                        button.y = (405 + 50 * i) * CricketHero.GameVars.scaleY;
                        this.add.existing(button);
                    }
                }
            }
        };
        LevelSelectionState.prototype.shutdown = function () {
            LevelSelectionState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        return LevelSelectionState;
    }(Phaser.State));
    CricketHero.LevelSelectionState = LevelSelectionState;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var DarkLayer = (function (_super) {
        __extends(DarkLayer, _super);
        function DarkLayer(game, alpha) {
            var _this = _super.call(this, game, 0, 0, game.cache.getBitmapData(CricketHero.GameConstants.DARK_BLUE_SQUARE)) || this;
            _this.anchor.set(.5);
            _this.alpha = 0;
            _this.scale.set(1.5 * CricketHero.GameConstants.GAME_WIDTH / CricketHero.GameConstants.BITMAP_SIZE, 1.5 * CricketHero.GameConstants.GAME_HEIGHT / CricketHero.GameConstants.BITMAP_SIZE / CricketHero.GameVars.scaleY);
            _this.game.add.tween(_this)
                .to({ alpha: alpha }, 850, Phaser.Easing.Cubic.Out, true);
            return _this;
        }
        return DarkLayer;
    }(Phaser.Sprite));
    CricketHero.DarkLayer = DarkLayer;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var DebugObjectsContainer = (function (_super) {
        __extends(DebugObjectsContainer, _super);
        function DebugObjectsContainer(game) {
            var _this = _super.call(this, game, null, "debug-objects-container") || this;
            _this.graphics = new Phaser.Graphics(_this.game);
            _this.add(_this.graphics);
            _this.ballTrajectoryGraphics = new Phaser.Graphics(_this.game);
            _this.add(_this.ballTrajectoryGraphics);
            return _this;
        }
        DebugObjectsContainer.prototype.drawCircle = function (p, radius, color) {
            this.graphics.lineStyle(1, color);
            this.graphics.drawCircle(p.x, p.y, 2 * radius);
        };
        DebugObjectsContainer.prototype.clearBallGraphics = function () {
            this.ballTrajectoryGraphics.clear();
        };
        DebugObjectsContainer.prototype.drawBallTrajectoryPoint = function (p, color, radius) {
            var r = radius || 3.5;
            this.ballTrajectoryGraphics.lineStyle(1, color, 1);
            this.ballTrajectoryGraphics.beginFill(color, 1);
            this.ballTrajectoryGraphics.drawCircle(p.x, p.y, r);
            this.ballTrajectoryGraphics.endFill();
        };
        DebugObjectsContainer.prototype.drawPoint = function (p, color) {
            this.graphics.lineStyle(1, color, 1);
            this.graphics.beginFill(color, 1);
            this.graphics.drawCircle(p.x, p.y, 5);
            this.graphics.endFill();
        };
        DebugObjectsContainer.prototype.drawLine = function (p1, p2, color) {
            this.graphics.lineStyle(1, color, 1);
            this.graphics.moveTo(p1.x, p1.y);
            this.graphics.lineTo(p2.x, p2.y);
        };
        DebugObjectsContainer.WHITE = 0xFFFFFF;
        DebugObjectsContainer.RED = 0xFF0000;
        DebugObjectsContainer.GREEN = 0x00FF00;
        DebugObjectsContainer.BLUE = 0x0000FF;
        DebugObjectsContainer.YELLOW = 0xFFFF00;
        return DebugObjectsContainer;
    }(Phaser.Group));
    CricketHero.DebugObjectsContainer = DebugObjectsContainer;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var FieldBackgroundContainer = (function (_super) {
        __extends(FieldBackgroundContainer, _super);
        function FieldBackgroundContainer(game) {
            var _this = _super.call(this, game, null, "field-background-container") || this;
            _this.lastSide = null;
            _this.burnStain = null;
            _this.fieldBackground = new Phaser.Image(_this.game, 0, -45, "texture_atlas_4", "bg_ground.png");
            _this.fieldBackground.anchor.set(.5, 0);
            _this.add(_this.fieldBackground);
            _this.leftLineEffect = _this.create(0, -45, "texture_atlas_4", "lineEffect_01.png");
            _this.leftLineEffect.anchor.x = .5;
            _this.leftLineEffect.scale.x = -1;
            _this.leftLineEffect.animations.add("shine", Phaser.Animation.generateFrameNames("lineEffect_", 1, 12, ".png", 2));
            _this.leftLineEffect.visible = false;
            _this.rightLineEffect = _this.create(0, -45, "texture_atlas_4", "lineEffect_01.png");
            _this.rightLineEffect.anchor.x = .5;
            _this.rightLineEffect.animations.add("shine", Phaser.Animation.generateFrameNames("lineEffect_", 1, 12, ".png", 2));
            _this.rightLineEffect.visible = false;
            return _this;
        }
        FieldBackgroundContainer.prototype.addPatches = function (fieldPatchesContainer, playerContainer) {
            this.leftPatch = new Phaser.Image(this.game, 0, this.fieldBackground.y + this.fieldBackground.height, "texture_atlas_4", "field_left_patch.png");
            this.leftPatch.anchor.set(.5, 1);
            this.leftPatch.visible = false;
            fieldPatchesContainer.add(this.leftPatch);
            this.rightPatch = new Phaser.Image(this.game, 0, this.fieldBackground.y + this.fieldBackground.height, "texture_atlas_4", "field_right_patch.png");
            this.rightPatch.anchor.set(.5, 1);
            this.rightPatch.visible = false;
            fieldPatchesContainer.add(this.rightPatch);
            this.hole = new Phaser.Image(this.game, 122, this.rightPatch.y - this.rightPatch.height, "texture_atlas_4", "hole.png");
            this.hole.anchor.set(.5);
            this.hole.scale.y = .36;
            this.hole.visible = false;
            playerContainer.addAt(this.hole, 0);
        };
        FieldBackgroundContainer.prototype.openHole = function () {
            CricketHero.StageContainer.currentInstance.onHoleOpened();
            var patch;
            if (CricketHero.GameVars.matchData.heroSide === CricketHero.GameConstants.CENTER || CricketHero.GameVars.matchData.heroSide === CricketHero.GameConstants.RIGHT) {
                patch = this.rightPatch;
                this.hole.x = 122;
            }
            else {
                patch = this.leftPatch;
                this.hole.x = -122;
            }
            this.hole.visible = true;
            this.hole.scale.set(0);
            this.game.add.tween(this.hole.scale)
                .to({ x: 1, y: .36 }, 500, Phaser.Easing.Cubic.Out, true, 100);
            patch.visible = true;
        };
        FieldBackgroundContainer.prototype.closeHole = function () {
            this.game.add.tween(this.hole.scale)
                .to({ x: 0, y: 0 }, 400, Phaser.Easing.Cubic.Out, true, 650)
                .onComplete.add(function () {
                this.hole.visible = false;
            }, this);
        };
        FieldBackgroundContainer.prototype.hidePatch = function () {
            if (CricketHero.GameVars.matchData.heroSide === CricketHero.GameConstants.CENTER || CricketHero.GameVars.matchData.heroSide === CricketHero.GameConstants.RIGHT) {
                this.rightPatch.visible = false;
            }
            else {
                this.leftPatch.visible = false;
            }
        };
        FieldBackgroundContainer.prototype.animateLine = function () {
            if (this.lastSide === CricketHero.GameVars.activatedCircleSide) {
                return;
            }
            if (CricketHero.GameVars.activatedCircleSide === CricketHero.GameConstants.LEFT) {
                this.leftLineEffect.visible = true;
                this.leftLineEffect.play("shine", 12, false)
                    .onComplete.add(function () {
                    this.leftLineEffect.visible = false;
                }, this);
            }
            else {
                this.rightLineEffect.visible = true;
                this.rightLineEffect.play("shine", 12, false)
                    .onComplete.add(function () {
                    this.rightLineEffect.visible = false;
                }, this);
            }
            this.lastSide = CricketHero.GameVars.activatedCircleSide;
        };
        FieldBackgroundContainer.prototype.explosion = function () {
            if (this.burnStain !== null) {
                return;
            }
            this.burnStain = new Phaser.Image(this.game, 35, 190, "texture_atlas_1", "burn_stain.png");
            this.burnStain.anchor.set(.5);
            this.burnStain.scale.set(1.35);
            this.add(this.burnStain);
        };
        return FieldBackgroundContainer;
    }(Phaser.Group));
    CricketHero.FieldBackgroundContainer = FieldBackgroundContainer;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var GUI = (function (_super) {
        __extends(GUI, _super);
        function GUI(game) {
            var _this = _super.call(this, game, null, "gui") || this;
            _this.pauseButton = new Phaser.Button(_this.game, 5, 5, "texture_atlas_1", _this.onPauseButtonClicked, _this);
            _this.pauseButton.setFrames("button_pause_on.png", "button_pause_off.png", "button_pause_on.png");
            _this.pauseButton.scale.y = CricketHero.GameVars.scaleY;
            _this.pauseButton.forceOut = true;
            _this.pauseButton.visible = false;
            _this.add(_this.pauseButton);
            return _this;
        }
        GUI.prototype.countdownEnded = function () {
            if (CricketHero.GameVars.gameData.hitTutorialShown) {
                this.pauseButton.visible = true;
            }
        };
        GUI.prototype.pause = function () {
            this.pauseButton.visible = false;
        };
        GUI.prototype.resume = function () {
            if (!CricketHero.GameVars.gameOver) {
                this.pauseButton.visible = true;
            }
        };
        GUI.prototype.onPauseButtonClicked = function () {
            CricketHero.MatchManager.pauseGame();
            CricketHero.AudioManager.playSound("click");
        };
        return GUI;
    }(Phaser.Group));
    CricketHero.GUI = GUI;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var HUD = (function (_super) {
        __extends(HUD, _super);
        function HUD(game) {
            var _this = _super.call(this, game, null, "hud") || this;
            HUD.currentInstance = _this;
            _this.coinTweening = false;
            _this.x = 455;
            _this.y = -100 * CricketHero.GameVars.scaleY;
            _this.scale.y = CricketHero.GameVars.scaleY;
            _this.coinIcon = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "coin_icon.png");
            _this.coinIcon.anchor.set(.5);
            _this.add(_this.coinIcon);
            _this.creditsLabel = new Phaser.BitmapText(_this.game, -25, 8, "04b03_white", CricketHero.GameVars.gameData.credits.toString(), 42);
            _this.creditsLabel.anchor.set(1, .5);
            _this.add(_this.creditsLabel);
            if (CricketHero.GameConstants.DEVELOPMENT) {
                _this.fpsLabel = new Phaser.Text(_this.game, 5 - _this.x, -30, "60", { font: "20px Arial", fill: "#ffff00", align: "center" });
                _this.add(_this.fpsLabel);
            }
            if (CricketHero.GameVars.enterGameDirectly) {
                _this.y = 30 * CricketHero.GameVars.scaleY;
            }
            return _this;
        }
        HUD.prototype.update = function () {
            _super.prototype.update.call(this);
            if (CricketHero.GameConstants.DEVELOPMENT) {
                this.fpsLabel.text = "" + this.game.time.fps;
            }
        };
        HUD.prototype.updateCredits = function () {
            this.creditsLabel.text = CricketHero.GameVars.gameData.credits.toString();
            if (!this.coinTweening) {
                this.coinTweening = true;
                var t = CricketHero.GameVars.coinsFrenzy ? 80 : 200;
                this.game.add.tween(this.coinIcon.scale)
                    .to({ x: 1.1, y: 1.1 }, t, Phaser.Easing.Cubic.Out, true, 0, 0, true)
                    .onComplete.add(function () {
                    this.coinTweening = false;
                }, this);
            }
        };
        HUD.prototype.startMatch = function () {
            this.game.add.tween(this)
                .to({ y: 30 * CricketHero.GameVars.scaleY }, 300, Phaser.Easing.Linear.None, true);
        };
        return HUD;
    }(Phaser.Group));
    CricketHero.HUD = HUD;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var HitTutorialLayer = (function (_super) {
        __extends(HitTutorialLayer, _super);
        function HitTutorialLayer(game) {
            var _this = _super.call(this, game, null, "hit-tutorial-layer") || this;
            _this.visible = false;
            _this.transparentLayer = _this.create(0, 0, _this.game.cache.getBitmapData(CricketHero.GameConstants.DARK_BLUE_SQUARE));
            _this.transparentLayer.anchor.set(.5);
            _this.transparentLayer.alpha = 0;
            _this.transparentLayer.scale.set(1.5 * CricketHero.GameConstants.GAME_WIDTH / CricketHero.GameConstants.BITMAP_SIZE, 1.5 * CricketHero.GameConstants.GAME_HEIGHT / CricketHero.GameConstants.BITMAP_SIZE / CricketHero.GameVars.scaleY);
            _this.hitBallLabel = new Phaser.Image(_this.game, 0, 240, "texture_atlas_4", "hit_the_ball_" + CricketHero.GameVars.gameData.language + ".png");
            _this.hitBallLabel.anchor.set(.5);
            _this.hitBallLabel.visible = false;
            _this.add(_this.hitBallLabel);
            _this.game.cache.getBitmapFont("alfa_slab_one").font.lineHeight = 32;
            var gameText = _this.game.cache.getJSON("game-text")[CricketHero.GameVars.gameData.language];
            var tapAnywhereStr;
            if (_this.game.device.touch) {
                tapAnywhereStr = gameText.TAP_ANYWHERE;
            }
            else {
                tapAnywhereStr = gameText.CLICK_ANYWHERE;
            }
            if (CricketHero.GameVars.gameData.language === CricketHero.GameConstants.LANGUAGE_HI) {
                _this.tapAnywhereLabel = new Phaser.Text(_this.game, 0, _this.hitBallLabel.y + 80, tapAnywhereStr, { font: "32px Arial", fill: "#FFFFFF" });
                _this.tapAnywhereLabel.fontWeight = "bold";
                _this.tapAnywhereLabel.wordWrap = true;
                _this.tapAnywhereLabel.wordWrapWidth = 480;
            }
            else {
                _this.tapAnywhereLabel = new Phaser.BitmapText(_this.game, 0, _this.hitBallLabel.y + 80, "alfa_slab_one", tapAnywhereStr, 28);
                _this.tapAnywhereLabel.maxWidth = 480;
            }
            _this.tapAnywhereLabel.visible = false;
            _this.tapAnywhereLabel.anchor.set(.5);
            _this.tapAnywhereLabel.align = "center";
            _this.add(_this.tapAnywhereLabel);
            _this.handCursor = new Phaser.Image(_this.game, -150, 140, "texture_atlas_1", "hand-cursor.png");
            _this.handCursor.anchor.x = 1;
            _this.handCursor.visible = false;
            _this.handCursor.alpha = 0;
            _this.add(_this.handCursor);
            return _this;
        }
        HitTutorialLayer.prototype.activate = function () {
            this.visible = true;
            this.hitBallLabel.visible = true;
            this.tapAnywhereLabel.visible = true;
            this.handCursor.visible = true;
            this.game.add.tween(this.handCursor)
                .to({ alpha: 1 }, 350, Phaser.Easing.Cubic.Out, true, 600);
            this.game.add.tween(this.handCursor.scale)
                .to({ x: 1.1, y: 1.1 }, 350, Phaser.Easing.Cubic.Out, true, 0, -1, true);
            this.game.add.tween(this.transparentLayer)
                .to({ alpha: .35 }, 850, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.transparentLayer.inputEnabled = true;
                this.transparentLayer.events.onInputDown.add(this.onDownTransparentLayer, this);
            }, this);
        };
        HitTutorialLayer.prototype.onDownTransparentLayer = function (sprite, p) {
            CricketHero.MatchManager.removeHowToHitBallTutorial();
        };
        return HitTutorialLayer;
    }(Phaser.Group));
    CricketHero.HitTutorialLayer = HitTutorialLayer;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var MatchManager = (function () {
        function MatchManager() {
        }
        MatchManager.init = function (game) {
            MatchManager.game = game;
            MatchManager.nextStageState = null;
            CricketHero.GameVars.paused = false;
            CricketHero.GameVars.currentBall = null;
            CricketHero.GameVars.explosion = false;
            CricketHero.GameVars.gameOver = false;
            CricketHero.GameVars.ballsStreak = 0;
            CricketHero.GameVars.isPlayerOnFire = false;
            CricketHero.GameVars.stopAction = false;
            CricketHero.GameVars.refereeJustHit = false;
            CricketHero.GameVars.twoCirclesTutorialJustShown = false;
            CricketHero.GameVars.homerunMode = false;
            CricketHero.GameVars.coinsFrenzy = false;
            CricketHero.GameVars.justHadCoinsFrenzy = false;
            CricketHero.GameVars.homerunShown = false;
            CricketHero.GameVars.newRecord = false;
            CricketHero.GameVars.relevantRecord = false;
            CricketHero.GameVars.homeRunType = CricketHero.GameConstants.HOMERUN_6;
            CricketHero.GameVars.showReferee = Math.random() > .65 ? true : false;
            CricketHero.GameVars.thrownItemsToShowFairy = 15 + Math.floor(8 * Math.random());
            CricketHero.GameVars.justHadStrike = false;
            CricketHero.GameVars.justSetOnFire = false;
            CricketHero.BallsManager.init(game);
            CricketHero.StageStateManager.init(game);
            if (CricketHero.GameVars.enterGameDirectly) {
                MatchManager.game.time.events.add(150, function () {
                    CricketHero.StageContainer.currentInstance.startMatch();
                }, this);
            }
            CricketHero.GameVars.gameData.matchesPlayed++;
            CricketHero.GameManager.writeGameData();
        };
        MatchManager.pauseGame = function () {
            if (!CricketHero.GameVars.playing) {
                return;
            }
            if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_POKI) {
                PokiSDK.gameplayStop();
            }
            CricketHero.GameVars.paused = true;
            MatchManager.game.time.events.pause();
            CricketHero.MatchState.currentInstance.pauseGame();
        };
        MatchManager.resumeGame = function () {
            if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_POKI) {
                PokiSDK.gameplayStart();
            }
            CricketHero.GameVars.paused = false;
            MatchManager.game.time.events.resume();
            CricketHero.MatchState.currentInstance.resumeGame();
        };
        MatchManager.showHowToHitBallTutorial = function () {
            CricketHero.GameVars.paused = true;
            MatchManager.game.time.events.pause();
            CricketHero.MatchState.currentInstance.showHowToHitBallTutorial();
            CricketHero.GameVars.gameData.hitTutorialShown = true;
            CricketHero.GameManager.writeGameData();
        };
        MatchManager.removeHowToHitBallTutorial = function () {
            CricketHero.GameVars.paused = false;
            MatchManager.game.time.events.resume();
            CricketHero.MatchState.currentInstance.removeHowToHitBallTutorial();
        };
        MatchManager.countdownEnded = function () {
            MatchManager.throwItem();
            CricketHero.MatchState.currentInstance.countdownEnded();
        };
        MatchManager.setTargetCircleSide = function (side) {
            CricketHero.GameVars.activatedCircleSide = side;
            CricketHero.StageContainer.currentInstance.activateTargetCircle();
        };
        MatchManager.playerHits = function () {
            var ball = CricketHero.GameVars.currentBall;
            if (!ball) {
                return null;
            }
            var ballHit = false;
            var collisionData = MatchManager.isBallInsideTargetCircle();
            if (ball && ball.movingTowardsCenter && !ball.hit) {
                if (collisionData.insideCircle) {
                    ballHit = true;
                    ball.hit = true;
                    CricketHero.GameVars.gameData.ballsHit++;
                }
            }
            var itemHit = null;
            if (ballHit) {
                if (CricketHero.GameVars.matchData.targetCircles === 2) {
                    if (CricketHero.GameVars.activatedCircleSide === CricketHero.GameVars.matchData.heroSide) {
                        itemHit = MatchManager.itemHit(collisionData.d);
                    }
                }
                else {
                    itemHit = MatchManager.itemHit(collisionData.d);
                }
            }
            return itemHit;
        };
        MatchManager.isBallInsideTargetCircle = function () {
            var ball = CricketHero.GameVars.currentBall;
            var targetCirclePosition = CricketHero.StageContainer.currentInstance.targetCirclesContainer.getTargetCircleWorldPosition();
            var ballPosition = ball.itemSprite.worldPosition;
            var dx = targetCirclePosition.x - ballPosition.x;
            var dy = targetCirclePosition.y - ballPosition.y;
            var d = Math.sqrt(dx * dx + dy * dy);
            var checkRadius;
            if (CricketHero.GameVars.gameData.hitTutorialShown) {
                checkRadius = .965 * CricketHero.TargetCircle.radiusOuterCircle;
            }
            else {
                checkRadius = .6 * CricketHero.TargetCircle.radiusOuterCircle;
            }
            if (d < checkRadius) {
                return { insideCircle: true, d: d };
            }
            else {
                return { insideCircle: false, d: d };
            }
        };
        MatchManager.playerHitsInCoinsFrenzyMode = function () {
            if (CricketHero.GameVars.matchData.targetCircles === 2 && CricketHero.GameVars.activatedCircleSide !== CricketHero.GameVars.matchData.heroSide) {
                return;
            }
            for (var i = 0; i < CricketHero.BallsManager.frenzyCoinsPool.length; i++) {
                var coin = CricketHero.BallsManager.frenzyCoinsPool[i];
                if (!coin.trajectory.disappearing && coin.movingTowardsCenter) {
                    var coin_px = coin.itemSprite.x;
                    var coin_py = coin.itemSprite.y;
                    var d = Math.sqrt((coin_px * coin_px) + (coin_py - CricketHero.StageContainer.CIRCLE_PY) * (coin_py - CricketHero.StageContainer.CIRCLE_PY));
                    if (d < 1.1 * CricketHero.TargetCircle.radiusOuterCircle) {
                        coin.coinHit();
                        CricketHero.GameVars.gameData.credits++;
                    }
                }
            }
        };
        MatchManager.hitFrenzyCoinReachedHUD = function () {
            CricketHero.HUD.currentInstance.updateCredits();
        };
        MatchManager.missedBallHitGround = function () {
            if (!CricketHero.GameVars.currentBall) {
                return;
            }
            CricketHero.GameVars.gameData.ballsMissed++;
            MatchManager.checkBallStreak(false);
            if (!(CricketHero.GameVars.currentBall.ballType === CricketHero.BallsManager.BALL && CricketHero.GameVars.matchData.missedBalls === 3)) {
                MatchManager.throwItem();
            }
            CricketHero.GameVars.currentBall = null;
        };
        MatchManager.hitBallLeftStage = function () {
            if (CricketHero.GameVars.currentBall && CricketHero.GameVars.currentBall.ballType === CricketHero.BallsManager.COIN) {
                CricketHero.HUD.currentInstance.updateCredits();
            }
            CricketHero.GameVars.currentBall = null;
            MatchManager.throwItem();
        };
        MatchManager.ballReachedCenter = function () {
            CricketHero.StageContainer.currentInstance.ballReachedCenter();
            if (CricketHero.GameVars.currentBall.ballType === CricketHero.BallsManager.BALL) {
                CricketHero.GameVars.matchData.missedBalls++;
                CricketHero.GameVars.justHadStrike = true;
                if (CricketHero.ScoreAndBalls.currentInstance) {
                    CricketHero.ScoreAndBalls.currentInstance.updateStrikes();
                }
                if (CricketHero.GameVars.matchData.missedBalls === 3) {
                    MatchManager.gameOver();
                }
            }
        };
        MatchManager.onDownFairy = function () {
            CricketHero.GameVars.matchData.missedBalls--;
            CricketHero.GameVars.refereeJustHit = true;
            CricketHero.DisplayManager.fairyPressed();
            CricketHero.AchievementsManager.onRefereeSmashed();
        };
        MatchManager.ballScheduled = function () {
            CricketHero.GameVars.refereeJustHit = false;
        };
        MatchManager.coinsFrenzyStarts = function () {
            CricketHero.GameVars.coinsFrenzyShown = true;
            var delay = 0;
            if (CricketHero.GameVars.homerun) {
                delay = 3000;
            }
            CricketHero.GameVars.homerun = false;
            MatchManager.game.time.events.add(delay, function () {
                CricketHero.StageContainer.currentInstance.coinsFrenzyStarts();
                MatchManager.game.time.events.add(1500, function () {
                    CricketHero.GameVars.coinsFrenzy = true;
                    MatchManager.game.time.events.add(4000, function () {
                        CricketHero.GameVars.coinsFrenzy = false;
                        CricketHero.StageContainer.currentInstance.coinsFrenzyEnds();
                        CricketHero.GameVars.justHadCoinsFrenzy = true;
                        CricketHero.BallsManager.throwItem();
                    }, this);
                }, this);
            }, this);
        };
        MatchManager.breakStarts = function (duration) {
            if (CricketHero.GameVars.homerun) {
                duration += 3500;
            }
            CricketHero.StageContainer.currentInstance.breakStarts(duration);
            MatchManager.game.time.events.add(duration, function () {
                CricketHero.StageContainer.currentInstance.breakEnds();
                CricketHero.BallsManager.throwItem();
            }, this);
        };
        MatchManager.resumeGameAfterContinue = function () {
            if (!CricketHero.GameVars.gameData.muted) {
                this.game.sound.mute = false;
            }
            CricketHero.GameVars.explosion = false;
            CricketHero.GameVars.stopAction = true;
            CricketHero.GameVars.newRecord = false;
            CricketHero.GameVars.relevantRecord = false;
            CricketHero.GameVars.gameOver = false;
            CricketHero.GameVars.homerunMode = false;
            CricketHero.GameVars.matchData.missedBalls = 2;
            CricketHero.MatchState.currentInstance.resumeGameAfterContinue();
        };
        MatchManager.resumeGameAfterBreak = function () {
            CricketHero.GameVars.enterGameDirectly = false;
            CricketHero.MatchState.currentInstance.resumeGameAfterBreak();
        };
        MatchManager.throwBallAfterBreak = function () {
            CricketHero.GameVars.stopAction = false;
            MatchManager.throwItem();
        };
        MatchManager.ballThrown = function (ball) {
            CricketHero.GameVars.homerun = false;
            CricketHero.GameVars.currentBall = ball;
            CricketHero.GameVars.twoCirclesTutorialJustShown = false;
            CricketHero.GameVars.justHadCoinsFrenzy = false;
            if (this.nextStageState !== CricketHero.StageStateManager.SAME_AS_BEFORE) {
                switch (this.nextStageState) {
                    case CricketHero.StageStateManager.SCALE_UP:
                        if (CricketHero.GameVars.gameData.twoCirclesTutorialShown) {
                            CricketHero.GameVars.matchData.upscaled = true;
                            CricketHero.StageContainer.currentInstance.scaleUp();
                        }
                        break;
                    case CricketHero.StageStateManager.SCALE_DOWN:
                        CricketHero.GameVars.matchData.upscaled = false;
                        CricketHero.StageContainer.currentInstance.scaleDown();
                        break;
                    default:
                        break;
                }
            }
        };
        MatchManager.resumeAction = function () {
            CricketHero.GameVars.stopAction = false;
            CricketHero.GameVars.twoCirclesTutorialJustShown = true;
            CricketHero.GameVars.gameData.twoCirclesTutorialShown = true;
            CricketHero.GameManager.writeGameData();
            CricketHero.MatchState.currentInstance.removeTwoCirclesTutorialLayer();
            MatchManager.game.time.events.add(Phaser.Timer.SECOND, MatchManager.throwItem, MatchManager);
        };
        MatchManager.respawnPlayer = function () {
            CricketHero.StageContainer.currentInstance.respawnPlayer();
        };
        MatchManager.setHeroSide = function (side) {
            CricketHero.GameVars.matchData.heroSide = side;
        };
        MatchManager.playerSetBurnt = function () {
            CricketHero.GameVars.matchData.burnt = true;
        };
        MatchManager.itemHit = function (d) {
            MatchManager.checkBallStreak(true);
            CricketHero.GameVars.currentBall.hit = true;
            var ballType = CricketHero.GameVars.currentBall.ballType;
            switch (ballType) {
                case CricketHero.BallsManager.EGG:
                    CricketHero.GameVars.gameData.tomatoesSmashed++;
                    CricketHero.GameVars.currentBall.tomatoHit();
                    CricketHero.MatchState.currentInstance.tomatoHit();
                    CricketHero.AchievementsManager.onEggSmashed();
                    break;
                case CricketHero.BallsManager.BOMB:
                    CricketHero.GameVars.gameData.bombsSmashed++;
                    CricketHero.GameVars.explosion = true;
                    CricketHero.GameVars.currentBall.bombHit();
                    CricketHero.MatchState.currentInstance.bombHit();
                    CricketHero.AchievementsManager.onBombSmashed();
                    MatchManager.gameOver();
                    break;
                case CricketHero.BallsManager.BALL:
                    CricketHero.GameVars.currentBall.ballHit();
                    var points = 1;
                    if (CricketHero.GameVars.homerunMode && d < 15) {
                        if (CricketHero.GameVars.homeRunType === CricketHero.GameConstants.HOMERUN_6) {
                            points = 6;
                        }
                        else {
                            points = 4;
                        }
                        CricketHero.GameVars.homerun = true;
                        CricketHero.GameVars.homerunMode = false;
                        CricketHero.GameVars.homerunShown = true;
                        CricketHero.StageContainer.currentInstance.homerun();
                    }
                    if (CricketHero.GameVars.isPlayerOnFire) {
                        points *= 2;
                    }
                    CricketHero.GameVars.matchData.score += points;
                    CricketHero.MatchState.currentInstance.ballHit();
                    break;
                case CricketHero.BallsManager.COIN:
                    CricketHero.GameVars.gameData.credits++;
                    CricketHero.GameVars.currentBall.coinHit();
                    CricketHero.MatchState.currentInstance.coinHit();
                    CricketHero.GameManager.writeGameData();
                    break;
                default:
                    break;
            }
            return ballType;
        };
        MatchManager.throwItem = function () {
            CricketHero.GameVars.matchData.itemsThrown++;
            this.nextStageState = CricketHero.StageStateManager.getNextState();
            if (this.nextStageState !== CricketHero.StageStateManager.SAME_AS_BEFORE) {
                switch (this.nextStageState) {
                    case CricketHero.StageStateManager.ACTIVATE_HOME_RUN:
                        if (!CricketHero.GameVars.isPlayerOnFire && !CricketHero.GameVars.homerunShown) {
                            CricketHero.GameVars.homerunMode = true;
                        }
                        break;
                    case CricketHero.StageStateManager.DEACTIVATE_HOME_RUN:
                        CricketHero.GameVars.homerunMode = false;
                        CricketHero.StageContainer.currentInstance.deactivateHomeRun();
                        break;
                    case CricketHero.StageStateManager.SMALL_TARGET_CIRCLE:
                        CricketHero.StageContainer.currentInstance.smallTargetCircle();
                        break;
                    case CricketHero.StageStateManager.NORMAL_TARGET_CIRCLE:
                        CricketHero.StageContainer.currentInstance.restoreTargetCircleSize();
                        break;
                    case CricketHero.StageStateManager.ACTIVATE_TWO_CIRCLES:
                        if (CricketHero.GameVars.matchData.targetCircles !== 2) {
                            CricketHero.GameVars.matchData.targetCircles = 2;
                            CricketHero.StageContainer.currentInstance.activate2CirclesMode();
                        }
                        if (!CricketHero.GameVars.gameData.twoCirclesTutorialShown) {
                            CricketHero.GameVars.stopAction = true;
                        }
                        break;
                    case CricketHero.StageStateManager.ACTIVATE_ONE_CIRCLE:
                        if (CricketHero.GameVars.matchData.targetCircles !== 1) {
                            CricketHero.GameVars.matchData.targetCircles = 1;
                            CricketHero.StageContainer.currentInstance.activate1CircleMode();
                        }
                        break;
                    default:
                        break;
                }
            }
            if (CricketHero.GameVars.stopAction) {
                MatchManager.stopAction();
            }
            else {
                CricketHero.BallsManager.throwItem();
            }
            if (this.nextStageState === CricketHero.StageStateManager.ACTIVATE_HOME_RUN) {
                if (!CricketHero.GameVars.isPlayerOnFire && !CricketHero.GameVars.homerunShown) {
                    if (Math.random() > .85) {
                        CricketHero.GameVars.homeRunType = CricketHero.GameConstants.HOMERUN_6;
                    }
                    else {
                        CricketHero.GameVars.homeRunType = CricketHero.GameConstants.HOMERUN_4;
                    }
                    CricketHero.StageContainer.currentInstance.activateHomeRun();
                }
            }
            CricketHero.GameVars.justHadStrike = false;
            if (CricketHero.GameVars.justSetOnFire) {
                CricketHero.StageContainer.currentInstance.startStreak();
                CricketHero.GameVars.isPlayerOnFire = true;
                CricketHero.GameVars.justSetOnFire = false;
                CricketHero.AchievementsManager.onFireSet();
            }
            if (CricketHero.GameVars.showReferee && CricketHero.GameVars.matchData.missedBalls > 0 && CricketHero.GameVars.matchData.itemsThrown > CricketHero.GameVars.thrownItemsToShowFairy && !CricketHero.GameVars.matchData.fairyShown) {
                CricketHero.GameVars.matchData.fairyShown = true;
                CricketHero.StageContainer.currentInstance.addReferee();
            }
        };
        MatchManager.stopAction = function () {
            CricketHero.MatchState.currentInstance.addTwoCirclesTutorialLayer();
        };
        MatchManager.gameOver = function () {
            CricketHero.GameVars.gameOver = true;
            CricketHero.GameManager.gameOver();
        };
        MatchManager.checkBallStreak = function (hit) {
            if (hit) {
                switch (CricketHero.GameVars.currentBall.ballType) {
                    case CricketHero.BallsManager.EGG:
                        CricketHero.GameVars.ballsStreak = 0;
                        if (CricketHero.GameVars.isPlayerOnFire) {
                            CricketHero.GameVars.isPlayerOnFire = false;
                            CricketHero.StageContainer.currentInstance.endStreak();
                        }
                        break;
                    case CricketHero.BallsManager.BOMB:
                        CricketHero.GameVars.ballsStreak = 0;
                        if (CricketHero.GameVars.isPlayerOnFire) {
                            CricketHero.GameVars.isPlayerOnFire = false;
                            CricketHero.StageContainer.currentInstance.endStreak();
                        }
                        break;
                    case CricketHero.BallsManager.BALL:
                        CricketHero.GameVars.ballsStreak++;
                        if (CricketHero.GameVars.ballsStreak === MatchManager.BALLS_STREAK && CricketHero.GameVars.gameData.twoCirclesTutorialShown) {
                            CricketHero.GameVars.justSetOnFire = true;
                        }
                        break;
                    default:
                        break;
                }
            }
            else {
                if (CricketHero.GameVars.currentBall.ballType === CricketHero.BallsManager.BALL) {
                    CricketHero.GameVars.ballsStreak = 0;
                    if (CricketHero.GameVars.isPlayerOnFire) {
                        CricketHero.GameVars.isPlayerOnFire = false;
                        CricketHero.StageContainer.currentInstance.endStreak();
                    }
                }
            }
        };
        MatchManager.BALLS_STREAK = 10;
        return MatchManager;
    }());
    CricketHero.MatchManager = MatchManager;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var MatchState = (function (_super) {
        __extends(MatchState, _super);
        function MatchState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MatchState.prototype.init = function (args) {
            MatchState.currentInstance = this;
            CricketHero.MatchManager.init(this.game);
            this.pauseLayer = null;
        };
        MatchState.prototype.create = function () {
            var skyContainer = new CricketHero.SkyContainer(this.game);
            this.add.existing(skyContainer);
            this.stageContainer = new CricketHero.StageContainer(this.game);
            this.add.existing(this.stageContainer);
            if (CricketHero.GameVars.enterGameDirectly) {
                this.startLayer = null;
            }
            else {
                this.startLayer = new CricketHero.StartLayer(this.game);
                this.add.existing(this.startLayer);
            }
            this.hud = new CricketHero.HUD(this.game);
            this.add.existing(this.hud);
            this.gui = new CricketHero.GUI(this.game);
            this.add.existing(this.gui);
            if (Math.random() > .995) {
                var bug = new CricketHero.Bug(this.game);
                this.add.existing(bug);
            }
            if (CricketHero.GameVars.replayed) {
                this.game.camera.flash(0x203161, 400);
            }
            CricketHero.AudioManager.playSound("stadium_loop", true);
        };
        MatchState.prototype.shutdown = function () {
            MatchState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        MatchState.prototype.startMatch = function () {
            this.hud.startMatch();
            this.stageContainer.startMatch();
        };
        MatchState.prototype.countdownEnded = function () {
            this.gui.countdownEnded();
        };
        MatchState.prototype.addTwoCirclesTutorialLayer = function () {
            this.gui.pause();
            this.stageContainer.addTwoCirclesTutorialLayer();
        };
        MatchState.prototype.removeTwoCirclesTutorialLayer = function () {
            this.gui.resume();
            this.stageContainer.removeTwoCirclesTutorialLayer();
        };
        MatchState.prototype.pauseGame = function () {
            this.gui.pause();
            this.stageContainer.pause();
            this.pauseLayer = new CricketHero.PauseLayer(this.game);
            this.add.existing(this.pauseLayer);
        };
        MatchState.prototype.resumeGame = function () {
            this.gui.resume();
            this.stageContainer.resumeGame();
            this.pauseLayer.destroy();
            this.pauseLayer = null;
        };
        MatchState.prototype.showHowToHitBallTutorial = function () {
            this.stageContainer.showHowToHitTutorialLayer();
        };
        MatchState.prototype.removeHowToHitBallTutorial = function () {
            this.gui.resume();
            this.stageContainer.removeHowToHitTutorialLayer();
        };
        MatchState.prototype.resumeGameAfterBreak = function () {
            this.gui.resume();
            this.stageContainer.resumeGameAfterBreak();
        };
        MatchState.prototype.gameOver = function () {
            this.gui.pause();
            if (CricketHero.GameVars.matchData.upscaled) {
                this.stageContainer.scaleDown();
            }
            CricketHero.StageContainer.currentInstance.gameOver();
            var delay;
            if (CricketHero.GameVars.relevantRecord) {
                delay = 5500;
            }
            else {
                delay = 1250;
                if (CricketHero.GameVars.explosion) {
                    delay += 1750;
                }
            }
            this.game.time.events.add(delay, function () {
                this.gameOverLayer = new CricketHero.GameOverLayer(this.game);
                this.add.existing(this.gameOverLayer);
            }, this);
        };
        MatchState.prototype.addGameOverLayerAfterAdError = function () {
            this.gameOverLayer = new CricketHero.GameOverLayer(this.game);
            this.add.existing(this.gameOverLayer);
        };
        MatchState.prototype.ballHit = function () {
            this.stageContainer.ballHit();
        };
        MatchState.prototype.bombHit = function () {
            this.stageContainer.bombHit();
        };
        MatchState.prototype.coinHit = function () {
            this.stageContainer.coinHit();
        };
        MatchState.prototype.tomatoHit = function () {
            var tomatoEffect = new CricketHero.EggEffect(this.game);
            this.add.existing(tomatoEffect);
        };
        MatchState.prototype.removeGameOverLayer = function () {
            if (this.gameOverLayer !== null) {
                this.gameOverLayer.destroy();
                this.gameOverLayer = null;
            }
        };
        MatchState.prototype.resumeGameAfterContinue = function () {
            this.hud.updateCredits();
            this.stageContainer.resumeGameAfterContinue();
        };
        MatchState.prototype.removeWaitingLayer = function () {
            this.game.time.events.add(950, function () {
                this.waitingLayer.destroy();
            }, this);
        };
        return MatchState;
    }(Phaser.State));
    CricketHero.MatchState = MatchState;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var PauseLayer = (function (_super) {
        __extends(PauseLayer, _super);
        function PauseLayer(game) {
            var _this = _super.call(this, game, null, "two-circles-tutorial-layer") || this;
            var transparentLayer = _this.create(0, 0, _this.game.cache.getBitmapData(CricketHero.GameConstants.DARK_BLUE_SQUARE));
            transparentLayer.alpha = .25;
            transparentLayer.scale.set(CricketHero.GameConstants.GAME_WIDTH / CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.GAME_HEIGHT / CricketHero.GameConstants.BITMAP_SIZE);
            transparentLayer.inputEnabled = true;
            transparentLayer.events.onInputDown.add(_this.onDownTransparentLayer, _this);
            var closeButton = new Phaser.Button(_this.game, 5, 5 * CricketHero.GameVars.scaleY, "texture_atlas_1", _this.onBackButtonClicked, _this);
            closeButton.setFrames("button_close_on.png", "button_close_off.png", "button_close_on.png");
            closeButton.scale.y = CricketHero.GameVars.scaleY;
            _this.add(closeButton);
            var resetButton = new Phaser.Button(_this.game, CricketHero.GameConstants.GAME_WIDTH / 2, CricketHero.GameConstants.GAME_HEIGHT / 2 + 190 * CricketHero.GameVars.scaleY, "texture_atlas_4", _this.oResetButtonClicked, _this);
            resetButton.setFrames("button_reset_" + CricketHero.GameVars.gameData.language + "_on.png", "button_reset_" + CricketHero.GameVars.gameData.language + "_off.png", "button_reset_" + CricketHero.GameVars.gameData.language + "_on.png");
            resetButton.anchor.set(.5);
            resetButton.scale.y = CricketHero.GameVars.scaleY;
            _this.add(resetButton);
            var audioButton = new CricketHero.AudioButton(_this.game);
            audioButton.x = 35;
            audioButton.y = CricketHero.GameConstants.GAME_HEIGHT - 35 * CricketHero.GameVars.scaleY;
            audioButton.scale.y = CricketHero.GameVars.scaleY;
            _this.add(audioButton);
            return _this;
        }
        PauseLayer.prototype.onDownTransparentLayer = function () {
            CricketHero.MatchManager.resumeGame();
            CricketHero.AudioManager.playSound("click");
        };
        PauseLayer.prototype.onBackButtonClicked = function (b) {
            b.clearFrames();
            CricketHero.MatchManager.resumeGame();
            CricketHero.AudioManager.playSound("click");
        };
        PauseLayer.prototype.oResetButtonClicked = function (b) {
            b.clearFrames();
            CricketHero.GameManager.replay();
            if (CricketHero.GameVars.isPlayerOnFire) {
                CricketHero.AudioManager.stopSound("on_fire_loop", false, true);
            }
            CricketHero.AudioManager.playSound("click");
        };
        return PauseLayer;
    }(Phaser.Group));
    CricketHero.PauseLayer = PauseLayer;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var Referee = (function (_super) {
        __extends(Referee, _super);
        function Referee(game) {
            var _this = _super.call(this, game, null, "referee") || this;
            Referee.currentInstance = _this;
            _this.a = 0;
            _this.disappearing = false;
            _this.referee = _this.create(400, Referee.PY, "texture_atlas_1", "arbitro_01.png");
            _this.referee.animations.add("fly", Phaser.Animation.generateFrameNames("arbitro_", 1, 8, ".png", 2));
            _this.referee.animations.play("fly", 16, true);
            _this.referee.inputEnabled = true;
            _this.referee.events.onInputDown.add(_this.onDownReferee, _this);
            _this.referee.anchor.set(.5);
            _this.add(_this.referee);
            return _this;
        }
        Referee.prototype.update = function () {
            _super.prototype.update.call(this);
            if (CricketHero.GameVars.paused) {
                return;
            }
            if (!this.disappearing) {
                this.referee.x -= .75;
                this.referee.y = Referee.PY + 65 * Math.cos(this.a);
                this.a += .05;
                if (this.x < -280) {
                    this.destroy();
                }
            }
        };
        Referee.prototype.destroy = function (destroyChildren, soft) {
            Referee.currentInstance = null;
            _super.prototype.destroy.call(this, destroyChildren, soft);
        };
        Referee.prototype.removeFromStage = function () {
            this.game.add.tween(this.referee)
                .to({ alpha: 0 }, 350, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(this.destroy, this);
        };
        Referee.prototype.onDownReferee = function () {
            if (CricketHero.GameVars.paused || this.disappearing || CricketHero.GameVars.gameOver) {
                return;
            }
            this.disappearing = true;
            this.referee.animations.stop();
            this.referee.frameName = "arbitro_smashed.png";
            this.game.add.tween(this.referee)
                .to({ alpha: 0 }, 500, Phaser.Easing.Cubic.Out, true, 500)
                .onComplete.add(this.destroy, this);
            if (CricketHero.GameConstants.SCOREBOARD_DEVELOPMENT) {
                CricketHero.DisplayDevelopmentState.currentInstance.onDownFairy();
            }
            else {
                CricketHero.MatchManager.onDownFairy();
            }
            CricketHero.AudioManager.playSound("fairy_squish");
        };
        Referee.currentInstance = null;
        Referee.PY = -50;
        return Referee;
    }(Phaser.Group));
    CricketHero.Referee = Referee;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var StageContainer = (function (_super) {
        __extends(StageContainer, _super);
        function StageContainer(game) {
            var _this = _super.call(this, game, null, "stage-container") || this;
            StageContainer.currentInstance = _this;
            _this.x = CricketHero.GameConstants.GAME_WIDTH / 2;
            _this.y = _this.game.device.touch ? 290 : CricketHero.GameConstants.GAME_HEIGHT / 2;
            _this.scale.y = CricketHero.GameVars.scaleY;
            _this.referee = null;
            _this.darkLayer = null;
            _this.transparentLayer = _this.create(0, 0, _this.game.cache.getBitmapData(CricketHero.GameConstants.WHITE_SQUARE));
            _this.transparentLayer.anchor.set(.5);
            _this.transparentLayer.scale.set(1.25 * CricketHero.GameConstants.GAME_WIDTH / CricketHero.GameConstants.BITMAP_SIZE, 1.25 * CricketHero.GameConstants.GAME_HEIGHT / CricketHero.GameConstants.BITMAP_SIZE / CricketHero.GameVars.scaleY);
            _this.transparentLayer.alpha = 0;
            _this.transparentLayer.inputEnabled = true;
            _this.transparentLayer.events.onInputDown.add(_this.onDownTransparentLayer, _this);
            _this.spectatorsContainer = new CricketHero.SpectatorsContainer(_this.game);
            _this.add(_this.spectatorsContainer);
            CricketHero.DisplayManager.init(_this.game);
            _this.add(CricketHero.DisplayManager.display);
            _this.fieldBackgroundContainer = new CricketHero.FieldBackgroundContainer(_this.game);
            _this.add(_this.fieldBackgroundContainer);
            _this.ballsContainerBack = new Phaser.Group(_this.game);
            _this.add(_this.ballsContainerBack);
            _this.wickets = new CricketHero.Wickets(_this.game);
            _this.add(_this.wickets);
            _this.heroContainer = new Phaser.Group(_this.game);
            _this.add(_this.heroContainer);
            _this.hero = new CricketHero.Hero(_this.game);
            _this.heroContainer.add(_this.hero);
            _this.fieldPatchesContainer = new Phaser.Group(_this.game);
            _this.add(_this.fieldPatchesContainer);
            _this.fieldBackgroundContainer.addPatches(_this.fieldPatchesContainer, _this.heroContainer);
            if (CricketHero.GameVars.gameData.hitTutorialShown) {
                _this.hitTutorialLayer = null;
            }
            else {
                _this.hitTutorialLayer = new CricketHero.HitTutorialLayer(_this.game);
                _this.add(_this.hitTutorialLayer);
            }
            _this.targetCirclesContainer = new CricketHero.TargetCirclesContainer(_this.game);
            _this.targetCirclesContainer.visible = false;
            _this.add(_this.targetCirclesContainer);
            _this.ballsContainerFront = new Phaser.Group(_this.game);
            _this.add(_this.ballsContainerFront);
            if (!_this.game.device.touch) {
                _this.upArrowKey = _this.game.input.keyboard.addKey(Phaser.Keyboard.UP);
                _this.leftArrowKey = _this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT);
                _this.rightArrowKey = _this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT);
            }
            if (CricketHero.GameConstants.DEBUG) {
                _this.debugObjectsContainer = new CricketHero.DebugObjectsContainer(_this.game);
                _this.add(_this.debugObjectsContainer);
            }
            else {
                _this.debugObjectsContainer = null;
            }
            return _this;
        }
        StageContainer.prototype.update = function () {
            _super.prototype.update.call(this);
            CricketHero.BallsManager.update();
            if (!this.game.device.touch && !CricketHero.GameVars.gameOver) {
                if (this.upArrowKey.justDown) {
                    this.hero.onDownInScene(CricketHero.GameConstants.GAME_WIDTH / 2);
                }
                if (this.leftArrowKey.justDown) {
                    this.hero.onDownInScene(10);
                }
                if (this.rightArrowKey.justDown) {
                    this.hero.onDownInScene(CricketHero.GameConstants.GAME_WIDTH);
                }
            }
        };
        StageContainer.prototype.startMatch = function () {
            if (CricketHero.GameVars.enterGameDirectly) {
                CricketHero.DisplayManager.setState(CricketHero.DisplayManager.AFTER_BREAK_STATE);
                if (!CricketHero.GameVars.matchData.upscaled) {
                    this.scale.set(StageContainer.SCALE_SMALL, StageContainer.SCALE_SMALL * CricketHero.GameVars.scaleY);
                }
            }
            else {
                CricketHero.DisplayManager.setState(CricketHero.DisplayManager.COUNTDOWN_STATE);
                this.scaleDown();
            }
            this.hero.startMatch();
            this.targetCirclesContainer.visible = true;
        };
        StageContainer.prototype.homerun = function () {
            this.targetCirclesContainer.homerun();
            this.hero.homerun();
            CricketHero.DisplayManager.setState(CricketHero.DisplayManager.HOMERUN_STATE);
        };
        StageContainer.prototype.respawnPlayer = function () {
            this.game.time.events.add(200, function () {
                this.hero = new CricketHero.Hero(this.game);
                this.hero.appear();
                this.heroContainer.add(this.hero);
            }, this);
        };
        StageContainer.prototype.pause = function () {
            this.hero.pause();
            CricketHero.BallsManager.pause();
            CricketHero.DisplayManager.pause();
        };
        StageContainer.prototype.resumeGame = function () {
            this.hero.resume();
            CricketHero.BallsManager.resume();
            CricketHero.DisplayManager.resume();
        };
        StageContainer.prototype.activateTargetCircle = function () {
            this.targetCirclesContainer.activateCircle();
            this.fieldBackgroundContainer.animateLine();
        };
        StageContainer.prototype.ballReachedCenter = function () {
            if (CricketHero.GameVars.currentBall.ballType === CricketHero.BallsManager.BALL) {
                CricketHero.DisplayManager.setState(CricketHero.DisplayManager.STRIKE_STATE);
                switch (CricketHero.GameVars.matchData.missedBalls) {
                    case 1:
                        CricketHero.AudioManager.playSound("first_foul");
                        break;
                    case 2:
                        CricketHero.AudioManager.playSound("second_foul");
                        break;
                    case 3:
                        CricketHero.AudioManager.playSound("last_foul");
                        break;
                    default:
                        break;
                }
                this.hero.strike();
                this.spectatorsContainer.strike();
                this.wickets.hit();
            }
            this.targetCirclesContainer.ballReachedCenter();
        };
        StageContainer.prototype.addReferee = function () {
            this.referee = new CricketHero.Referee(this.game);
            CricketHero.DisplayManager.display.add(this.referee);
        };
        StageContainer.prototype.ballHit = function () {
            CricketHero.DisplayManager.updateScore();
            this.spectatorsContainer.celebrate();
            this.game.camera.shake(0.02, 85);
        };
        StageContainer.prototype.coinHit = function () {
            this.game.camera.shake(0.0025, 75);
        };
        StageContainer.prototype.bombHit = function () {
            CricketHero.DisplayManager.explosion();
            var explosion = this.create(CricketHero.GameVars.currentBall.itemSprite.x, CricketHero.GameVars.currentBall.itemSprite.y, "texture_atlas_3");
            explosion.anchor.set(.5);
            explosion.scale.set(1.25);
            explosion.animations.add("explode", Phaser.Animation.generateFrameNames("explosion_", 1, 26, ".png", 2));
            explosion.animations.play("explode", 22, false, true);
            this.fieldBackgroundContainer.explosion();
            this.game.camera.shake(0.025, 400);
            CricketHero.AudioManager.playSound("hit_explode");
        };
        StageContainer.prototype.breakStarts = function (duration) {
            CricketHero.DisplayManager.startBreak(duration);
        };
        StageContainer.prototype.breakEnds = function () {
            CricketHero.DisplayManager.stopBreak();
        };
        StageContainer.prototype.coinsFrenzyStarts = function () {
            CricketHero.DisplayManager.coinsFrenzyStarted();
            this.spectatorsContainer.coinsFrenzyStarts();
            this.swap(CricketHero.DisplayManager.display, this.fieldBackgroundContainer);
            var i = this.getIndex(this.fieldBackgroundContainer);
            this.darkLayer = new CricketHero.DarkLayer(this.game, .45);
            this.addAt(this.darkLayer, i + 1);
        };
        StageContainer.prototype.coinsFrenzyEnds = function () {
            CricketHero.DisplayManager.coinsFrenzyEnds();
            this.spectatorsContainer.coinsFrenzyEnds();
            if (this.darkLayer) {
                this.darkLayer.destroy();
                this.darkLayer = null;
            }
            this.swap(CricketHero.DisplayManager.display, this.fieldBackgroundContainer);
        };
        StageContainer.prototype.activateHomeRun = function () {
            this.targetCirclesContainer.activateHomerunMode();
        };
        StageContainer.prototype.deactivateHomeRun = function () {
            this.targetCirclesContainer.deactivateHomerunMode();
        };
        StageContainer.prototype.scaleUp = function () {
            this.game.add.tween(this.scale)
                .to({ x: 1, y: 1 * CricketHero.GameVars.scaleY }, 300, Phaser.Easing.Cubic.Out, true);
        };
        StageContainer.prototype.scaleDown = function () {
            var tweenDuration = CricketHero.GameVars.explosion ? 850 : 300;
            this.game.add.tween(this.scale)
                .to({ x: StageContainer.SCALE_SMALL, y: StageContainer.SCALE_SMALL * CricketHero.GameVars.scaleY }, tweenDuration, Phaser.Easing.Cubic.Out, true);
        };
        StageContainer.prototype.smallTargetCircle = function () {
            this.targetCirclesContainer.makeSmall();
        };
        StageContainer.prototype.restoreTargetCircleSize = function () {
            this.targetCirclesContainer.restoreSize();
        };
        StageContainer.prototype.activate2CirclesMode = function () {
            this.targetCirclesContainer.activate2CirclesMode();
            this.hero.activate2CirclesMode();
            CricketHero.DisplayManager.setState(CricketHero.DisplayManager.TWO_CIRCLES_STATE);
        };
        StageContainer.prototype.activate1CircleMode = function () {
            this.targetCirclesContainer.activate1CircleMode();
            CricketHero.DisplayManager.setState(CricketHero.DisplayManager.ONE_CIRCLE_STATE);
        };
        StageContainer.prototype.startStreak = function () {
            this.hero.streakStart();
            this.swap(CricketHero.DisplayManager.display, this.fieldBackgroundContainer);
            var i = this.getIndex(this.fieldBackgroundContainer);
            this.darkLayer = new CricketHero.DarkLayer(this.game, .65);
            this.addAt(this.darkLayer, i + 1);
            CricketHero.DisplayManager.setOnFire();
        };
        StageContainer.prototype.endStreak = function () {
            if (this.darkLayer) {
                this.darkLayer.destroy();
                this.darkLayer = null;
            }
            this.swap(CricketHero.DisplayManager.display, this.fieldBackgroundContainer);
            this.hero.streakEnd();
        };
        StageContainer.prototype.onHoleOpened = function () {
            if (this.darkLayer) {
                this.darkLayer.destroy();
                this.darkLayer = null;
            }
        };
        StageContainer.prototype.gameOver = function () {
            if (this.referee !== null) {
                this.referee.removeFromStage();
            }
            this.hero.gameOver();
            this.spectatorsContainer.gameOver();
            this.targetCirclesContainer.gameOver();
            if (CricketHero.GameVars.explosion) {
                CricketHero.DisplayManager.setState(CricketHero.DisplayManager.GAME_OVER_STATE);
            }
        };
        StageContainer.prototype.resumeGameAfterContinue = function () {
            CricketHero.DisplayManager.onAdShown();
            CricketHero.DisplayManager.setState(CricketHero.DisplayManager.AFTER_BREAK_STATE);
            this.hero.resumeAfterContinue();
            this.targetCirclesContainer.onAdShown();
            this.spectatorsContainer.onAdShown();
            if (this.referee) {
                this.referee.destroy();
                this.referee = null;
            }
        };
        StageContainer.prototype.resumeGameAfterBreak = function () {
            CricketHero.DisplayManager.go();
        };
        StageContainer.prototype.addTwoCirclesTutorialLayer = function () {
            this.transparentLayer.inputEnabled = false;
            var i = this.getIndex(this.targetCirclesContainer);
            this.twoCirclesTutorialLayer = new CricketHero.TwoCirclesTutorialLayer(this.game);
            this.addAt(this.twoCirclesTutorialLayer, i);
            this.bringToTop(CricketHero.DisplayManager.display);
        };
        StageContainer.prototype.removeTwoCirclesTutorialLayer = function () {
            CricketHero.DisplayManager.stateAnimationEnded();
            this.transparentLayer.inputEnabled = true;
            this.twoCirclesTutorialLayer.destroy();
            this.twoCirclesTutorialLayer = null;
            var i = this.getIndex(this.spectatorsContainer);
            this.remove(CricketHero.DisplayManager.display, false);
            this.addAt(CricketHero.DisplayManager.display, i + 1);
        };
        StageContainer.prototype.showHowToHitTutorialLayer = function () {
            this.transparentLayer.inputEnabled = false;
            this.hitTutorialLayer.activate();
        };
        StageContainer.prototype.removeHowToHitTutorialLayer = function () {
            this.transparentLayer.inputEnabled = true;
            this.hitTutorialLayer.destroy();
            this.hero.onDownInScene();
        };
        StageContainer.prototype.onDownTransparentLayer = function (sprite, pointer) {
            this.hero.onDownInScene(pointer.x);
        };
        StageContainer.CIRCLE_PY = 110;
        StageContainer.SCALE_SMALL = .857;
        return StageContainer;
    }(Phaser.Group));
    CricketHero.StageContainer = StageContainer;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var StageStateManager = (function () {
        function StageStateManager() {
        }
        StageStateManager.init = function (game) {
            StageStateManager.game = game;
            if (!CricketHero.GameVars.enterGameDirectly) {
                var stageStateSquences = StageStateManager.game.cache.getJSON("stage-state-data");
                var i = Math.floor(Math.random() * stageStateSquences.length);
                CricketHero.GameVars.matchData.eventsData.eventsSet = stageStateSquences[i].events;
                CricketHero.GameVars.matchData.eventsData.i = 0;
                CricketHero.GameVars.matchData.eventsData.deltaItems = 0;
                CricketHero.GameVars.matchData.eventsData.rounds = 1;
            }
        };
        StageStateManager.getNextState = function () {
            var pendingToAssignState = CricketHero.GameVars.matchData.eventsData.eventsSet[CricketHero.GameVars.matchData.eventsData.i];
            if (pendingToAssignState.ball_number === CricketHero.GameVars.matchData.itemsThrown - CricketHero.GameVars.matchData.eventsData.deltaItems) {
                if (CricketHero.GameVars.matchData.eventsData.i === CricketHero.GameVars.matchData.eventsData.eventsSet.length - 1) {
                    CricketHero.GameVars.matchData.eventsData.i = 0;
                    CricketHero.GameVars.matchData.eventsData.deltaItems = pendingToAssignState.ball_number * CricketHero.GameVars.matchData.eventsData.rounds;
                    CricketHero.GameVars.matchData.eventsData.rounds++;
                }
                else {
                    CricketHero.GameVars.matchData.eventsData.i = CricketHero.GameVars.matchData.eventsData.i + 1;
                }
                return pendingToAssignState.state;
            }
            else {
                return StageStateManager.SAME_AS_BEFORE;
            }
        };
        StageStateManager.SMALL_TARGET_CIRCLE = "small_target_circle";
        StageStateManager.NORMAL_TARGET_CIRCLE = "normal_target_circle";
        StageStateManager.SAME_AS_BEFORE = "same_as_before";
        StageStateManager.ACTIVATE_TWO_CIRCLES = "activate_2_circles";
        StageStateManager.ACTIVATE_ONE_CIRCLE = "activate_one_circle";
        StageStateManager.SCALE_UP = "scale_up";
        StageStateManager.SCALE_DOWN = "scale_down";
        StageStateManager.ACTIVATE_HOME_RUN = "activate_home_run";
        StageStateManager.DEACTIVATE_HOME_RUN = "deactivate_home_run";
        return StageStateManager;
    }());
    CricketHero.StageStateManager = StageStateManager;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var TwoCirclesTutorialLayer = (function (_super) {
        __extends(TwoCirclesTutorialLayer, _super);
        function TwoCirclesTutorialLayer(game) {
            var _this = _super.call(this, game, null, "two-circles-tutorial-layer") || this;
            _this.transparentLayer = _this.create(0, 0, _this.game.cache.getBitmapData(CricketHero.GameConstants.DARK_BLUE_SQUARE));
            _this.transparentLayer.anchor.set(.5);
            _this.transparentLayer.alpha = 0;
            _this.transparentLayer.scale.set(1.5 * CricketHero.GameConstants.GAME_WIDTH / CricketHero.GameConstants.BITMAP_SIZE, 1.5 * CricketHero.GameConstants.GAME_HEIGHT / CricketHero.GameConstants.BITMAP_SIZE / CricketHero.GameVars.scaleY);
            _this.sideLayer = _this.create(0, 0, _this.game.cache.getBitmapData(CricketHero.GameConstants.DARK_BLUE_SQUARE));
            _this.sideLayer.anchor.y = .5;
            _this.sideLayer.alpha = .3;
            _this.sideLayer.scale.set(1.5 * CricketHero.GameConstants.GAME_WIDTH / CricketHero.GameConstants.BITMAP_SIZE, 1.5 * CricketHero.GameConstants.GAME_HEIGHT / CricketHero.GameConstants.BITMAP_SIZE / CricketHero.GameVars.scaleY);
            _this.tapToContinueImage = new Phaser.Image(_this.game, 0, 260, "texture_atlas_4", _this.game.device.touch ? "tap_to_continue_" + CricketHero.GameVars.gameData.language + ".png" : "click_to_continue_" + CricketHero.GameVars.gameData.language + ".png");
            _this.tapToContinueImage.anchor.set(.5);
            _this.tapToContinueImage.visible = false;
            _this.add(_this.tapToContinueImage);
            if (CricketHero.GameVars.gameData.language === CricketHero.GameConstants.LANGUAGE_HI) {
                _this.tapToContinueImage.scale.set(.8, CricketHero.GameVars.scaleY * .8);
            }
            else if (CricketHero.GameVars.gameData.language === CricketHero.GameConstants.LANGUAGE_PT) {
                _this.tapToContinueImage.scale.set(.75, CricketHero.GameVars.scaleY * .75);
            }
            _this.game.add.tween(_this.tapToContinueImage)
                .to({ alpha: .75 }, 350, Phaser.Easing.Cubic.Out, true, 0, -1, true);
            _this.game.cache.getBitmapFont("alfa_slab_one").font.lineHeight = 32;
            var tapLeftStr;
            var gameText = _this.game.cache.getJSON("game-text")[CricketHero.GameVars.gameData.language];
            if (_this.game.device.touch) {
                tapLeftStr = gameText.TAP_LEFT_SIDE;
            }
            else {
                tapLeftStr = gameText.CLICK_LEFT_SIDE;
            }
            if (CricketHero.GameVars.gameData.language === CricketHero.GameConstants.LANGUAGE_HI) {
                _this.tapLeftLabel = new Phaser.Text(_this.game, 0, 330, tapLeftStr, { font: "32px Arial", fill: "#FFFFFF" });
                _this.tapLeftLabel.fontWeight = "bold";
                _this.tapLeftLabel.wordWrap = true;
                _this.tapLeftLabel.wordWrapWidth = 480;
            }
            else {
                _this.tapLeftLabel = new Phaser.BitmapText(_this.game, 0, 315, "alfa_slab_one", tapLeftStr, 28);
                _this.tapLeftLabel.maxWidth = 480;
            }
            _this.tapLeftLabel.visible = false;
            _this.tapLeftLabel.anchor.set(.5);
            _this.tapLeftLabel.align = "center";
            _this.add(_this.tapLeftLabel);
            _this.handCursorContainer = new Phaser.Group(_this.game);
            _this.handCursorContainer.x = -125;
            _this.handCursorContainer.y = 120;
            _this.add(_this.handCursorContainer);
            var handCursor = new Phaser.Image(_this.game, -65, 10, "texture_atlas_1", "hand-cursor.png");
            handCursor.anchor.x = 1;
            handCursor.scale.x = -1;
            _this.handCursorContainer.add(handCursor);
            _this.game.add.tween(handCursor.scale)
                .to({ x: -1.1, y: 1.1 }, 350, Phaser.Easing.Cubic.Out, true, 0, -1, true);
            _this.game.time.events.add(1250, _this.activateTransparentLayer, _this);
            _this.game.add.tween(_this.transparentLayer)
                .to({ alpha: .35 }, 850, Phaser.Easing.Cubic.Out, true);
            return _this;
        }
        TwoCirclesTutorialLayer.prototype.activateTransparentLayer = function () {
            this.handCursorContainer.visible = true;
            this.game.time.events.add(1750, function () {
                this.tapToContinueImage.visible = true;
                this.tapLeftLabel.visible = true;
                this.transparentLayer.inputEnabled = true;
                this.transparentLayer.events.onInputDown.add(this.onDownTransparentLayer, this);
            }, this);
        };
        TwoCirclesTutorialLayer.prototype.onDownTransparentLayer = function (sprite, p) {
            if (p.x > CricketHero.GameConstants.GAME_WIDTH / 2) {
                return;
            }
            CricketHero.StageContainer.currentInstance.hero.changeHeroSide(CricketHero.GameConstants.LEFT);
            CricketHero.MatchManager.resumeAction();
        };
        return TwoCirclesTutorialLayer;
    }(Phaser.Group));
    CricketHero.TwoCirclesTutorialLayer = TwoCirclesTutorialLayer;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var Wickets = (function (_super) {
        __extends(Wickets, _super);
        function Wickets(game) {
            var _this = _super.call(this, game, null, "wickets") || this;
            var spriterFile = new Spriter.SpriterXml(_this.game.cache.getXML("wickets"), { imageNameType: Spriter.eImageNameType.ORIGINAL });
            var spriterLoader = new Spriter.Loader();
            var spriterData = spriterLoader.load(spriterFile);
            _this.wickets = new Spriter.SpriterGroup(_this.game, spriterData, "texture_atlas_3", "wickets", 0, 2);
            _this.wickets.onLoop.add(_this.onLoop, _this);
            _this.wickets.y = 65;
            _this.wickets.playAnimationByName("idle");
            _this.add(_this.wickets);
            return _this;
        }
        Wickets.prototype.update = function () {
            _super.prototype.update.call(this);
            if (CricketHero.GameVars.paused) {
                return;
            }
            this.wickets.updateAnimation();
        };
        Wickets.prototype.hit = function () {
            this.wickets.setAnimationSpeedPercent(4);
            if (Math.random() > .5) {
                this.wickets.playAnimationByName("anim_01");
            }
            else {
                this.wickets.playAnimationByName("anim_02");
            }
        };
        Wickets.prototype.onLoop = function () {
            if (this.wickets.currentAnimationName === "anim_01") {
                this.wickets.setAnimationSpeedPercent(8);
                this.wickets.playAnimationByName("anim_01_back");
            }
            else if (this.wickets.currentAnimationName === "anim_02") {
                this.wickets.setAnimationSpeedPercent(8);
                this.wickets.playAnimationByName("anim_02_back");
            }
            else if (this.wickets.currentAnimationName === "anim_01_back" || this.wickets.currentAnimationName === "anim_02_back") {
                this.wickets.playAnimationByName("idle");
            }
        };
        return Wickets;
    }(Phaser.Group));
    CricketHero.Wickets = Wickets;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var Ball = (function (_super) {
        __extends(Ball, _super);
        function Ball(game) {
            var _this = _super.call(this, game, null, "ball") || this;
            _this.glow = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "glow.png");
            _this.glow.anchor.set(.5);
            _this.glow.alpha = 0;
            _this.glow.visible = false;
            _this.add(_this.glow);
            _this.impact = _this.create(0, 0, "texture_atlas_1", "impact_a_0001.png");
            _this.impact.anchor.set(.5);
            _this.impact.animations.add("hit", Phaser.Animation.generateFrameNames("impact_a_", 1, 11, ".png", 4));
            _this.impact.visible = false;
            _this.coinHitEffect = _this.create(0, 0, "texture_atlas_1", "coin_hit_fx_01.png");
            _this.coinHitEffect.anchor.set(.5);
            _this.coinHitEffect.animations.add("hit", Phaser.Animation.generateFrameNames("coin_hit_fx_", 1, 14, ".png", 2));
            _this.coinHitEffect.visible = false;
            _this.itemSprite = _this.create(0, 0, "texture_atlas_1");
            _this.itemSprite.anchor.set(.5);
            _this.itemSprite.animations.add("spin-ball", Phaser.Animation.generateFrameNames("ball_", 1, 13, ".png", 2));
            _this.itemSprite.animations.add("spin-basket-ball", Phaser.Animation.generateFrameNames("ball_basket_", 1, 13, ".png", 4));
            _this.itemSprite.animations.add("spin-coin", Phaser.Animation.generateFrameNames("coin_", 1, 8, ".png", 4));
            _this.itemSprite.animations.add("spin-bomb", Phaser.Animation.generateFrameNames("bomb_", 1, 3, ".png", 2));
            _this.bouncingImpact = new Phaser.Graphics(_this.game);
            _this.bouncingImpact.beginFill(0xFFFFFF, .75);
            _this.bouncingImpact.drawCircle(0, 0, 40);
            _this.bouncingImpact.visible = false;
            _this.bouncingImpact.scale.set(0, 0);
            _this.addAt(_this.bouncingImpact, 0);
            _this.smoke = _this.create(0, 0, "texture_atlas_1", "smoke_00.png");
            _this.smoke.anchor.set(.5);
            _this.smoke.animations.add("explode", Phaser.Animation.generateFrameNames("smoke_", 1, 13, ".png", 2));
            _this.smoke.visible = false;
            _this.trail = new CricketHero.Trail(_this.game, _this);
            _this.add(_this.trail);
            return _this;
        }
        Ball.prototype.update = function () {
            if (this.trajectory === null) {
                return;
            }
            this.trajectory.update();
            this.itemSprite.x = this.trajectory.x;
            this.itemSprite.y = this.trajectory.y;
            this.itemSprite.angle = this.trajectory.angle;
            this.itemSprite.scale.set(this.trajectory.scale);
            this.itemSprite.alpha = this.trajectory.alpha;
            if (!CricketHero.GameVars.gameData.hitTutorialShown && !CricketHero.GameVars.editingLevels) {
                var collisionData = CricketHero.MatchManager.isBallInsideTargetCircle();
                if (!CricketHero.GameVars.paused && collisionData.insideCircle) {
                    CricketHero.MatchManager.showHowToHitBallTutorial();
                }
            }
            _super.prototype.update.call(this);
        };
        Ball.prototype.reset = function (ballType) {
            this.itemSprite.tint = 0xffffff;
            this.ballType = ballType;
            this.movingTowardsCenter = false;
            this.ballRadius = 37.5;
            this.smoke.visible = false;
            this.trajectory = null;
            this.trail.visible = true;
            this.glow.visible = false;
            this.impact.visible = false;
            this.coinHitEffect.visible = false;
            this.hit = false;
            var trailColor;
            switch (this.ballType) {
                case CricketHero.BallsManager.BALL:
                    trailColor = 0xFDFA9C;
                    this.itemSprite.animations.play("spin-ball", 16, true);
                    break;
                case CricketHero.BallsManager.EGG:
                    trailColor = 0xaad3d0;
                    this.itemSprite.animations.stop();
                    this.itemSprite.frameName = "huevo.png";
                    break;
                case CricketHero.BallsManager.BOMB:
                    trailColor = 0x000000;
                    this.itemSprite.animations.stop();
                    this.itemSprite.animations.play("spin-bomb", 14, true);
                    break;
                case CricketHero.BallsManager.COIN:
                    trailColor = 0xFDFA9C;
                    this.itemSprite.animations.play("spin-coin", 10, true);
                    break;
                default:
                    break;
            }
            this.trail.reset(trailColor);
        };
        Ball.prototype.launch = function (itemThrowingData) {
            this.visible = true;
            this.movingTowardsCenter = true;
            this.itemSprite.worldPosition.set(1e5, 1e5);
            switch (itemThrowingData.trajectoryType) {
                case CricketHero.Trajectory.STRAIGHT_TRAJECTORY:
                    this.trajectory = new CricketHero.StraightTrajectory(this.game, itemThrowingData, this);
                    break;
                case CricketHero.Trajectory.STRAIGHT_WITH_EFFECT_TRAJECTORY:
                    this.trajectory = new CricketHero.StraightWithEffectTrajectory(this.game, itemThrowingData, this);
                    break;
                case CricketHero.Trajectory.PARABOLIC_TRAJECTORY:
                    this.trajectory = new CricketHero.ParabollicTrajectory(this.game, itemThrowingData, this);
                    break;
                case CricketHero.Trajectory.BOUNCING_TRAJECTORY:
                    this.trajectory = new CricketHero.BouncingTrajectory(this.game, itemThrowingData, this);
                    break;
                case CricketHero.Trajectory.CURVE_TRAJECTORY:
                    this.trajectory = new CricketHero.CurveTrajectory(this.game, itemThrowingData, this);
                    break;
                default:
            }
            if (CricketHero.GameConstants.DEBUG) {
                var debugObjectsContainer = CricketHero.StageContainer.currentInstance.debugObjectsContainer;
                debugObjectsContainer.clearBallGraphics();
            }
            if (itemThrowingData.trajectoryType === CricketHero.Trajectory.CURVE_TRAJECTORY) {
                CricketHero.AudioManager.playSound("temp_curve_ball");
            }
            else {
                var rnd = Math.floor(Math.random() * 4) + 1;
                CricketHero.AudioManager.playSound("swish_0" + rnd);
            }
        };
        Ball.prototype.pause = function () {
            if (this.ballType === CricketHero.BallsManager.BALL || this.ballType === CricketHero.BallsManager.BOMB || this.ballType === CricketHero.BallsManager.COIN) {
                this.itemSprite.animations.stop();
            }
        };
        Ball.prototype.resume = function () {
            switch (this.ballType) {
                case CricketHero.BallsManager.BALL:
                    this.itemSprite.animations.play("spin-ball", 16, true);
                    break;
                case CricketHero.BallsManager.BOMB:
                    this.itemSprite.animations.stop();
                    this.itemSprite.animations.play("spin-bomb", 14, true);
                    break;
                case CricketHero.BallsManager.COIN:
                    this.itemSprite.animations.play("spin-coin", 10, true);
                    break;
                default:
                    break;
            }
        };
        Ball.prototype.hitBallLeftStage = function () {
            CricketHero.MatchManager.hitBallLeftStage();
            if (this.parent) {
                this.parent.removeChild(this);
            }
        };
        Ball.prototype.ballHitGround = function () {
            this.itemSprite.animations.stop();
            this.trail.visible = false;
            this.smoke.visible = true;
            this.smoke.position = this.itemSprite.position.clone();
            this.smoke.position.y += 8;
            this.smoke.animations.play("explode", 30, false)
                .onComplete.add(function () {
                this.visible = false;
                CricketHero.MatchManager.missedBallHitGround();
            }, this);
            CricketHero.AudioManager.playSound("ball_disappear");
        };
        Ball.prototype.ballReachedCenter = function () {
            this.movingTowardsCenter = false;
            CricketHero.StageContainer.currentInstance.ballsContainerBack.add(this);
            CricketHero.MatchManager.ballReachedCenter();
        };
        Ball.prototype.ballHit = function () {
            this.hit = true;
            this.movingTowardsCenter = false;
            this.trajectory.ballHit();
            var ballPosition = this.itemSprite.position.clone();
            this.glow.visible = true;
            this.glow.position = ballPosition;
            this.game.add.tween(this.glow)
                .to({ alpha: 1 }, 120, Phaser.Easing.Cubic.Out, true, 0, 0, true);
            this.impact.visible = true;
            this.impact.position = ballPosition;
            this.impact.animations.play("hit", 30, false);
        };
        Ball.prototype.coinHit = function () {
            this.movingTowardsCenter = false;
            this.itemSprite.animations.stop("spin");
            this.itemSprite.frameName = "coin_0001.png";
            var currentScale = this.itemSprite.scale.x;
            this.game.add.tween(this.itemSprite.scale)
                .to({ x: 1.1 * currentScale, y: 1.1 * currentScale }, 200, Phaser.Easing.Cubic.Out, true, 0, 0, true);
            this.coinHitEffect.visible = true;
            this.coinHitEffect.position = this.itemSprite.position.clone();
            this.coinHitEffect.animations.play("hit", 30, false);
            this.trajectory.coinHit();
            CricketHero.AudioManager.playSound("hit_coin");
        };
        Ball.prototype.bombHit = function () {
            if (this.parent) {
                this.parent.removeChild(this);
            }
        };
        Ball.prototype.tomatoHit = function () {
            this.movingTowardsCenter = false;
            CricketHero.MatchManager.hitBallLeftStage();
            this.parent.removeChild(this);
        };
        Ball.prototype.addBouncingImpact = function () {
            this.bouncingImpact.position = new Phaser.Point(this.itemSprite.position.x, this.itemSprite.position.y + this.itemSprite.height / 2);
            this.bouncingImpact.visible = true;
            this.bouncingImpact.alpha = .75;
            this.game.add.tween(this.bouncingImpact.scale)
                .to({ x: 1.2, y: .48 }, 250, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.bouncingImpact)
                .to({ alpha: 0 }, 200, Phaser.Easing.Cubic.Out, true, 125)
                .onComplete.add(function () {
                this.bouncingImpact.visible = false;
            }, this);
            CricketHero.AudioManager.playSound("bounce_ground");
        };
        return Ball;
    }(Phaser.Group));
    CricketHero.Ball = Ball;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var BallsManager = (function () {
        function BallsManager() {
        }
        BallsManager.init = function (game) {
            BallsManager.game = game;
            BallsManager.shotsData = BallsManager.game.cache.getJSON("shots-data");
            BallsManager.i = 0;
            BallsManager.ball = new CricketHero.Ball(this.game);
            BallsManager.firstBallAfterContinue = true;
            BallsManager.currenShot = null;
            BallsManager.launchBallTimerEvent = null;
            BallsManager.frenzyCoinsPool = [];
            BallsManager.frenzyCoinIndex = 0;
            for (var i = 0; i < BallsManager.FRENZY_COINS_NUMBER; i++) {
                BallsManager.frenzyCoinsPool.push(new CricketHero.FrenzyCoin(this.game));
            }
            if (!CricketHero.GameVars.editingLevels) {
                var shotsData = this.game.cache.getJSON("shots-data");
                BallsManager.firstRoundSequences = [];
                BallsManager.secondRoundSequences = [];
                for (var i = 0; i < shotsData.length; i++) {
                    var shotSequence = shotsData[i];
                    if (shotSequence.firstRound) {
                        BallsManager.firstRoundSequences.push(shotSequence.sequenceId);
                    }
                    else {
                        BallsManager.secondRoundSequences.push(shotSequence.sequenceId);
                    }
                }
                BallsManager.firstRoundSequences = Phaser.ArrayUtils.shuffle(BallsManager.firstRoundSequences);
                BallsManager.secondRoundSequences = Phaser.ArrayUtils.shuffle(BallsManager.secondRoundSequences);
                if (CricketHero.GameVars.matchData.itemsThrown < 10) {
                    BallsManager.currentShotsSequence = BallsManager.firstRoundSequences[0];
                }
                else {
                    BallsManager.currentShotsSequence = BallsManager.secondRoundSequences[0];
                }
            }
        };
        BallsManager.update = function () {
            if (CricketHero.GameVars.coinsFrenzy) {
                if (Math.random() > .78 && BallsManager.frenzyCoinIndex < BallsManager.FRENZY_COINS_NUMBER) {
                    var ballsContainer = CricketHero.StageContainer.currentInstance.ballsContainerFront;
                    var frenzyCoin = BallsManager.frenzyCoinsPool[BallsManager.frenzyCoinIndex];
                    if (CricketHero.GameVars.matchData.targetCircles === 2) {
                        if (CricketHero.GameVars.activatedCircleSide === CricketHero.GameConstants.LEFT) {
                            frenzyCoin.x = -CricketHero.TargetCircle.CIRCLE_DX;
                        }
                        else {
                            frenzyCoin.x = CricketHero.TargetCircle.CIRCLE_DX;
                        }
                    }
                    ballsContainer.add(frenzyCoin);
                    frenzyCoin.launch();
                    BallsManager.frenzyCoinIndex++;
                }
            }
        };
        BallsManager.pause = function () {
            if (CricketHero.GameVars.currentBall) {
                CricketHero.GameVars.currentBall.pause();
            }
            else {
                if (BallsManager.launchBallTimerEvent) {
                    BallsManager.game.time.events.pause();
                }
            }
        };
        BallsManager.resume = function () {
            if (CricketHero.GameVars.currentBall) {
                CricketHero.GameVars.currentBall.resume();
            }
            else {
                BallsManager.game.time.events.resume();
            }
        };
        BallsManager.throwItem = function () {
            var shotData = BallsManager.getShotData();
            BallsManager.currenShot = shotData.currentShot;
            var nextShot = shotData.nextShot;
            if (BallsManager.currenShot.itemType === BallsManager.BREAK) {
                CricketHero.MatchManager.breakStarts(BallsManager.currenShot.delay);
                if (CricketHero.GameVars.matchData.targetCircles === 2) {
                    var nextSide = nextShot.targetCircleSide;
                    if (CricketHero.GameVars.twoCirclesTutorialJustShown) {
                        nextSide = CricketHero.GameVars.matchData.heroSide;
                    }
                    CricketHero.MatchManager.setTargetCircleSide(nextSide);
                }
            }
            else if (BallsManager.currenShot.itemType === BallsManager.FRENZY_COIN) {
                CricketHero.MatchManager.coinsFrenzyStarts();
                CricketHero.AudioManager.playSound("coins_frenzy");
            }
            else {
                if (CricketHero.GameVars.matchData.targetCircles === 2) {
                    var side = BallsManager.currenShot.targetCircleSide;
                    if (CricketHero.GameVars.twoCirclesTutorialJustShown) {
                        side = CricketHero.GameVars.matchData.heroSide;
                    }
                    if (side === CricketHero.GameConstants.LEFT) {
                        BallsManager.ball.x = -CricketHero.TargetCircle.CIRCLE_DX;
                    }
                    else {
                        BallsManager.ball.x = CricketHero.TargetCircle.CIRCLE_DX;
                    }
                    CricketHero.MatchManager.setTargetCircleSide(side);
                }
                else {
                    BallsManager.ball.x = 0;
                }
                BallsManager.ball.y = 0;
                if (BallsManager.currenShot.trajectoryType === CricketHero.Trajectory.CURVE_TRAJECTORY) {
                    CricketHero.DisplayManager.setState(CricketHero.DisplayManager.CURVE_BALL_STATE);
                }
                if (BallsManager.currenShot.itemType === BallsManager.BOMB) {
                    CricketHero.DisplayManager.setState(CricketHero.DisplayManager.BOMB_STATE);
                }
                else if (BallsManager.currenShot.itemType === BallsManager.EGG) {
                    CricketHero.DisplayManager.setState(CricketHero.DisplayManager.TOMATO_STATE);
                }
                var delay = BallsManager.getDelay(BallsManager.currenShot);
                BallsManager.launchBallTimerEvent = BallsManager.game.time.events.add(delay, function () {
                    var ballsContainer = CricketHero.StageContainer.currentInstance.ballsContainerFront;
                    ballsContainer.add(BallsManager.ball);
                    BallsManager.ball.reset(BallsManager.currenShot.itemType);
                    BallsManager.ball.launch(BallsManager.currenShot);
                    CricketHero.MatchManager.ballThrown(BallsManager.ball);
                    BallsManager.launchBallTimerEvent = null;
                }, this);
                CricketHero.MatchManager.ballScheduled();
            }
        };
        BallsManager.getDelay = function (currentShot) {
            var delay;
            if (CricketHero.GameVars.matchData.continued && BallsManager.firstBallAfterContinue) {
                BallsManager.firstBallAfterContinue = false;
                delay = currentShot.delay + 1000;
            }
            else {
                delay = currentShot.delay;
            }
            if (CricketHero.GameVars.matchData.itemsThrown > 30) {
                delay *= .65;
            }
            else if (CricketHero.GameVars.matchData.itemsThrown > 15) {
                delay *= .85;
            }
            if (CricketHero.GameVars.isPlayerOnFire && currentShot.itemType === BallsManager.BALL) {
                delay *= .75;
            }
            if (CricketHero.GameVars.justHadStrike || CricketHero.GameVars.justSetOnFire || CricketHero.GameVars.justHadCoinsFrenzy) {
                delay += 850;
            }
            if (CricketHero.GameVars.refereeJustHit) {
                delay += 1500;
            }
            else if (CricketHero.Referee.currentInstance !== null) {
                delay *= 1.25;
            }
            if (CricketHero.GameVars.ballsStreak > 8) {
                delay *= .85;
            }
            if (CricketHero.GameVars.homerun) {
                delay += 2400;
            }
            if (!this.game.device.touch) {
                delay *= .95;
            }
            return delay;
        };
        BallsManager.getShotData = function () {
            var currentShotSequenceData = BallsManager.shotsData[BallsManager.currentShotsSequence];
            var shotData = currentShotSequenceData.shots[BallsManager.i];
            var nextShotData;
            BallsManager.i = BallsManager.i < currentShotSequenceData.shots.length - 1 ? BallsManager.i + 1 : 0;
            if (BallsManager.i === currentShotSequenceData.shots.length - 1) {
                if (CricketHero.GameVars.editingLevels) {
                    BallsManager.nextShotsSequence = BallsManager.currentShotsSequence;
                }
                else {
                    BallsManager.nextShotsSequence = Phaser.ArrayUtils.getRandomItem(BallsManager.secondRoundSequences);
                }
                nextShotData = BallsManager.shotsData[BallsManager.nextShotsSequence].shots[0];
            }
            else if (BallsManager.i === 0) {
                for (var i = 0; i < BallsManager.shotsData[BallsManager.currentShotsSequence].shots.length; i++) {
                    if (BallsManager.shotsData[BallsManager.currentShotsSequence].shots[i].side === CricketHero.Trajectory.FROM_THE_LEFT_SIDE) {
                        BallsManager.shotsData[BallsManager.currentShotsSequence].shots[i].side = CricketHero.Trajectory.FROM_THE_RIGHT_SIDE;
                    }
                    else if (BallsManager.shotsData[BallsManager.currentShotsSequence].shots[i].side === CricketHero.Trajectory.FROM_THE_RIGHT_SIDE) {
                        BallsManager.shotsData[BallsManager.currentShotsSequence].shots[i].side = CricketHero.Trajectory.FROM_THE_LEFT_SIDE;
                    }
                    if (BallsManager.shotsData[BallsManager.currentShotsSequence].shots[i].targetCircleSide === CricketHero.GameConstants.RIGHT) {
                        BallsManager.shotsData[BallsManager.currentShotsSequence].shots[i].targetCircleSide = CricketHero.GameConstants.LEFT;
                    }
                    else {
                        BallsManager.shotsData[BallsManager.currentShotsSequence].shots[i].targetCircleSide = CricketHero.GameConstants.RIGHT;
                    }
                }
                BallsManager.currentShotsSequence = BallsManager.nextShotsSequence;
                nextShotData = BallsManager.shotsData[BallsManager.currentShotsSequence].shots[0];
            }
            else {
                nextShotData = BallsManager.shotsData[BallsManager.currentShotsSequence].shots[BallsManager.i];
            }
            if (CricketHero.GameVars.homerunMode) {
                shotData = {
                    delay: shotData.delay > 1000 ? 1000 : shotData.delay,
                    itemType: BallsManager.BALL,
                    trajectoryType: CricketHero.Trajectory.PARABOLIC_TRAJECTORY,
                    side: shotData.side,
                    targetCircleSide: shotData.targetCircleSide
                };
            }
            else if (BallsManager.shouldCoinBeLaunched()) {
                shotData = {
                    delay: shotData.delay > 1000 ? 1000 : shotData.delay,
                    itemType: BallsManager.COIN,
                    trajectoryType: CricketHero.Trajectory.STRAIGHT_TRAJECTORY,
                    side: shotData.side,
                    targetCircleSide: shotData.targetCircleSide
                };
            }
            else if ((CricketHero.GameVars.homerun || CricketHero.GameVars.isPlayerOnFire) && shotData.itemType === BallsManager.BREAK || (shotData.itemType === BallsManager.FRENZY_COIN && CricketHero.GameVars.coinsFrenzyShown) || (CricketHero.GameVars.homerunMode || CricketHero.GameVars.isPlayerOnFire) && shotData.itemType === BallsManager.FRENZY_COIN) {
                shotData = {
                    delay: shotData.delay > 1000 ? 1000 : shotData.delay,
                    itemType: BallsManager.BALL,
                    trajectoryType: Math.random() > .5 ? CricketHero.Trajectory.PARABOLIC_TRAJECTORY : CricketHero.Trajectory.STRAIGHT_TRAJECTORY,
                    side: shotData.side,
                    targetCircleSide: shotData.targetCircleSide
                };
            }
            else if (shotData.itemType === BallsManager.FRENZY_COIN && (Math.random() > .15 || CricketHero.GameVars.gameData.matchesPlayed < 5)) {
                shotData = {
                    delay: shotData.delay,
                    itemType: BallsManager.BALL,
                    trajectoryType: shotData.trajectoryType,
                    side: shotData.side,
                    targetCircleSide: shotData.targetCircleSide
                };
            }
            return { currentShot: shotData, nextShot: nextShotData };
        };
        BallsManager.shouldCoinBeLaunched = function () {
            var ret = false;
            if (CricketHero.GameVars.matchData.itemsThrown > 5 && Math.random() > .95) {
                ret = true;
            }
            return ret;
        };
        BallsManager.BALL = "ball";
        BallsManager.EGG = "egg";
        BallsManager.BOMB = "bomb";
        BallsManager.COIN = "coin";
        BallsManager.BREAK = "break";
        BallsManager.FRENZY_COIN = "coins_frenzy";
        BallsManager.FRENZY_COINS_NUMBER = 50;
        return BallsManager;
    }());
    CricketHero.BallsManager = BallsManager;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var FrenzyCoin = (function (_super) {
        __extends(FrenzyCoin, _super);
        function FrenzyCoin(game) {
            var _this = _super.call(this, game, null, "ball") || this;
            _this.name = CricketHero.BallsManager.FRENZY_COIN;
            _this.movingTowardsCenter = false;
            _this.itemSprite = _this.create(-2 * CricketHero.GameConstants.GAME_WIDTH, -100, "texture_atlas_1");
            _this.itemSprite.anchor.set(.5);
            _this.itemSprite.animations.add("spin-coin", Phaser.Animation.generateFrameNames("coin_", 1, 8, ".png", 4));
            _this.trail = new CricketHero.Trail(_this.game, _this);
            _this.trail.reset(0xFDFA9C);
            _this.add(_this.trail);
            var side;
            var rnd = Math.random();
            if (rnd > .65) {
                side = CricketHero.Trajectory.FROM_THE_LEFT_SIDE;
            }
            else if (rnd > .35) {
                side = CricketHero.Trajectory.FROM_THE_RIGHT_SIDE;
            }
            else {
                side = CricketHero.Trajectory.FROM_THE_BOTTOM;
            }
            var itemThrowingData = {
                delay: 0,
                itemType: CricketHero.BallsManager.COIN,
                trajectoryType: CricketHero.Trajectory.STRAIGHT_TRAJECTORY,
                side: side,
                targetCircleSide: Math.random() ? CricketHero.GameConstants.RIGHT : CricketHero.GameConstants.LEFT
            };
            _this.trajectory = new CricketHero.StraightTrajectory(_this.game, itemThrowingData, _this, true);
            _this.coinHitEffect = _this.create(0, CricketHero.StageContainer.CIRCLE_PY, "texture_atlas_1", "coin_hit_fx_01.png");
            _this.coinHitEffect.anchor.set(.5);
            _this.coinHitEffect.animations.add("hit", Phaser.Animation.generateFrameNames("coin_hit_fx_", 1, 14, ".png", 2));
            _this.coinHitEffect.visible = false;
            return _this;
        }
        FrenzyCoin.prototype.update = function () {
            _super.prototype.update.call(this);
            if (!this.trajectory) {
                return;
            }
            this.trajectory.update();
            this.itemSprite.x = this.trajectory.x;
            this.itemSprite.y = this.trajectory.y;
            this.itemSprite.angle = this.trajectory.angle;
            this.itemSprite.scale.set(this.trajectory.scale);
            this.itemSprite.alpha = this.trajectory.alpha;
        };
        FrenzyCoin.prototype.pause = function () {
            this.itemSprite.animations.stop();
        };
        FrenzyCoin.prototype.resume = function () {
            this.itemSprite.animations.play("spin-coin", 10, true);
        };
        FrenzyCoin.prototype.launch = function () {
            this.visible = true;
            this.movingTowardsCenter = true;
            var frameRate = 15 + Math.floor(Math.random() * 6);
            this.itemSprite.animations.play("spin-coin", frameRate, true);
        };
        FrenzyCoin.prototype.ballHitGround = function () {
            this.destroy();
        };
        FrenzyCoin.prototype.ballReachedCenter = function () {
            this.movingTowardsCenter = false;
        };
        FrenzyCoin.prototype.coinHit = function () {
            this.movingTowardsCenter = false;
            this.trajectory.coinHit();
            if (!FrenzyCoin.fxAnimationPlaying) {
                FrenzyCoin.fxAnimationPlaying = true;
                this.coinHitEffect.scale.set(1 + .65 * Math.random());
                this.coinHitEffect.visible = true;
                this.coinHitEffect.animations.play("hit")
                    .onComplete.add(function () {
                    FrenzyCoin.fxAnimationPlaying = false;
                    this.coinHitEffect.visible = false;
                }, this);
            }
            CricketHero.AudioManager.playSound("hit_coin");
        };
        FrenzyCoin.prototype.hitFrenzyCoinReachedHUD = function () {
            CricketHero.MatchManager.hitFrenzyCoinReachedHUD();
            this.destroy();
        };
        FrenzyCoin.prototype.bombHit = function () {
            if (this.parent) {
                this.parent.removeChild(this);
            }
        };
        FrenzyCoin.fxAnimationPlaying = false;
        return FrenzyCoin;
    }(Phaser.Group));
    CricketHero.FrenzyCoin = FrenzyCoin;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var Trail = (function (_super) {
        __extends(Trail, _super);
        function Trail(game, item) {
            var _this = _super.call(this, game, null, "trail") || this;
            _this.item = item;
            _this.trailPoints = [];
            _this.trailGraphics = new Phaser.Graphics(_this.game);
            _this.add(_this.trailGraphics);
            return _this;
        }
        Trail.prototype.reset = function (trailColor) {
            this.trailColor = trailColor;
            this.trailPoints.length = 0;
            this.trailGraphics.clear();
        };
        Trail.prototype.preUpdate = function () {
            _super.prototype.preUpdate.call(this);
            if (!this.item.trajectory) {
                return;
            }
            this.trailGraphics.clear();
            this.trailPoints.unshift(this.item.itemSprite.position.clone());
            if (this.trailPoints.length === 18) {
                this.trailPoints.pop();
            }
            var v1 = [];
            var v2 = [];
            var v3 = [];
            var v4 = [];
            if (this.trailPoints.length <= 17 && this.trailPoints.length > 2) {
                for (var i = 0; i < this.trailPoints.length - 1; i++) {
                    if (this.trailPoints[i].x !== 0) {
                        var p1 = new CricketHero.Vector2D(this.trailPoints[i].x, this.trailPoints[i].y);
                        var p2_1 = new CricketHero.Vector2D(this.trailPoints[i + 1].x, this.trailPoints[i + 1].y);
                        var delta = p2_1.minus(p1).normalize();
                        var p3 = delta.getLeftNormal().times(Trail.DELTAS_MAIN_TRACK[i] * this.item.itemSprite.scale.x).plus(p1);
                        var p4 = delta.getRightNormal().times(Trail.DELTAS_MAIN_TRACK[i] * this.item.itemSprite.scale.x).plus(p1);
                        if (p3.magnitudeSquared > 1 && p4.magnitudeSquared > 1) {
                            v1.push(p3);
                            v2.push(p4);
                        }
                        p3 = delta.getLeftNormal().times(Trail.DELTAS_TRANSPARENT_TRACK[i] * this.item.itemSprite.scale.x).plus(p1);
                        p4 = delta.getRightNormal().times(Trail.DELTAS_TRANSPARENT_TRACK[i] * this.item.itemSprite.scale.x).plus(p1);
                        if (p3.magnitudeSquared > 1 && p4.magnitudeSquared > 2) {
                            v3.push(p3);
                            v4.push(p4);
                        }
                    }
                }
            }
            var vertices = [];
            for (var i = 0; i < v3.length; i++) {
                vertices.push(new Phaser.Point(v3[i].x, v3[i].y));
            }
            for (var i = v4.length - 1; i >= 0; i--) {
                vertices.push(new Phaser.Point(v4[i].x, v4[i].y));
            }
            var alphaTrail = (this.item.trajectory.disappearing || this.item.trajectory === null) ? .075 : .15;
            if (this.item.hit) {
                alphaTrail *= 2;
            }
            this.trailGraphics.beginFill(this.trailColor, alphaTrail);
            this.trailGraphics.drawPolygon(vertices);
            this.trailGraphics.endFill();
            vertices.length = 0;
            for (var i = 0; i < v1.length; i++) {
                vertices.push(new Phaser.Point(v1[i].x, v1[i].y));
            }
            for (var i = v2.length - 1; i >= 0; i--) {
                vertices.push(new Phaser.Point(v2[i].x, v2[i].y));
            }
            alphaTrail = (this.item.trajectory.disappearing || this.item.trajectory === null) ? .175 : .35;
            if (this.item.hit) {
                alphaTrail *= 1.5;
            }
            this.trailGraphics.beginFill(this.trailColor, alphaTrail);
            this.trailGraphics.drawPolygon(vertices);
            this.trailGraphics.endFill();
        };
        Trail.DELTAS_MAIN_TRACK = [12, 12, 9, 9, 8, 8, 7, 7, 6, 5, 4, 2, 0, 0, 0, 0];
        Trail.DELTAS_TRANSPARENT_TRACK = [14, 14, 14, 14, 13, 12, 12, 10, 9, 9, 7, 7, 6, 5, 4, .6];
        return Trail;
    }(Phaser.Group));
    CricketHero.Trail = Trail;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var Trajectory = (function () {
        function Trajectory(game, item) {
            this.game = game;
            this.item = item;
            this.alpha = 1;
            this.scale = 1.75;
            this.angle = 0;
            this.disappearing = false;
            this.framesCounter = 0;
            this.dx = 0;
            this.dy = 0;
            this.hit = false;
            this.tweenYData = [];
            this.tweenXAndScaleData = [];
            this.tweenIndex = 0;
            this.bouncingImpactFrame = 0;
            this.frameCenterReached = 0;
            this.extraFrames = 0;
            this.x = 1e5;
            this.y = 1e5;
            if (this.item.ballType === CricketHero.BallsManager.EGG) {
                this.angle = -70;
                this.game.add.tween(this)
                    .to({ angle: 0 }, 350, Phaser.Easing.Linear.None, true);
            }
        }
        Trajectory.prototype.update = function () {
            if (CricketHero.GameVars.paused || this.hit) {
                return;
            }
            this.x = this.tweenXAndScaleData[this.tweenIndex].x;
            this.scale = this.tweenXAndScaleData[this.tweenIndex].scale;
            this.y = this.tweenYData[this.tweenIndex].y;
            this.tweenIndex++;
            if (this.tweenIndex === this.frameCenterReached) {
                this.disappearing = true;
            }
            if (this.disappearing) {
                this.framesCounter++;
                this.alpha = (1.5 * this.extraFrames - this.framesCounter) / this.extraFrames;
                if (this.framesCounter === 4) {
                    this.item.ballReachedCenter();
                }
                if (this.framesCounter === this.extraFrames) {
                    this.hit = true;
                    this.alpha = .2;
                    this.item.ballHitGround();
                }
            }
            if (CricketHero.GameConstants.DEBUG) {
                var debugObjectsContainer = CricketHero.StageContainer.currentInstance.debugObjectsContainer;
                debugObjectsContainer.drawBallTrajectoryPoint(new Phaser.Point(this.x + this.item.x, this.y + this.item.y), CricketHero.DebugObjectsContainer.RED);
            }
        };
        Trajectory.prototype.ballHit = function () {
            this.hit = true;
            this.alpha = 1;
            var t = 160;
            var px = Math.random() > .5 ? -320 : 320;
            var py = CricketHero.StageContainer.CIRCLE_PY + 175 - 350 * Math.random();
            this.game.add.tween(this)
                .to({ x: px, y: py, scale: 1.4 }, t, Phaser.Easing.Linear.None, true)
                .onComplete.add(function () {
                this.item.hitBallLeftStage();
            }, this);
        };
        Trajectory.prototype.coinHit = function () {
            this.hit = true;
            var px = CricketHero.HUD.currentInstance.x - CricketHero.GameConstants.GAME_WIDTH / 2;
            px -= this.item.x;
            px /= CricketHero.StageContainer.currentInstance.scale.x;
            var py = -CricketHero.GameConstants.GAME_HEIGHT / 2 + CricketHero.HUD.currentInstance.y;
            py /= CricketHero.StageContainer.currentInstance.scale.x;
            py /= CricketHero.GameVars.scaleY;
            var delay = CricketHero.GameVars.coinsFrenzy ? 0 : 250;
            this.game.add.tween(this)
                .to({ x: px, y: py }, 350, Phaser.Easing.Cubic.Out, true, delay)
                .onComplete.add(function () {
                if (this.item.name === CricketHero.BallsManager.FRENZY_COIN) {
                    this.item.hitFrenzyCoinReachedHUD();
                }
                else {
                    this.item.hitBallLeftStage();
                }
            }, this);
        };
        Trajectory.STRAIGHT_TRAJECTORY = "straight";
        Trajectory.STRAIGHT_WITH_EFFECT_TRAJECTORY = "straight_with_effect";
        Trajectory.PARABOLIC_TRAJECTORY = "parabolic";
        Trajectory.CURVE_TRAJECTORY = "curve";
        Trajectory.BOUNCING_TRAJECTORY = "bouncing";
        Trajectory.FROM_THE_LEFT_SIDE = "from_left_side";
        Trajectory.FROM_THE_RIGHT_SIDE = "from_right_side";
        Trajectory.FROM_THE_BOTTOM = "from_bottom";
        return Trajectory;
    }());
    CricketHero.Trajectory = Trajectory;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var BouncingTrajectory = (function (_super) {
        __extends(BouncingTrajectory, _super);
        function BouncingTrajectory(game, itemThrowingData, ball) {
            var _this = _super.call(this, game, ball) || this;
            _this.scale = 1.5;
            if (itemThrowingData.side === CricketHero.Trajectory.FROM_THE_LEFT_SIDE) {
                _this.x = CricketHero.GameVars.randomGenerator.realInRange(-250, -450);
            }
            else {
                _this.x = CricketHero.GameVars.randomGenerator.realInRange(250, 450);
            }
            _this.y = 465 / CricketHero.GameVars.scaleY;
            var d = Math.sqrt(_this.x * _this.x + (_this.y - CricketHero.StageContainer.CIRCLE_PY) * (_this.y - CricketHero.StageContainer.CIRCLE_PY));
            var t = d / BouncingTrajectory.BALL_SPEED;
            var y1 = CricketHero.GameVars.randomGenerator.realInRange(-50, -75);
            var y2 = CricketHero.GameVars.randomGenerator.realInRange(200, 250);
            var y3 = y1 + 20;
            if (CricketHero.GameVars.isPlayerOnFire && _this.item.ballType === CricketHero.BallsManager.BALL) {
                t *= .875;
            }
            if (CricketHero.GameVars.matchData.itemsThrown > 30) {
                t *= .75;
            }
            else if (CricketHero.GameVars.matchData.itemsThrown > 15) {
                t *= .85;
            }
            if (!_this.game.device.touch) {
                t *= .95;
            }
            var t1 = .375 * t;
            var t2 = .275 * t;
            var t3 = .20 * t;
            var t4 = .15 * t;
            var tween = _this.game.add.tween(_this)
                .to({ x: 0, scale: .325 }, t, Phaser.Easing.Linear.None);
            _this.tweenXAndScaleData = tween.generateData(60);
            var tweenA = _this.game.add.tween(_this)
                .to({ y: y1 }, t1, Phaser.Easing.Quadratic.Out);
            _this.tweenYData = tweenA.generateData(60);
            _this.y = _this.tweenYData[_this.tweenYData.length - 1].y;
            var tweenB = _this.game.add.tween(_this)
                .to({ y: y2 }, t2, Phaser.Easing.Quadratic.In);
            _this.tweenYData = _this.tweenYData.concat(tweenB.generateData(60));
            _this.bouncingImpactFrame = _this.tweenYData.length - 1;
            _this.y = _this.tweenYData[_this.tweenYData.length - 1].y;
            var tweenC = _this.game.add.tween(_this)
                .to({ y: y3 }, t3, Phaser.Easing.Quadratic.Out);
            _this.tweenYData = _this.tweenYData.concat(tweenC.generateData(60));
            _this.y = _this.tweenYData[_this.tweenYData.length - 1].y;
            var tweenD = _this.game.add.tween(_this)
                .to({ y: CricketHero.StageContainer.CIRCLE_PY }, t4, Phaser.Easing.Quadratic.In);
            _this.tweenYData = _this.tweenYData.concat(tweenD.generateData(60));
            var deltaElementsArrays = _this.tweenYData.length - _this.tweenXAndScaleData.length;
            for (var i = 0; i < deltaElementsArrays; i++) {
                _this.tweenYData.shift();
            }
            _this.bouncingImpactFrame -= deltaElementsArrays;
            _this.extraFrames = Math.round(_this.tweenXAndScaleData.length / 15);
            _this.frameCenterReached = _this.tweenXAndScaleData.length - _this.extraFrames;
            _this.item.x -= _this.tweenXAndScaleData[_this.frameCenterReached].x;
            _this.item.y = CricketHero.StageContainer.CIRCLE_PY - _this.tweenYData[_this.frameCenterReached].y;
            return _this;
        }
        BouncingTrajectory.prototype.update = function () {
            _super.prototype.update.call(this);
            if (this.tweenIndex === this.bouncingImpactFrame) {
                this.item.addBouncingImpact();
            }
        };
        BouncingTrajectory.BALL_SPEED = .275;
        return BouncingTrajectory;
    }(CricketHero.Trajectory));
    CricketHero.BouncingTrajectory = BouncingTrajectory;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var CurveTrajectory = (function (_super) {
        __extends(CurveTrajectory, _super);
        function CurveTrajectory(game, itemThrowingData, ball) {
            var _this = _super.call(this, game, ball) || this;
            _this.lastBallPositions = [];
            _this.r = 300;
            _this.a = Math.PI * Math.random();
            _this.direction = Math.random() > .5 ? -1 : 1;
            _this.x = -_this.r;
            _this.y = 0;
            var angleFactor;
            var radiusFactor;
            if (CricketHero.GameVars.matchData.itemsThrown > 30) {
                _this.angleFactor = .3;
                _this.radiusFactor = 6;
            }
            else if (CricketHero.GameVars.matchData.itemsThrown > 15) {
                _this.angleFactor = .275;
                _this.radiusFactor = 5.5;
            }
            else {
                _this.angleFactor = .25;
                _this.radiusFactor = 5;
            }
            if (CricketHero.GameVars.isPlayerOnFire && _this.item.ballType === CricketHero.BallsManager.BALL) {
                _this.angleFactor *= 1.25;
                _this.radiusFactor *= 1.25;
            }
            return _this;
        }
        CurveTrajectory.prototype.update = function () {
            if (CricketHero.GameVars.paused || this.hit) {
                return;
            }
            if (this.disappearing) {
                this.x += this.dx;
                this.y += this.dy;
                this.scale *= .975;
                this.alpha = this.scale;
                this.framesCounter++;
                if (this.framesCounter === 4) {
                    this.item.ballReachedCenter();
                }
                if (this.framesCounter === 20) {
                    this.hit = true;
                    this.item.ballHitGround();
                }
            }
            else {
                this.x = this.r * Math.cos(this.a);
                this.y = this.r * Math.sin(this.a) + CricketHero.StageContainer.CIRCLE_PY;
                this.a += (this.direction * this.angleFactor);
                this.r -= this.radiusFactor;
                this.scale *= .976;
                this.lastBallPositions.unshift({ x: this.x, y: this.y });
                if (this.lastBallPositions.length === 6) {
                    this.lastBallPositions.shift();
                }
                if (Phaser.Math.fuzzyEqual(0, this.x, 2.5) && Phaser.Math.fuzzyEqual(CricketHero.StageContainer.CIRCLE_PY, this.y, 2.5)) {
                    this.ballReachedCenter();
                }
            }
        };
        CurveTrajectory.prototype.ballReachedCenter = function () {
            this.disappearing = true;
            this.dx = (this.lastBallPositions[1].x - this.lastBallPositions[0].x) * .045;
            this.dy = (this.lastBallPositions[1].y - this.lastBallPositions[0].y) * .045;
        };
        return CurveTrajectory;
    }(CricketHero.Trajectory));
    CricketHero.CurveTrajectory = CurveTrajectory;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var ParabollicTrajectory = (function (_super) {
        __extends(ParabollicTrajectory, _super);
        function ParabollicTrajectory(game, itemThrowingData, ball) {
            var _this = _super.call(this, game, ball) || this;
            if (itemThrowingData.side === CricketHero.Trajectory.FROM_THE_LEFT_SIDE) {
                _this.x = -CricketHero.GameConstants.GAME_WIDTH / 2 - 165;
            }
            else {
                _this.x = CricketHero.GameConstants.GAME_WIDTH / 2 + 165;
            }
            _this.y = CricketHero.GameVars.randomGenerator.realInRange(0, (320 + 60) / CricketHero.GameVars.scaleY);
            var d = Math.sqrt(_this.x * _this.x + (_this.y - CricketHero.StageContainer.CIRCLE_PY) * (_this.y - CricketHero.StageContainer.CIRCLE_PY));
            var t = d / ParabollicTrajectory.BALL_SPEED;
            if (CricketHero.GameVars.isPlayerOnFire && _this.item.ballType === CricketHero.BallsManager.BALL || CricketHero.GameVars.homerunMode) {
                t *= .875;
            }
            if (CricketHero.GameVars.matchData.itemsThrown > 30) {
                t *= .75;
            }
            else if (CricketHero.GameVars.matchData.itemsThrown > 15) {
                t *= .85;
            }
            if (!_this.game.device.touch) {
                t *= .95;
            }
            var deltaY;
            var t1;
            var t2;
            if (_this.y > 300) {
                deltaY = CricketHero.GameVars.randomGenerator.realInRange(260, 350);
                t1 = .61 * t;
                t2 = .39 * t;
            }
            else if (_this.y > 200) {
                deltaY = CricketHero.GameVars.randomGenerator.realInRange(140, 180);
                t1 = .65 * t;
                t2 = .35 * t;
            }
            else if (_this.y > 100) {
                deltaY = CricketHero.GameVars.randomGenerator.realInRange(125, 250);
                t1 = .625 * t;
                t2 = .475 * t;
            }
            else {
                deltaY = 180;
                t1 = .48 * t;
                t2 = .52 * t;
            }
            var y1 = (_this.y * CricketHero.GameVars.scaleY + CricketHero.StageContainer.CIRCLE_PY) / 2 - deltaY;
            var tween = _this.game.add.tween(_this)
                .to({ x: 0, scale: .25 }, t, Phaser.Easing.Linear.None, false);
            _this.tweenXAndScaleData = tween.generateData(60);
            var tweenA = _this.game.add.tween(_this)
                .to({ y: y1 }, t1, Phaser.Easing.Quadratic.Out);
            _this.tweenYData = tweenA.generateData(60);
            _this.y = _this.tweenYData[_this.tweenYData.length - 1].y;
            var tweenB = _this.game.add.tween(_this)
                .to({ y: CricketHero.StageContainer.CIRCLE_PY }, t2, Phaser.Easing.Quadratic.In);
            _this.tweenYData = _this.tweenYData.concat(tweenB.generateData(60));
            var deltaElementsArrays = _this.tweenYData.length - _this.tweenXAndScaleData.length;
            for (var i = 0; i < deltaElementsArrays; i++) {
                _this.tweenYData.shift();
            }
            _this.extraFrames = Math.round(_this.tweenXAndScaleData.length / 8.5);
            _this.frameCenterReached = _this.tweenXAndScaleData.length - _this.extraFrames;
            _this.item.x -= _this.tweenXAndScaleData[_this.frameCenterReached].x;
            _this.item.y = CricketHero.StageContainer.CIRCLE_PY - _this.tweenYData[_this.frameCenterReached].y;
            return _this;
        }
        ParabollicTrajectory.BALL_SPEED = .435;
        return ParabollicTrajectory;
    }(CricketHero.Trajectory));
    CricketHero.ParabollicTrajectory = ParabollicTrajectory;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var StraightTrajectory = (function (_super) {
        __extends(StraightTrajectory, _super);
        function StraightTrajectory(game, itemThrowingData, item, isFrenzyCoin) {
            var _this = _super.call(this, game, item) || this;
            _this.scale = 3;
            if (itemThrowingData.side === CricketHero.Trajectory.FROM_THE_LEFT_SIDE || itemThrowingData.side === CricketHero.Trajectory.FROM_THE_RIGHT_SIDE) {
                if (itemThrowingData.side === CricketHero.Trajectory.FROM_THE_LEFT_SIDE) {
                    _this.x = -CricketHero.GameConstants.GAME_WIDTH / 2 - 125;
                }
                else {
                    _this.x = CricketHero.GameConstants.GAME_WIDTH / 2 + 125;
                }
                _this.y = CricketHero.GameVars.randomGenerator.realInRange(0, (320 + 40) / CricketHero.GameVars.scaleY);
            }
            else {
                _this.x = Math.round(CricketHero.GameVars.randomGenerator.realInRange(-240, 240));
                _this.y = 500 / CricketHero.GameVars.scaleY;
            }
            var t;
            if (isFrenzyCoin) {
                t = 250;
            }
            else {
                var d = Math.sqrt(_this.x * _this.x + (_this.y - CricketHero.StageContainer.CIRCLE_PY) * (_this.y - CricketHero.StageContainer.CIRCLE_PY));
                t = d / StraightTrajectory.BALL_SPEED;
                if (CricketHero.GameVars.isPlayerOnFire && _this.item.ballType === CricketHero.BallsManager.BALL) {
                    t *= .85;
                }
                if (CricketHero.GameVars.matchData.itemsThrown > 30) {
                    t *= .75;
                }
                else if (CricketHero.GameVars.matchData.itemsThrown > 15) {
                    t *= .875;
                }
                if (!_this.game.device.touch) {
                    t *= .95;
                }
            }
            var tween = _this.game.add.tween(_this)
                .to({ x: 0, y: CricketHero.StageContainer.CIRCLE_PY, scale: .325 }, t, Phaser.Easing.Quartic.Out);
            var tweenData = tween.generateData(60);
            var framesCut = Math.round(tweenData.length * .2);
            tweenData.splice(tweenData.length - framesCut, framesCut);
            for (var i = 0; i < tweenData.length; i++) {
                _this.tweenXAndScaleData.push({ x: tweenData[i].x, scale: tweenData[i].scale });
                _this.tweenYData.push({ y: tweenData[i].y });
            }
            _this.frameCenterReached = _this.tweenXAndScaleData.length - 1;
            _this.item.x -= _this.tweenXAndScaleData[_this.frameCenterReached].x;
            _this.item.y = CricketHero.StageContainer.CIRCLE_PY - _this.tweenYData[_this.frameCenterReached].y;
            var dx = -_this.x;
            var dy = CricketHero.StageContainer.CIRCLE_PY - _this.y;
            var px;
            var py;
            if (itemThrowingData.side === CricketHero.Trajectory.FROM_THE_LEFT_SIDE || itemThrowingData.side === CricketHero.Trajectory.FROM_THE_RIGHT_SIDE) {
                px = _this.x > 0 ? -35 : 35;
                py = px * dy / dx + CricketHero.StageContainer.CIRCLE_PY;
            }
            else {
                px = -25 * dx / dy;
                py = CricketHero.StageContainer.CIRCLE_PY - 25;
            }
            _this.x = 0;
            _this.y = CricketHero.StageContainer.CIRCLE_PY;
            _this.scale = .25;
            tween = _this.game.add.tween(_this)
                .to({ x: px, y: py, scale: .25 }, t * .375, Phaser.Easing.Linear.None);
            tweenData = tween.generateData(60);
            _this.extraFrames = tweenData.length;
            for (var i = 0; i < tweenData.length; i++) {
                _this.tweenXAndScaleData.push({ x: tweenData[i].x, scale: tweenData[i].scale });
                _this.tweenYData.push({ y: tweenData[i].y });
            }
            return _this;
        }
        StraightTrajectory.BALL_SPEED = .55;
        return StraightTrajectory;
    }(CricketHero.Trajectory));
    CricketHero.StraightTrajectory = StraightTrajectory;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var StraightWithEffectTrajectory = (function (_super) {
        __extends(StraightWithEffectTrajectory, _super);
        function StraightWithEffectTrajectory(game, itemThrowingData, ball) {
            var _this = _super.call(this, game, ball) || this;
            if (itemThrowingData.side === CricketHero.Trajectory.FROM_THE_LEFT_SIDE) {
                _this.x = -CricketHero.GameConstants.GAME_WIDTH / 2 - 100;
            }
            else {
                _this.x = CricketHero.GameConstants.GAME_WIDTH / 2 + 100;
            }
            _this.y = CricketHero.GameVars.randomGenerator.realInRange(200, 400);
            var d = Math.sqrt(_this.x * _this.x + (_this.y - CricketHero.StageContainer.CIRCLE_PY) * (_this.y - CricketHero.StageContainer.CIRCLE_PY));
            var t = d / StraightWithEffectTrajectory.BALL_SPEED;
            if (CricketHero.GameVars.isPlayerOnFire && _this.item.ballType === CricketHero.BallsManager.BALL) {
                t *= .875;
            }
            if (CricketHero.GameVars.matchData.itemsThrown > 30) {
                t *= .75;
            }
            else if (CricketHero.GameVars.matchData.itemsThrown > 15) {
                t *= .85;
            }
            var tween = _this.game.add.tween(_this)
                .to({ x: 0, y: CricketHero.StageContainer.CIRCLE_PY, scale: .315 }, t, Phaser.Easing.Quartic.Out);
            var tweenData = tween.generateData(60);
            for (var i = 0; i < tweenData.length; i++) {
                _this.tweenXAndScaleData.push({ x: tweenData[i].x, scale: tweenData[i].scale });
                _this.tweenYData.push({ y: tweenData[i].y });
            }
            tween = _this.game.add.tween(_this)
                .to({ dyParabolicEffect: 0 }, t * .64, Phaser.Easing.Cubic.InOut);
            var tweenDataParabollicEffect = tween.generateData(60);
            for (var i = 0; i < tweenDataParabollicEffect.length; i++) {
                _this.tweenYData[i].y += tweenDataParabollicEffect[i].dyParabolicEffect;
            }
            _this.frameCenterReached = _this.tweenXAndScaleData.length - 1;
            var dx = -_this.x;
            var dy = CricketHero.StageContainer.CIRCLE_PY - _this.y;
            var px = _this.x > 0 ? -35 : 35;
            _this.x = 0;
            _this.y = CricketHero.StageContainer.CIRCLE_PY;
            _this.scale = .315;
            tween = _this.game.add.tween(_this)
                .to({ x: px, y: px * dy / dx + CricketHero.StageContainer.CIRCLE_PY, scale: .25 }, 300, Phaser.Easing.Linear.None);
            tweenData = tween.generateData(60);
            _this.extraFrames = tweenData.length;
            for (var i = 0; i < tweenData.length; i++) {
                _this.tweenXAndScaleData.push({ x: tweenData[i].x, scale: tweenData[i].scale });
                _this.tweenYData.push({ y: tweenData[i].y });
            }
            return _this;
        }
        StraightWithEffectTrajectory.BALL_SPEED = .5;
        return StraightWithEffectTrajectory;
    }(CricketHero.Trajectory));
    CricketHero.StraightWithEffectTrajectory = StraightWithEffectTrajectory;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var EggEffect = (function (_super) {
        __extends(EggEffect, _super);
        function EggEffect(game) {
            var _this = _super.call(this, game, null, "tomato-effect") || this;
            _this.framesCounter = 0;
            _this.stainsCounter = 0;
            _this.x = CricketHero.GameConstants.GAME_WIDTH / 2;
            _this.y = CricketHero.GameConstants.GAME_HEIGHT / 2;
            _this.stains = [];
            for (var i = 0; i < 4; i++) {
                var smashedEgg = new CricketHero.SmashedEgg(_this.game, _this);
                if (i === 0) {
                    smashedEgg.x = EggEffect.STAINS_COORDINATES[i].x;
                    smashedEgg.y = EggEffect.STAINS_COORDINATES[i].y;
                }
                else {
                    smashedEgg.x = EggEffect.STAINS_COORDINATES[i].x + 75 - 150 * Math.random();
                    smashedEgg.y = EggEffect.STAINS_COORDINATES[i].y + 50 - 100 * Math.random();
                    ;
                }
                _this.add(smashedEgg);
                _this.stains.push(smashedEgg);
            }
            return _this;
        }
        EggEffect.prototype.update = function () {
            _super.prototype.update.call(this);
            this.framesCounter++;
            if (this.framesCounter === 25) {
                this.appear();
            }
            if (this.framesCounter === 110) {
                this.disappear();
            }
        };
        EggEffect.prototype.onStainDisappeared = function () {
            this.stainsCounter++;
            if (this.stainsCounter === 4) {
                this.destroy();
            }
        };
        EggEffect.prototype.appear = function () {
            for (var i = 0; i < this.stains.length; i++) {
                this.stains[i].appear(75 * Math.random());
            }
        };
        EggEffect.prototype.disappear = function () {
            for (var i = 0; i < this.stains.length; i++) {
                this.stains[i].disappear(150 * Math.random());
            }
        };
        EggEffect.STAINS_COORDINATES = [
            { x: 0, y: 0 },
            { x: 50, y: -100 },
            { x: -50, y: 100 },
            { x: 70, y: -300 },
            { x: -50, y: 200 }
        ];
        return EggEffect;
    }(Phaser.Group));
    CricketHero.EggEffect = EggEffect;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var SmashedEgg = (function (_super) {
        __extends(SmashedEgg, _super);
        function SmashedEgg(game, eggEffect) {
            var _this = _super.call(this, game, null, "smashed-tomato") || this;
            _this.eggEffect = eggEffect;
            _this.visible = false;
            _this.smashedEgg = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", Math.random() > .5 ? "egg_stain_01.png" : "egg_stain_02.png");
            _this.smashedEgg.anchor.x = .5;
            if (Math.random() > .5) {
                _this.smashedEgg.angle = 90;
                _this.smashedEgg.x = _this.smashedEgg.height / 2;
                _this.smashedEgg.y = _this.smashedEgg.width / 2;
            }
            _this.smashedEgg.scale.set(.75 + .25 * Math.random());
            _this.add(_this.smashedEgg);
            return _this;
        }
        SmashedEgg.prototype.appear = function (delay) {
            delay = delay || 0;
            var s = 1.25 * this.smashedEgg.scale.x;
            this.game.add.tween(this.smashedEgg.scale)
                .to({ x: s, y: s }, 125, Phaser.Easing.Cubic.Out, true, delay)
                .onStart.add(function () {
                this.visible = true;
            }, this);
        };
        SmashedEgg.prototype.disappear = function (delay) {
            delay = delay || 0;
            this.game.add.tween(this)
                .to({ alpha: 0 }, 900, Phaser.Easing.Cubic.Out, true, 300);
            this.game.add.tween(this)
                .to({ y: this.y + 30 }, 1300, Phaser.Easing.Cubic.Out, true, delay);
            this.game.add.tween(this.scale)
                .to({ y: 1.25 }, 1300, Phaser.Easing.Cubic.Out, true, delay)
                .onComplete.add(function () {
                this.eggEffect.onStainDisappeared();
            }, this);
        };
        return SmashedEgg;
    }(Phaser.Group));
    CricketHero.SmashedEgg = SmashedEgg;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var ContinueButtonContainer = (function (_super) {
        __extends(ContinueButtonContainer, _super);
        function ContinueButtonContainer(game) {
            var _this = _super.call(this, game, null, "continue-button-container") || this;
            _this.y = 160 * CricketHero.GameVars.scaleY;
            _this.seconds = 5;
            var buttonFX = new Phaser.Image(_this.game, 0, 80, "texture_atlas_1", "coin_fx_extra.png");
            buttonFX.anchor.set(.5);
            buttonFX.scale.set(0);
            _this.add(buttonFX);
            _this.game.add.tween(buttonFX.scale)
                .to({ x: 1, y: 1 }, 400, Phaser.Easing.Cubic.Out, true, 350, 0, true);
            _this.countDownNumber = new Phaser.Image(_this.game, 0, -10, "texture_atlas_1", "countdown_0005.png");
            _this.countDownNumber.anchor.set(.5);
            _this.countDownNumber.scale.set(.6, .4);
            _this.add(_this.countDownNumber);
            _this.continueButton = new Phaser.Button(_this.game, 0, 70, "texture_atlas_4", _this.onContinueButtonClicked, _this);
            _this.continueButton.setFrames("button_continue_" + CricketHero.GameVars.gameData.language + "_on.png", "button_continue_" + CricketHero.GameVars.gameData.language + "_off.png", "button_continue_" + CricketHero.GameVars.gameData.language + "_on.png");
            _this.continueButton.anchor.set(.5);
            _this.add(_this.continueButton);
            _this.continuePriceLabel = new Phaser.BitmapText(_this.game, -25, 90, "04b03_white", CricketHero.GameConstants.PRICE_CONTINUE.toString(), 28);
            _this.continuePriceLabel.anchor.set(.5);
            _this.add(_this.continuePriceLabel);
            _this.coinIcon = new Phaser.Image(_this.game, 10, 86, "texture_atlas_1", "coin_icon.png");
            _this.coinIcon.anchor.set(.5);
            _this.coinIcon.scale.set(.65);
            _this.add(_this.coinIcon);
            _this.replayButton = new Phaser.Button(_this.game, 0, 70, "texture_atlas_1", _this.onReplayClicked, _this);
            _this.replayButton.setFrames("button_home_on.png", "button_home_off.png", "button_home_on.png");
            _this.replayButton.anchor.set(.5);
            _this.replayButton.visible = false;
            _this.replayButton.onInputUp.add(_this.onReplayButtonUp, _this);
            _this.add(_this.replayButton);
            _this.game.add.tween(_this.countDownNumber.scale)
                .to({ x: 1, y: 1 }, 150, Phaser.Easing.Cubic.Out, true);
            if (CricketHero.GameVars.gameData.credits >= CricketHero.GameConstants.PRICE_CONTINUE) {
                _this.timerEvent = _this.game.time.events.loop(1000, _this.onSecondPassed, _this);
            }
            else {
                _this.timerEvent = null;
                _this.continueButton.y = 0;
                _this.continuePriceLabel.y = 20;
                _this.coinIcon.y = 16;
                _this.continueButton.alpha = .4;
                _this.continueButton.inputEnabled = false;
                _this.continuePriceLabel.alpha = .45;
                _this.coinIcon.alpha = .45;
                _this.countDownNumber.visible = false;
                _this.replayButton.visible = true;
            }
            return _this;
        }
        ContinueButtonContainer.prototype.destroy = function (destroyChildren, soft) {
            if (this.timerEvent) {
                this.timerEvent.pendingDelete = true;
            }
            _super.prototype.destroy.call(this, destroyChildren, soft);
        };
        ContinueButtonContainer.prototype.onSecondPassed = function () {
            this.seconds--;
            if (this.seconds === 0) {
                this.timerEvent.pendingDelete = true;
                this.countDownNumber.visible = false;
                this.continueButton.visible = false;
                this.continuePriceLabel.visible = false;
                this.coinIcon.visible = false;
                this.game.time.events.add(500, function () {
                    this.replayButton.visible = true;
                }, this);
            }
            else {
                this.countDownNumber.frameName = "countdown_000" + this.seconds + ".png";
                this.countDownNumber.scale.set(.6, .4);
                this.game.add.tween(this.countDownNumber.scale)
                    .to({ x: 1, y: 1 }, 150, Phaser.Easing.Cubic.Out, true);
            }
        };
        ContinueButtonContainer.prototype.onContinueButtonClicked = function (b) {
            b.clearFrames();
            CricketHero.GameManager.continueButtonPressed();
            CricketHero.AudioManager.playSound("click");
        };
        ContinueButtonContainer.prototype.onReplayButtonUp = function (b) {
            b.clearFrames();
            if (CricketHero.GameVars.editingLevels) {
                CricketHero.GameManager.goToSequenceSelectionScene();
            }
            else {
                CricketHero.GameManager.replay();
            }
            CricketHero.AudioManager.playSound("click");
        };
        ContinueButtonContainer.prototype.onReplayClicked = function (b) {
        };
        return ContinueButtonContainer;
    }(Phaser.Group));
    CricketHero.ContinueButtonContainer = ContinueButtonContainer;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var GameOverLayer = (function (_super) {
        __extends(GameOverLayer, _super);
        function GameOverLayer(game) {
            var _this = _super.call(this, game, null, "start-layer") || this;
            GameOverLayer.currentInstance = _this;
            CricketHero.GameVars.playing = false;
            _this.x = CricketHero.GameConstants.GAME_WIDTH / 2;
            _this.y = CricketHero.GameConstants.GAME_HEIGHT / 2;
            var transparentLayer = _this.create(0, 0, _this.game.cache.getBitmapData(CricketHero.GameConstants.WHITE_SQUARE));
            transparentLayer.scale.set(CricketHero.GameConstants.GAME_WIDTH / CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.GAME_HEIGHT / CricketHero.GameConstants.BITMAP_SIZE);
            transparentLayer.anchor.set(.5);
            transparentLayer.alpha = 0;
            transparentLayer.inputEnabled = true;
            transparentLayer.events.onInputDown.add(_this.onClickTransparentLayer, _this);
            _this.buttonsContainer = new Phaser.Group(_this.game);
            _this.buttonsContainer.scale.y = CricketHero.GameVars.scaleY;
            _this.add(_this.buttonsContainer);
            if (CricketHero.GameVars.matchData.continued) {
                _this.replayButton = new Phaser.Button(_this.game, 0, 240, "texture_atlas_1", _this.onReplayClicked, _this);
                _this.replayButton.setFrames("button_home_on.png", "button_home_off.png", "button_home_on.png");
                _this.replayButton.anchor.set(.5);
                _this.replayButton.onInputUp.add(_this.onReplayButtonUp, _this);
                _this.buttonsContainer.add(_this.replayButton);
                _this.continueButtonContainer = null;
            }
            else {
                _this.replayButton = null;
                _this.continueButtonContainer = new CricketHero.ContinueButtonContainer(_this.game);
                _this.buttonsContainer.add(_this.continueButtonContainer);
            }
            var audioButton = new CricketHero.AudioButton(_this.game);
            audioButton.x = 35 - CricketHero.GameConstants.GAME_WIDTH / 2;
            audioButton.y = (CricketHero.GameConstants.GAME_HEIGHT / 2 - 35) / CricketHero.GameVars.scaleY;
            _this.buttonsContainer.add(audioButton);
            return _this;
        }
        GameOverLayer.prototype.destroy = function (destroyChildren, soft) {
            GameOverLayer.currentInstance = null;
            _super.prototype.destroy.call(this, destroyChildren, soft);
        };
        GameOverLayer.prototype.onReplayButtonUp = function () {
            CricketHero.GameManager.replay();
            CricketHero.AudioManager.playSound("click");
        };
        GameOverLayer.prototype.onReplayClicked = function () {
        };
        GameOverLayer.prototype.onClickTransparentLayer = function () {
        };
        GameOverLayer.currentInstance = null;
        return GameOverLayer;
    }(Phaser.Group));
    CricketHero.GameOverLayer = GameOverLayer;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var Hero = (function (_super) {
        __extends(Hero, _super);
        function Hero(game) {
            var _this = _super.call(this, game, null, "hero") || this;
            _this.framesCounter = 0;
            _this.heroHitInCoinsFrenzy = false;
            _this.canBat = true;
            _this.burnt = false;
            _this.outOfTheScreen = false;
            _this.setToFall = false;
            _this.x = 125;
            _this.y = 40;
            _this.volumeHitEffect = 1;
            _this.streakAnimation = _this.create(0, 155, "texture_atlas_1", "fx_hit_streak_01.png");
            _this.streakAnimation.anchor.set(.5, 1);
            _this.streakAnimation.animations.add("flame", Phaser.Animation.generateFrameNames("fx_hit_streak_", 1, 4, ".png", 2));
            _this.streakAnimation.visible = false;
            var spriterFile = new Spriter.SpriterXml(_this.game.cache.getXML("cricket-player"), { imageNameType: Spriter.eImageNameType.ORIGINAL });
            var spriterLoader = new Spriter.Loader();
            var spriterData = spriterLoader.load(spriterFile);
            _this.hero = new Spriter.SpriterGroup(_this.game, spriterData, "texture_atlas_3", "cricket-player", 0, 5);
            _this.hero.onLoop.add(_this.onLoop, _this);
            if (CricketHero.GameVars.enterGameDirectly) {
                _this.hero.playAnimationByName("afterAd");
                _this.hero.setAnimationSpeedPercent(3);
                if (CricketHero.GameVars.matchData.burnt) {
                    _this.hero.pushCharMap("burnt");
                }
                _this.changeHeroSide(CricketHero.GameVars.matchData.heroSide);
            }
            else {
                _this.hero.playAnimationByName("idle01");
            }
            _this.add(_this.hero);
            _this.eggAnimation = _this.create(0, 0, "texture_atlas_1");
            _this.eggAnimation.anchor.set(.5);
            _this.eggAnimation.animations.add("smash", Phaser.Animation.generateFrameNames("huevo_", 1, 14, ".png", 2));
            _this.eggAnimation.visible = false;
            return _this;
        }
        Hero.prototype.update = function () {
            _super.prototype.update.call(this);
            if (this.outOfTheScreen) {
                return;
            }
            if (!CricketHero.GameVars.paused) {
                this.hero.updateAnimation();
            }
            if (CricketHero.GameVars.coinsFrenzy) {
                if (this.heroHitInCoinsFrenzy) {
                    this.framesCounter++;
                    if (this.framesCounter === 2) {
                        this.heroHitInCoinsFrenzy = false;
                    }
                    CricketHero.MatchManager.playerHitsInCoinsFrenzyMode();
                }
            }
        };
        Hero.prototype.appear = function () {
            this.canBat = false;
            this.changeHeroSide(CricketHero.GameVars.matchData.heroSide);
            this.hero.y = -650;
            this.hero.playAnimationByName("fall");
            this.game.add.tween(this.hero)
                .to({ y: 0 }, 750, Phaser.Easing.Cubic.In, true, 200)
                .onComplete.add(function () {
                this.canBat = true;
                this.hero.playAnimationByName("idle01");
            }, this);
        };
        Hero.prototype.startMatch = function () {
            if (!CricketHero.GameVars.enterGameDirectly) {
                this.initialJump();
            }
        };
        Hero.prototype.homerun = function () {
            this.hero.playAnimationByName("hit_homerun");
        };
        Hero.prototype.strike = function () {
            this.setToFall = true;
            if (CricketHero.GameVars.matchData.missedBalls === 2) {
            }
            else {
                if (!this.burnt && !CricketHero.GameVars.gameOver && this.hero.currentAnimationName !== "fail") {
                    this.fall();
                }
            }
        };
        Hero.prototype.pause = function () {
        };
        Hero.prototype.resume = function () {
        };
        Hero.prototype.streakStart = function () {
            this.streakAnimation.visible = true;
            this.streakAnimation.animations.play("flame", 18, true);
            this.streakAnimation.alpha = 0;
            this.streakAnimation.scale.set(2, 1.4);
            this.game.add.tween(this.streakAnimation)
                .to({ alpha: 1 }, 750, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.streakAnimation.scale)
                .to({ y: 2 }, 750, Phaser.Easing.Cubic.Out, true);
            CricketHero.AudioManager.playSound("on_fire_start");
            this.game.time.events.add(500, function () {
                CricketHero.AudioManager.playSound("on_fire_loop");
            }, this);
        };
        Hero.prototype.streakEnd = function () {
            this.streakAnimation.visible = false;
            this.streakAnimation.animations.stop("flame");
            CricketHero.AudioManager.playSound("on_fire_end");
            CricketHero.AudioManager.stopSound("on_fire_loop", false, true);
        };
        Hero.prototype.gameOver = function () {
            if (CricketHero.GameVars.explosion) {
                if (this.hero.currentAnimationName !== "bomb") {
                    this.hero.playAnimationByName("bomb");
                    this.hero.setAnimationSpeedPercent(6);
                }
            }
            else {
                if (CricketHero.GameVars.matchData.continued) {
                    this.hero.playAnimationByName("gameover_def");
                    this.hero.setAnimationSpeedPercent(5);
                }
                else {
                    this.hero.playAnimationByName("gameover");
                    this.hero.setAnimationSpeedPercent(5);
                    CricketHero.AudioManager.playSound("gameover_scream");
                }
            }
            CricketHero.AudioManager.stopSound("on_fire_loop", false, true);
        };
        Hero.prototype.onDownInScene = function (px) {
            if (CricketHero.GameVars.enterGameDirectly || !this.canBat || (!CricketHero.GameVars.gameData.hitTutorialShown && !CricketHero.GameVars.editingLevels) || (CricketHero.GameVars.gameOver && !CricketHero.GameVars.currentBall) || CricketHero.GameVars.paused || CricketHero.StartLayer.currentInstance || CricketHero.GameVars.stopAction || (this.hero.currentAnimationName === "hit" && !CricketHero.GameVars.coinsFrenzy) || this.hero.currentAnimationName === "fail") {
                if (this.hero.currentAnimationName === "afterAd") {
                    this.initialJump();
                }
                return;
            }
            if (px && CricketHero.GameVars.matchData.targetCircles === 2) {
                if (px > CricketHero.GameConstants.GAME_WIDTH / 2) {
                    this.changeHeroSide(CricketHero.GameConstants.RIGHT);
                }
                else {
                    this.changeHeroSide(CricketHero.GameConstants.LEFT);
                }
            }
            else {
                CricketHero.MatchManager.setHeroSide(CricketHero.GameConstants.CENTER);
            }
            if (CricketHero.GameVars.coinsFrenzy) {
                if (CricketHero.GameVars.matchData.targetCircles === 2 && CricketHero.GameVars.activatedCircleSide !== CricketHero.GameVars.matchData.heroSide) {
                    this.hero.playAnimationByName("fail");
                    this.hero.setAnimationSpeedPercent(6);
                    CricketHero.AudioManager.playSound("hit_miss");
                }
                else {
                    this.hero.playAnimationByName("hit");
                    this.hero.setAnimationSpeedPercent(6);
                }
                this.heroHitInCoinsFrenzy = true;
                this.framesCounter = 0;
            }
            else {
                var itemHit = CricketHero.MatchManager.playerHits();
                if (itemHit === null) {
                    this.hero.playAnimationByName("fail");
                    this.hero.setAnimationSpeedPercent(6);
                    CricketHero.AudioManager.playSound("hit_miss");
                }
                else {
                    switch (itemHit) {
                        case CricketHero.BallsManager.BALL:
                            if (CricketHero.GameVars.homerun) {
                                this.hero.setAnimationSpeedPercent(3);
                                this.hero.playAnimationByName("hit_racha");
                                CricketHero.AudioManager.playSound("hit_02_alt");
                            }
                            else {
                                this.hero.setAnimationSpeedPercent(6);
                                this.hero.playAnimationByName("hit");
                                if (Math.random() > .5) {
                                    CricketHero.AudioManager.playSound("hit_01_alt");
                                }
                                else {
                                    CricketHero.AudioManager.playSound("hit_02_alt");
                                }
                            }
                            break;
                        case CricketHero.BallsManager.BOMB:
                            if (CricketHero.GameVars.matchData.burnt) {
                                this.hero.playAnimationByName("gameover_def");
                                this.hero.setAnimationSpeedPercent(4);
                            }
                            else {
                                this.burnt = true;
                                this.hero.playAnimationByName("bomb");
                                this.hero.setAnimationSpeedPercent(6);
                                this.hero.pushCharMap("burnt");
                                CricketHero.MatchManager.playerSetBurnt();
                            }
                            break;
                        case CricketHero.BallsManager.EGG:
                            this.hero.playAnimationByName("hit");
                            this.hero.setAnimationSpeedPercent(6);
                            this.eggAnimation.visible = true;
                            this.eggAnimation.angle = 360 * Math.random();
                            this.eggAnimation.animations.play("smash", 20, false)
                                .onComplete.add(function () {
                                this.eggAnimation.visible = false;
                            }, this);
                            CricketHero.AudioManager.playSound("hit_tomato");
                            break;
                        case CricketHero.BallsManager.COIN:
                            this.hero.playAnimationByName("hit");
                            this.hero.setAnimationSpeedPercent(6);
                            break;
                        default:
                            break;
                    }
                }
            }
        };
        Hero.prototype.changeHeroSide = function (side) {
            CricketHero.MatchManager.setHeroSide(side);
            if (CricketHero.GameVars.matchData.heroSide === CricketHero.GameConstants.RIGHT) {
                this.scale.x = 1;
                this.x = Hero.PX_WITH_2_CIRCLES;
            }
            else if (CricketHero.GameVars.matchData.heroSide === CricketHero.GameConstants.LEFT) {
                this.scale.x = -1;
                this.x = -Hero.PX_WITH_2_CIRCLES;
            }
        };
        Hero.prototype.activate2CirclesMode = function () {
            if (CricketHero.GameVars.matchData.heroSide === CricketHero.GameConstants.CENTER) {
                this.game.add.tween(this)
                    .to({ x: Hero.PX_WITH_2_CIRCLES }, 250, Phaser.Easing.Cubic.Out, true);
            }
            else if (CricketHero.GameVars.matchData.heroSide === CricketHero.GameConstants.LEFT) {
                if (this.x !== -Hero.PX_WITH_2_CIRCLES) {
                    this.game.add.tween(this)
                        .to({ x: -Hero.PX_WITH_2_CIRCLES }, 250, Phaser.Easing.Cubic.Out, true);
                }
            }
            else {
                if (this.x !== Hero.PX_WITH_2_CIRCLES) {
                    this.game.add.tween(this)
                        .to({ x: -Hero.PX_WITH_2_CIRCLES }, 250, Phaser.Easing.Cubic.Out, true);
                }
            }
        };
        Hero.prototype.resumeAfterContinue = function () {
            this.setToFall = false;
            this.hero.playAnimationByName("afterAd");
            this.hero.setAnimationSpeedPercent(3);
        };
        Hero.prototype.initialJump = function () {
            this.hero.playAnimationByName("startGame");
            this.hero.setAnimationSpeedPercent(4);
            this.game.time.events.add(200, function () {
                CricketHero.AudioManager.playSound("bat_throw_air");
            }, this);
        };
        Hero.prototype.fall = function () {
            this.canBat = false;
            CricketHero.MatchManager.respawnPlayer();
            CricketHero.StageContainer.currentInstance.fieldBackgroundContainer.openHole();
            this.hero.playAnimationByName("startFall");
            this.streakAnimation.visible = false;
        };
        Hero.prototype.onLoop = function () {
            if (this.hero.currentAnimationName.indexOf("idle") !== -1
                || this.hero.currentAnimationName === "hit"
                || this.hero.currentAnimationName === "tomato"
                || this.hero.currentAnimationName === "hit_racha") {
                if (CricketHero.GameVars.gameOver) {
                    this.gameOver();
                }
                else {
                    var rnd = Math.floor(Math.random() * 7) + 1;
                    this.hero.playAnimationByName("idle0" + rnd);
                    this.hero.setAnimationSpeedPercent(4);
                }
            }
            else if (this.hero.currentAnimationName === "bomb") {
                this.hero.playAnimationByName("bomb_loop");
                this.hero.setAnimationSpeedPercent(6);
            }
            else if (this.hero.currentAnimationName === "gameover") {
                this.hero.playAnimationByName("gameover_loop");
                this.hero.setAnimationSpeedPercent(5);
            }
            else if (this.hero.currentAnimationName === "gameover_def") {
                this.hero.playAnimationByName("gameover_def_loop");
                this.hero.setAnimationSpeedPercent(3);
            }
            else if (this.hero.currentAnimationName === "startGame") {
                var rnd = Math.floor(Math.random() * 7) + 1;
                this.hero.playAnimationByName("idle0" + rnd);
                rnd = Math.floor(Math.random() * 5) + 3;
                this.hero.setAnimationSpeedPercent(4);
                if (CricketHero.GameVars.matchData.continued || CricketHero.GameVars.enterGameDirectly) {
                    CricketHero.MatchManager.resumeGameAfterBreak();
                }
            }
            else if (this.hero.currentAnimationName === "gameover_loop") {
                CricketHero.AudioManager.playSound("hit_gameover", false, this.volumeHitEffect);
                this.volumeHitEffect *= .8;
                if (this.volumeHitEffect < .15) {
                    this.volumeHitEffect = .15;
                }
            }
            else if (this.hero.currentAnimationName === "fail") {
                if (CricketHero.GameVars.gameOver) {
                    this.gameOver();
                }
                else {
                    if (this.setToFall) {
                        this.fall();
                    }
                    else {
                        var rnd = Math.floor(Math.random() * 7) + 1;
                        this.hero.playAnimationByName("idle0" + rnd);
                        this.hero.setAnimationSpeedPercent(4);
                    }
                }
            }
            else if (this.hero.currentAnimationName === "startFall") {
                this.hero.playAnimationByName("fall");
                CricketHero.StageContainer.currentInstance.fieldBackgroundContainer.closeHole();
                this.game.add.tween(this.hero)
                    .to({ y: this.hero.y + 750 }, 750, Phaser.Easing.Cubic.Out, true, 250)
                    .onComplete.add(function () {
                    this.outOfTheScreen = true;
                    CricketHero.StageContainer.currentInstance.fieldBackgroundContainer.hidePatch();
                    this.destroy();
                }, this);
            }
        };
        Hero.PX_WITH_2_CIRCLES = 155;
        return Hero;
    }(Phaser.Group));
    CricketHero.Hero = Hero;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var Display = (function (_super) {
        __extends(Display, _super);
        function Display(game) {
            var _this = _super.call(this, game, null, "display") || this;
            _this.referee = null;
            _this.pauseAnimation = null;
            _this.y = -170;
            _this.scale.set(1.125);
            _this.currentAnimation = null;
            _this.currentAnimation = null;
            _this.rotationContainer = new Phaser.Group(_this.game);
            _this.add(_this.rotationContainer);
            var frame = new Phaser.Image(_this.game, 0, 0, "texture_atlas_4", "board-frame.png");
            frame.anchor.set(.5);
            _this.rotationContainer.add(frame);
            var background = _this.create(0, 0, _this.game.cache.getBitmapData(CricketHero.GameConstants.GRAY_SQUARE));
            background.scale.set(300 / CricketHero.GameConstants.BITMAP_SIZE, 200 / CricketHero.GameConstants.BITMAP_SIZE);
            background.anchor.set(.5);
            _this.rotationContainer.add(background);
            _this.contentContainer = new Phaser.Group(_this.game);
            _this.rotationContainer.add(_this.contentContainer);
            _this.boardMask = new Phaser.Graphics(_this.game, -300 / 2, -200 / 2);
            _this.boardMask.beginFill(0xFFFFFF);
            _this.boardMask.drawRect(0, 0, 300, 200);
            _this.rotationContainer.add(_this.boardMask);
            _this.upperDarkeningLayer = new Phaser.Image(_this.game, -300 / 2, -200 / 2 - 400, "texture_atlas_1", "darkening-layer.png");
            _this.upperDarkeningLayer.scale.set(10, 2);
            _this.upperDarkeningLayer.mask = _this.boardMask;
            _this.rotationContainer.add(_this.upperDarkeningLayer);
            _this.lowerDarkeningLayer = new Phaser.Image(_this.game, -300 / 2, -200 / 2, "texture_atlas_1", "darkening-layer.png");
            _this.lowerDarkeningLayer.scale.set(10, 2);
            _this.lowerDarkeningLayer.mask = _this.boardMask;
            _this.rotationContainer.add(_this.lowerDarkeningLayer);
            var grid = new Phaser.Graphics(_this.game);
            _this.rotationContainer.add(grid);
            var deltaLine = 5;
            grid.lineStyle(.75, 0x000000);
            for (var i = 0; i < Display.NUM_VERT_LINES; i++) {
                grid.moveTo(i * deltaLine - Display.NUM_VERT_LINES / 2 * deltaLine, -100);
                grid.lineTo(i * deltaLine - Display.NUM_VERT_LINES / 2 * deltaLine, 100);
            }
            for (var i = 0; i < Display.NUM_HOR_LINES; i++) {
                grid.moveTo(-150, i * deltaLine - Display.NUM_HOR_LINES / 2 * deltaLine);
                grid.lineTo(150, i * deltaLine - Display.NUM_HOR_LINES / 2 * deltaLine);
            }
            return _this;
        }
        Display.prototype.update = function () {
            _super.prototype.update.call(this);
            this.upperDarkeningLayer.y += 1;
            this.lowerDarkeningLayer.y += 1;
            if (this.lowerDarkeningLayer.y > 400) {
                this.lowerDarkeningLayer.y = this.upperDarkeningLayer.y - 400;
                var tmpImage = this.lowerDarkeningLayer;
                this.lowerDarkeningLayer = this.upperDarkeningLayer;
                this.upperDarkeningLayer = tmpImage;
            }
        };
        Display.prototype.pause = function () {
            this.currentAnimation.pause();
            if (this.disappearingAnimation) {
                this.disappearingAnimation.pause();
            }
            this.pauseAnimation = new CricketHero.Pause(this.game);
            this.contentContainer.add(this.pauseAnimation);
        };
        Display.prototype.resume = function () {
            this.currentAnimation.resume();
            if (this.disappearingAnimation) {
                this.disappearingAnimation.resume();
            }
            this.pauseAnimation.destroy();
        };
        Display.prototype.onAdShwon = function () {
            if (this.referee !== null) {
                this.referee.destroy();
                this.referee = null;
            }
        };
        Display.prototype.addReferee = function () {
            var referee_py = 60;
            var aspectRatio = this.game.scale.aspectRatio;
            if (aspectRatio >= .745) {
                referee_py = 125;
            }
            else if (aspectRatio >= .65) {
                referee_py = 105;
            }
            this.referee = new Phaser.Sprite(this.game, -this.x - 135, -300, "texture_atlas_1", "newRecord_01.png");
            this.referee.anchor.set(.48, .915);
            this.referee.animations.add("fly", Phaser.Animation.generateFrameNames("newRecord_", 1, 7, ".png", 2));
            this.referee.animations.play("fly", 18, true);
            this.add(this.referee);
            this.game.add.tween(this.referee)
                .to({ y: referee_py }, 1250, Phaser.Easing.Cubic.Out, true, 650);
            this.game.add.tween(this.referee.anchor)
                .to({ x: .52 }, 5000, Phaser.Easing.Linear.None, true, 0, -1, true);
            this.game.add.tween(this.referee.anchor)
                .to({ y: 1 }, 8500, Phaser.Easing.Cubic.Out, true, 0, -1, true);
        };
        Display.prototype.extraBall = function () {
            if (CricketHero.GameVars.gameOver) {
                return;
            }
            CricketHero.DisplayManager.blockAnimations();
            var referee_px = CricketHero.Referee.currentInstance.referee.x;
            var referee_py = CricketHero.Referee.currentInstance.referee.y;
            var ball_px = referee_px;
            var ball_py = referee_py + 30;
            var extraBallIcon = new Phaser.Image(this.game, ball_px, ball_py, "texture_atlas_1", "icon_ball_fairy.png");
            extraBallIcon.anchor.set(.5);
            extraBallIcon.angle = -30;
            this.add(extraBallIcon);
            var px;
            var py = 60;
            if (CricketHero.GameVars.matchData.missedBalls === 0) {
                px = -90;
            }
            else if (CricketHero.GameVars.matchData.missedBalls === 1) {
                px = 0;
            }
            this.game.add.tween(extraBallIcon)
                .to({ x: px, y: py, angle: 0 }, 350, Phaser.Easing.Cubic.Out, true, 400)
                .onComplete.add(function () {
                if (CricketHero.GameVars.gameOver) {
                    extraBallIcon.destroy();
                }
                else {
                    var scoreAndBalls = this.currentAnimation;
                    scoreAndBalls.addExtraBall();
                    this.game.add.tween(extraBallIcon)
                        .to({ alpha: 0 }, 200, Phaser.Easing.Cubic.Out, true)
                        .onComplete.add(function () {
                        extraBallIcon.destroy();
                    }, this);
                }
            }, this);
        };
        Display.prototype.addAnimation = function (animation, transition) {
            if (this.currentAnimation !== null) {
                this.currentAnimation.disappear(transition);
                this.disappearingAnimation = this.currentAnimation;
            }
            this.currentAnimation = animation;
            this.currentAnimation.appear(transition, this.contentContainer);
        };
        Display.prototype.explosion = function () {
            if (this.angle !== 0) {
                return;
            }
            var i = this.rotationContainer.length;
            var rnd = Math.floor(Math.random() * 4) + 1;
            var missingPixels = new Phaser.Image(this.game, 0, 0, "texture_atlas_2", "broken_display_0" + rnd + ".png");
            missingPixels.anchor.set(.5);
            missingPixels.scale.set(5);
            missingPixels.smoothed = false;
            missingPixels.visible = false;
            this.rotationContainer.addAt(missingPixels, i - 1);
            this.game.time.events.add(1200, function () {
                missingPixels.visible = true;
            }, this);
            var brokenGlass = new Phaser.Image(this.game, 0, 0, "texture_atlas_1", "broken-glass.png");
            brokenGlass.anchor.set(.5);
            brokenGlass.scale.set(2);
            this.rotationContainer.add(brokenGlass);
            rnd = Math.random();
            if (rnd > .5) {
                brokenGlass.scale.x = -2;
            }
            rnd = Math.random();
            if (rnd > .5) {
                brokenGlass.scale.y = -2;
            }
            var direction = Math.random() > .5 ? 1 : -1;
            this.rotationContainer.x += direction * 100;
            this.x -= direction * 100;
            this.rotationContainer.y += direction * 50;
            this.y -= direction * 50;
            var angle = direction * 8 + 4 * Math.random();
            this.game.add.tween(this.rotationContainer)
                .to({ angle: angle }, 750, Phaser.Easing.Bounce.Out, true, 1550);
        };
        Display.NUM_VERT_LINES = 60;
        Display.NUM_HOR_LINES = 40;
        return Display;
    }(Phaser.Group));
    CricketHero.Display = Display;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var DisplayManager = (function () {
        function DisplayManager() {
        }
        DisplayManager.init = function (game) {
            DisplayManager.game = game;
            DisplayManager.currentState = null;
            DisplayManager.scheduledState = null;
            DisplayManager.display = new CricketHero.Display(this.game);
            DisplayManager.isOnFire = false;
            DisplayManager.animationsBlocked = false;
            if (!CricketHero.GameVars.enterGameDirectly) {
                DisplayManager.setState(DisplayManager.SCROLLING_BOARD_STATE);
            }
        };
        DisplayManager.pause = function () {
            DisplayManager.display.pause();
        };
        DisplayManager.resume = function () {
            DisplayManager.display.resume();
        };
        DisplayManager.blockAnimations = function () {
            DisplayManager.animationsBlocked = true;
        };
        DisplayManager.unBlockAnimations = function () {
            DisplayManager.animationsBlocked = false;
        };
        DisplayManager.onAdShown = function () {
            DisplayManager.display.onAdShwon();
        };
        DisplayManager.setState = function (nextState, appearInstantly) {
            if ((DisplayManager.isOnFire || DisplayManager.animationsBlocked) && nextState !== DisplayManager.GAME_OVER_STATE) {
                return null;
            }
            var animation;
            var animationSkipped = false;
            switch (nextState) {
                case DisplayManager.GAME_OVER_STATE:
                    if (DisplayManager.currentState === DisplayManager.NEW_RECORD_STATE) {
                        animation = new CricketHero.GameOver(this.game);
                        DisplayManager.display.addAnimation(animation, DisplayManager.APPEAR_FROM_THE_LEFT);
                    }
                    else {
                        if (CricketHero.GameVars.newRecord) {
                            animation = new CricketHero.NewRecord(this.game);
                            DisplayManager.display.addAnimation(animation, DisplayManager.APPEAR_FROM_THE_BOTTOM);
                            if (CricketHero.GameVars.relevantRecord) {
                                DisplayManager.display.addReferee();
                            }
                            nextState = DisplayManager.NEW_RECORD_STATE;
                        }
                        else {
                            animation = new CricketHero.GameOver(this.game);
                            DisplayManager.display.addAnimation(animation, DisplayManager.APPEAR_FROM_THE_LEFT);
                            nextState = DisplayManager.GAME_OVER_STATE;
                        }
                    }
                    break;
                case DisplayManager.COINS_FRENZY_STATE:
                    animation = new CricketHero.CoinsFrenzy(this.game);
                    DisplayManager.display.addAnimation(animation, DisplayManager.APPEAR_FROM_THE_BOTTOM);
                    break;
                case DisplayManager.HOMERUN_STATE:
                    animation = new CricketHero.Homerun(this.game);
                    DisplayManager.display.addAnimation(animation, DisplayManager.APPEAR_FROM_THE_TOP);
                    break;
                case DisplayManager.AFTER_BREAK_STATE:
                    animation = new CricketHero.AfterBreak(this.game);
                    DisplayManager.display.addAnimation(animation, DisplayManager.APPEAR_INSTANTLY);
                    break;
                case DisplayManager.SCROLLING_BOARD_STATE:
                    animation = new CricketHero.ScrollingBoard(this.game);
                    DisplayManager.display.addAnimation(animation, DisplayManager.APPEAR_FROM_THE_TOP);
                    break;
                case DisplayManager.COUNTDOWN_STATE:
                    animation = new CricketHero.Countdown(this.game);
                    DisplayManager.display.addAnimation(animation, DisplayManager.APPEAR_FROM_THE_BOTTOM);
                    break;
                case DisplayManager.SCORE_AND_BALLS_STATE:
                    var direction = void 0;
                    switch (DisplayManager.currentState) {
                        case DisplayManager.CURVE_BALL_STATE:
                            direction = DisplayManager.APPEAR_FROM_THE_LEFT;
                            break;
                        case DisplayManager.STRIKE_STATE:
                            direction = DisplayManager.APPEAR_FROM_THE_TOP;
                            break;
                        case DisplayManager.TWO_CIRCLES_STATE:
                            direction = DisplayManager.APPEAR_FROM_THE_BOTTOM;
                            break;
                        case DisplayManager.COINS_FRENZY_STATE:
                            direction = DisplayManager.APPEAR_FROM_THE_TOP;
                            break;
                        default:
                            direction = DisplayManager.APPEAR_FROM_THE_RIGHT;
                            break;
                    }
                    if (appearInstantly) {
                        direction = DisplayManager.APPEAR_INSTANTLY;
                    }
                    animation = new CricketHero.ScoreAndBalls(this.game);
                    DisplayManager.display.addAnimation(animation, direction);
                    break;
                case DisplayManager.STRIKE_STATE:
                    animation = new CricketHero.Strike(this.game);
                    DisplayManager.display.addAnimation(animation, DisplayManager.APPEAR_FROM_THE_BOTTOM);
                    break;
                case DisplayManager.TOMATO_STATE:
                    if (DisplayManager.currentState === DisplayManager.HOMERUN_STATE) {
                        DisplayManager.scheduleState(DisplayManager.TOMATO_STATE);
                        animationSkipped = true;
                    }
                    else if (DisplayManager.currentState !== DisplayManager.STRIKE_STATE && DisplayManager.currentState !== DisplayManager.TOMATO_STATE) {
                        animation = new CricketHero.Tomato(this.game);
                        DisplayManager.display.addAnimation(animation, DisplayManager.APPEAR_FROM_THE_LEFT);
                    }
                    else {
                        animationSkipped = true;
                    }
                    break;
                case DisplayManager.BOMB_STATE:
                    if (DisplayManager.currentState === DisplayManager.STRIKE_STATE || DisplayManager.currentState === DisplayManager.HOMERUN_STATE) {
                        DisplayManager.scheduleState(DisplayManager.BOMB_STATE);
                        animationSkipped = true;
                    }
                    else {
                        animation = new CricketHero.Bomb(this.game);
                        DisplayManager.display.addAnimation(animation, DisplayManager.APPEAR_FROM_THE_LEFT);
                    }
                    break;
                case DisplayManager.CURVE_BALL_STATE:
                    if (DisplayManager.currentState === DisplayManager.HOMERUN_STATE) {
                        DisplayManager.scheduleState(DisplayManager.CURVE_BALL_STATE);
                        animationSkipped = true;
                    }
                    else if (DisplayManager.currentState !== DisplayManager.STRIKE_STATE) {
                        animation = new CricketHero.CurveBall(this.game);
                        DisplayManager.display.addAnimation(animation, DisplayManager.APPEAR_FROM_THE_RIGHT);
                    }
                    else {
                        animationSkipped = true;
                    }
                    break;
                case DisplayManager.TWO_CIRCLES_STATE:
                    if (DisplayManager.currentState !== DisplayManager.HOMERUN_STATE && DisplayManager.currentState !== DisplayManager.STRIKE_STATE) {
                        animation = new CricketHero.TwoCircles(this.game);
                        DisplayManager.display.addAnimation(animation, DisplayManager.APPEAR_FROM_THE_TOP);
                    }
                    else {
                        animationSkipped = true;
                    }
                    break;
                case DisplayManager.ONE_CIRCLE_STATE:
                    if (DisplayManager.currentState !== DisplayManager.HOMERUN_STATE && DisplayManager.currentState !== DisplayManager.STRIKE_STATE) {
                        animation = new CricketHero.OneCircle(this.game);
                        DisplayManager.display.addAnimation(animation, DisplayManager.APPEAR_FROM_THE_TOP);
                    }
                    else {
                        animationSkipped = true;
                    }
                    break;
                case DisplayManager.NEW_RECORD_STATE:
                    animation = new CricketHero.NewRecord(this.game);
                    DisplayManager.display.addAnimation(animation, DisplayManager.APPEAR_FROM_THE_BOTTOM);
                    if (CricketHero.GameVars.relevantRecord) {
                        DisplayManager.display.addReferee();
                    }
                    break;
                case DisplayManager.PLAYER_AHEAD_STATE:
                    animation = new CricketHero.PlayerAhead(this.game);
                    DisplayManager.display.addAnimation(animation, DisplayManager.APPEAR_FROM_THE_RIGHT);
                    break;
                default:
                    break;
            }
            if (!animationSkipped) {
                DisplayManager.currentState = nextState;
            }
            return animation;
        };
        DisplayManager.stateAnimationEnded = function () {
            if (DisplayManager.scheduledState) {
                var animation = void 0;
                switch (DisplayManager.scheduledState) {
                    case DisplayManager.BREAK_STATE:
                        DisplayManager.setState(DisplayManager.SCORE_AND_BALLS_STATE);
                        var dt = DisplayManager.game.time.time - DisplayManager.timeAtWhichStateWasScheduled;
                        DisplayManager.startBreak(DisplayManager.breakDuration - dt);
                        break;
                    case DisplayManager.BOMB_STATE:
                        animation = new CricketHero.Bomb(this.game);
                        DisplayManager.display.addAnimation(animation, DisplayManager.APPEAR_FROM_THE_RIGHT);
                        break;
                    case DisplayManager.TOMATO_STATE:
                        animation = new CricketHero.Tomato(this.game);
                        DisplayManager.display.addAnimation(animation, DisplayManager.APPEAR_FROM_THE_RIGHT);
                        break;
                    case DisplayManager.CURVE_BALL_STATE:
                        animation = new CricketHero.CurveBall(this.game);
                        DisplayManager.display.addAnimation(animation, DisplayManager.APPEAR_FROM_THE_RIGHT);
                        break;
                    case DisplayManager.TWO_CIRCLES_STATE:
                        animation = new CricketHero.TwoCircles(this.game);
                        DisplayManager.display.addAnimation(animation, DisplayManager.APPEAR_FROM_THE_RIGHT);
                        break;
                    default:
                }
                DisplayManager.scheduledState = null;
            }
            else {
                switch (CricketHero.DisplayAnimation.currentAnimation.name) {
                    case DisplayManager.HOMERUN_STATE:
                        DisplayManager.setState(DisplayManager.SCORE_AND_BALLS_STATE);
                        break;
                    case DisplayManager.SCORE_AND_BALLS_STATE:
                        if (CricketHero.GameVars.matchData.missedBalls === 3) {
                            if (CricketHero.GameVars.newRecord) {
                                DisplayManager.setState(DisplayManager.NEW_RECORD_STATE);
                            }
                            else {
                                DisplayManager.setState(DisplayManager.GAME_OVER_STATE);
                            }
                        }
                        break;
                    case DisplayManager.COUNTDOWN_STATE:
                        DisplayManager.setState(DisplayManager.SCORE_AND_BALLS_STATE);
                        if (!CricketHero.GameConstants.SCOREBOARD_DEVELOPMENT) {
                            CricketHero.MatchManager.countdownEnded();
                        }
                        break;
                    case DisplayManager.AFTER_BREAK_STATE:
                        DisplayManager.setState(DisplayManager.SCORE_AND_BALLS_STATE);
                        if (!CricketHero.GameConstants.SCOREBOARD_DEVELOPMENT) {
                            CricketHero.MatchManager.throwBallAfterBreak();
                        }
                        break;
                    case DisplayManager.TOMATO_STATE:
                        DisplayManager.setState(DisplayManager.SCORE_AND_BALLS_STATE);
                        break;
                    case DisplayManager.ONE_CIRCLE_STATE:
                        DisplayManager.setState(DisplayManager.SCORE_AND_BALLS_STATE);
                        break;
                    case DisplayManager.TWO_CIRCLES_STATE:
                        DisplayManager.setState(DisplayManager.SCORE_AND_BALLS_STATE);
                        break;
                    case DisplayManager.CURVE_BALL_STATE:
                        DisplayManager.setState(DisplayManager.SCORE_AND_BALLS_STATE);
                        break;
                    case DisplayManager.STRIKE_STATE:
                        if (CricketHero.GameVars.stopAction) {
                            DisplayManager.setState(DisplayManager.TWO_CIRCLES_STATE);
                        }
                        else {
                            DisplayManager.setState(DisplayManager.SCORE_AND_BALLS_STATE);
                        }
                        break;
                    case DisplayManager.BOMB_STATE:
                        DisplayManager.setState(DisplayManager.SCORE_AND_BALLS_STATE);
                        break;
                    default:
                        break;
                }
            }
        };
        DisplayManager.go = function () {
            if (DisplayManager.currentState === DisplayManager.AFTER_BREAK_STATE) {
                var currentAnimation = DisplayManager.display.currentAnimation;
                var scoreAndBalls = currentAnimation;
                scoreAndBalls.go();
            }
        };
        DisplayManager.setOnFire = function () {
            if (DisplayManager.currentState === DisplayManager.SCORE_AND_BALLS_STATE) {
                var currentAnimation = DisplayManager.display.currentAnimation;
                var scoreAndBalls = currentAnimation;
                scoreAndBalls.setOnFire();
                DisplayManager.isOnFire = true;
            }
        };
        DisplayManager.onFireRemoved = function () {
            DisplayManager.isOnFire = false;
            if (CricketHero.GameVars.stopAction) {
                DisplayManager.setState(DisplayManager.TWO_CIRCLES_STATE);
            }
        };
        DisplayManager.startBreak = function (duration) {
            if (DisplayManager.animationsBlocked) {
                return;
            }
            if (DisplayManager.currentState === DisplayManager.SCORE_AND_BALLS_STATE) {
                var currentAnimation = DisplayManager.display.currentAnimation;
                var scoreAndBalls = currentAnimation;
                scoreAndBalls.startBreak(duration);
            }
            else {
                DisplayManager.breakDuration = duration;
                DisplayManager.timeAtWhichStateWasScheduled = DisplayManager.game.time.time;
                DisplayManager.scheduleState(DisplayManager.BREAK_STATE);
            }
        };
        DisplayManager.stopBreak = function () {
            if (DisplayManager.currentState === DisplayManager.SCORE_AND_BALLS_STATE) {
                var currentAnimation = DisplayManager.display.currentAnimation;
                var scoreAndBalls = currentAnimation;
                scoreAndBalls.stopBreak();
            }
        };
        DisplayManager.coinsFrenzyStarted = function () {
            DisplayManager.setState(DisplayManager.COINS_FRENZY_STATE);
        };
        DisplayManager.coinsFrenzyEnds = function () {
            DisplayManager.setState(DisplayManager.SCORE_AND_BALLS_STATE);
        };
        DisplayManager.fairyPressed = function () {
            if (DisplayManager.currentState !== DisplayManager.SCORE_AND_BALLS_STATE) {
                DisplayManager.setState(DisplayManager.SCORE_AND_BALLS_STATE, true);
            }
            DisplayManager.display.extraBall();
        };
        DisplayManager.updateScore = function () {
            if (DisplayManager.animationsBlocked) {
                return;
            }
            if (DisplayManager.currentState === DisplayManager.SCORE_AND_BALLS_STATE) {
                var currentAnimation = DisplayManager.display.currentAnimation;
                var scoreAndBalls = currentAnimation;
                scoreAndBalls.updateScore();
            }
        };
        DisplayManager.updateMissedBalls = function () {
            var currentAnimation = DisplayManager.display.currentAnimation;
            if (currentAnimation.name === DisplayManager.SCORE_AND_BALLS_STATE) {
                var scoreAndBalls = currentAnimation;
                scoreAndBalls.updateStrikes();
            }
        };
        DisplayManager.explosion = function () {
            DisplayManager.display.explosion();
        };
        DisplayManager.scheduleState = function (scheduledAnimation) {
            DisplayManager.scheduledState = scheduledAnimation;
        };
        DisplayManager.SCROLLING_BOARD_STATE = "scrolling board state";
        DisplayManager.COUNTDOWN_STATE = "countdown state";
        DisplayManager.SCORE_AND_BALLS_STATE = "score and balls state";
        DisplayManager.GAME_OVER_STATE = "game over state";
        DisplayManager.TOMATO_STATE = "tomato state";
        DisplayManager.BOMB_STATE = "bomb state";
        DisplayManager.CURVE_BALL_STATE = "curve ball state";
        DisplayManager.STRIKE_STATE = "strike state";
        DisplayManager.TWO_CIRCLES_STATE = "two circles state";
        DisplayManager.ONE_CIRCLE_STATE = "one circle state";
        DisplayManager.BREAK_STATE = "break state";
        DisplayManager.PLAYER_AHEAD_STATE = "player ahead";
        DisplayManager.NEW_RECORD_STATE = "new record state";
        DisplayManager.AFTER_BREAK_STATE = "after break state";
        DisplayManager.PAUSE_STATE = "pause state";
        DisplayManager.HOMERUN_STATE = "homerun state";
        DisplayManager.COINS_FRENZY_STATE = "coins frenzy state";
        DisplayManager.APPEAR_FROM_THE_BOTTOM = "appear from the bottom";
        DisplayManager.APPEAR_FROM_THE_TOP = "appear from the top";
        DisplayManager.APPEAR_FROM_THE_LEFT = "appear from the left";
        DisplayManager.APPEAR_FROM_THE_RIGHT = "appear from the right";
        DisplayManager.APPEAR_INSTANTLY = "appear instantly";
        return DisplayManager;
    }());
    CricketHero.DisplayManager = DisplayManager;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var DisplayAnimation = (function (_super) {
        __extends(DisplayAnimation, _super);
        function DisplayAnimation(game, name) {
            var _this = _super.call(this, game, null, name) || this;
            _this.framesCounter = 0;
            _this.timerEvent = null;
            _this.scrollingTween = null;
            _this.hasAnimationEnded = false;
            _this.content = new Phaser.Group(_this.game);
            _this.add(_this.content);
            _this.displayMask = new Phaser.Graphics(_this.game, -300 / 2, -200 / 2);
            _this.displayMask.beginFill(0xFFFFFF);
            _this.displayMask.drawRect(0, 0, 300, 200);
            _this.add(_this.displayMask);
            _this.content.mask = _this.displayMask;
            return _this;
        }
        DisplayAnimation.prototype.pause = function () {
            if (this.game) {
                this.game.time.events.pause();
            }
            else {
                return;
            }
            this.visible = false;
            if (this.scrollingTween) {
                this.scrollingTween.pause();
            }
        };
        DisplayAnimation.prototype.resume = function () {
            if (this.game) {
                this.game.time.events.resume();
            }
            else {
                return;
            }
            this.visible = true;
            if (this.scrollingTween) {
                this.scrollingTween.resume();
            }
        };
        DisplayAnimation.prototype.appear = function (direction, contentContainer) {
            DisplayAnimation.currentAnimation = this;
            contentContainer.add(this);
            switch (direction) {
                case CricketHero.DisplayManager.APPEAR_FROM_THE_BOTTOM:
                    this.content.y = 200;
                    break;
                case CricketHero.DisplayManager.APPEAR_FROM_THE_TOP:
                    this.content.y = -200;
                    break;
                case CricketHero.DisplayManager.APPEAR_FROM_THE_LEFT:
                    this.content.x = -300;
                    break;
                case CricketHero.DisplayManager.APPEAR_FROM_THE_RIGHT:
                    this.content.x = 300;
                    break;
                default:
            }
            if (direction === CricketHero.DisplayManager.APPEAR_INSTANTLY) {
                this.animationAppeared();
            }
            else {
                var t = DisplayAnimation.TWEEN_TIME;
                if (CricketHero.GameVars.matchData.itemsThrown > 30) {
                    t *= .75;
                }
                else if (CricketHero.GameVars.matchData.itemsThrown > 15) {
                    t *= .85;
                }
                this.scrollingTween = this.game.add.tween(this.content)
                    .to({ x: 0, y: 0 }, t, Phaser.Easing.Linear.None, true);
                this.scrollingTween.onComplete.add(this.animationAppeared, this);
            }
        };
        DisplayAnimation.prototype.disappear = function (direction) {
            if (this.timerEvent !== null) {
                this.timerEvent.pendingDelete = true;
                this.timerEvent = null;
            }
            var x;
            var y;
            switch (direction) {
                case CricketHero.DisplayManager.APPEAR_FROM_THE_BOTTOM:
                    x = 0;
                    y = -200;
                    break;
                case CricketHero.DisplayManager.APPEAR_FROM_THE_TOP:
                    x = 0;
                    y = 200;
                    break;
                case CricketHero.DisplayManager.APPEAR_FROM_THE_LEFT:
                    x = 300;
                    y = 0;
                    break;
                case CricketHero.DisplayManager.APPEAR_FROM_THE_RIGHT:
                    x = -300;
                    y = 0;
                    break;
                default:
            }
            if (direction === CricketHero.DisplayManager.APPEAR_INSTANTLY) {
                this.animationDisappeared();
            }
            else {
                var t = DisplayAnimation.TWEEN_TIME;
                if (CricketHero.GameVars.matchData.itemsThrown > 30) {
                    t *= .75;
                }
                else if (CricketHero.GameVars.matchData.itemsThrown > 15) {
                    t *= .85;
                }
                this.scrollingTween = this.game.add.tween(this.content)
                    .to({ x: x, y: y }, t, Phaser.Easing.Linear.None, true);
                this.scrollingTween.onComplete.add(this.animationDisappeared, this);
            }
        };
        DisplayAnimation.prototype.animationEnded = function () {
            this.timerEvent = null;
            this.hasAnimationEnded = true;
            CricketHero.DisplayManager.stateAnimationEnded();
        };
        DisplayAnimation.prototype.animationAppeared = function () {
            this.scrollingTween = null;
        };
        DisplayAnimation.prototype.animationDisappeared = function () {
            this.scrollingTween = null;
            this.destroy();
        };
        DisplayAnimation.TWEEN_TIME = 250;
        return DisplayAnimation;
    }(Phaser.Group));
    CricketHero.DisplayAnimation = DisplayAnimation;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var AfterBreak = (function (_super) {
        __extends(AfterBreak, _super);
        function AfterBreak(game) {
            var _this = _super.call(this, game, CricketHero.DisplayManager.AFTER_BREAK_STATE) || this;
            _this.label = new Phaser.BitmapText(_this.game, -2, 10, "freshman", "READY?", 18);
            _this.label.anchor.set(.5);
            _this.label.scale.set(0, 0);
            _this.content.add(_this.label);
            _this.game.add.tween(_this.label.scale)
                .to({ x: 5, y: 5 }, 200, Phaser.Easing.Cubic.Out, true, 250);
            return _this;
        }
        AfterBreak.prototype.go = function () {
            this.label.scale.set(0, 0);
            this.label.fontSize = 42;
            this.label.x = -10;
            this.label.y = 25;
            this.label.text = "GO!";
            this.game.add.tween(this.label.scale)
                .to({ x: 5, y: 5 }, 200, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.timerEvent = this.game.time.events.add(850, this.animationEnded, this);
            }, this);
            CricketHero.AudioManager.playSound("countdown_final");
        };
        return AfterBreak;
    }(CricketHero.DisplayAnimation));
    CricketHero.AfterBreak = AfterBreak;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var Bomb = (function (_super) {
        __extends(Bomb, _super);
        function Bomb(game) {
            var _this = _super.call(this, game, CricketHero.DisplayManager.BOMB_STATE) || this;
            _this.bomb = _this.content.create(0, 0, "texture_atlas_2", "display_bomb_01.png");
            _this.bomb.anchor.set(.5);
            _this.bomb.scale.set(5);
            _this.bomb.smoothed = false;
            _this.bomb.animations.add("animation", Phaser.Animation.generateFrameNames("display_bomb_", 1, 3, ".png", 2));
            _this.bomb.animations.play("animation", 6, true);
            var t = 1350;
            if (CricketHero.GameVars.matchData.itemsThrown > 30) {
                t *= .75;
            }
            else if (CricketHero.GameVars.matchData.itemsThrown > 15) {
                t *= .85;
            }
            _this.timerEvent = _this.game.time.events.add(t, _this.animationEnded, _this);
            return _this;
        }
        return Bomb;
    }(CricketHero.DisplayAnimation));
    CricketHero.Bomb = Bomb;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var CoinsFrenzy = (function (_super) {
        __extends(CoinsFrenzy, _super);
        function CoinsFrenzy(game) {
            var _this = _super.call(this, game, CricketHero.DisplayManager.COINS_FRENZY_STATE) || this;
            _this.coinsFrenzyAnimation = _this.content.create(0, 0, "texture_atlas_2", "coin_frenzy_01.png");
            _this.coinsFrenzyAnimation.anchor.set(.5);
            _this.coinsFrenzyAnimation.scale.set(5);
            _this.coinsFrenzyAnimation.smoothed = false;
            _this.coinsFrenzyAnimation.animations.add("animation", Phaser.Animation.generateFrameNames("coin_frenzy_", 1, 8, ".png", 2));
            _this.coinsFrenzyAnimation.animations.play("animation", 12, true);
            return _this;
        }
        return CoinsFrenzy;
    }(CricketHero.DisplayAnimation));
    CricketHero.CoinsFrenzy = CoinsFrenzy;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var Countdown = (function (_super) {
        __extends(Countdown, _super);
        function Countdown(game) {
            var _this = _super.call(this, game, CricketHero.DisplayManager.COUNTDOWN_STATE) || this;
            _this.label = new Phaser.BitmapText(_this.game, 0, 15, "freshman", "READY?", 18);
            _this.label.anchor.set(.5);
            _this.label.scale.set(0, 0);
            _this.content.add(_this.label);
            _this.startMatch();
            return _this;
        }
        Countdown.prototype.startMatch = function () {
            this.game.add.tween(this.label.scale)
                .to({ x: 5, y: 5 }, 200, Phaser.Easing.Cubic.Out, true, 500)
                .onComplete.add(function () {
                if (!this.game) {
                    return;
                }
                this.game.time.events.add(450, function () {
                    this.label.scale.set(0, 0);
                    this.label.text = "3";
                    this.label.fontSize = 48;
                    this.label.x = -10;
                    this.label.y = 30;
                    CricketHero.AudioManager.playSound("countdown");
                    this.game.add.tween(this.label.scale)
                        .to({ x: 5, y: 5 }, 200, Phaser.Easing.Cubic.Out, true)
                        .onComplete.add(function () {
                        this.game.time.events.add(225, function () {
                            this.label.scale.set(0, 0);
                            this.label.text = "2";
                            CricketHero.AudioManager.playSound("countdown");
                            this.game.add.tween(this.label.scale)
                                .to({ x: 5, y: 5 }, 200, Phaser.Easing.Cubic.Out, true)
                                .onComplete.add(function () {
                                this.game.time.events.add(225, function () {
                                    this.label.scale.set(0, 0);
                                    this.label.text = "1";
                                    CricketHero.AudioManager.playSound("countdown");
                                    this.game.add.tween(this.label.scale)
                                        .to({ x: 5, y: 5 }, 200, Phaser.Easing.Cubic.Out, true)
                                        .onComplete.add(function () {
                                        this.game.time.events.add(225, function () {
                                            this.label.scale.set(0, 0);
                                            this.label.text = "GO!";
                                            this.label.x = -14;
                                            CricketHero.AudioManager.playSound("countdown_final");
                                            this.game.add.tween(this.label.scale)
                                                .to({ x: 5, y: 5 }, 200, Phaser.Easing.Cubic.Out, true)
                                                .onComplete.add(function () {
                                                this.game.time.events.add(300, function () {
                                                    this.animationEnded();
                                                }, this);
                                            }, this);
                                        }, this);
                                    }, this);
                                }, this);
                            }, this);
                        }, this);
                    }, this);
                }, this);
            }, this);
        };
        return Countdown;
    }(CricketHero.DisplayAnimation));
    CricketHero.Countdown = Countdown;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var CurveBall = (function (_super) {
        __extends(CurveBall, _super);
        function CurveBall(game) {
            var _this = _super.call(this, game, CricketHero.DisplayManager.CURVE_BALL_STATE) || this;
            var curveAnimation = _this.content.create(0, 0, "texture_atlas_2", "fx_curve_ball_01.png");
            curveAnimation.anchor.set(.5);
            curveAnimation.scale.set(5);
            curveAnimation.smoothed = false;
            curveAnimation.animations.add("animation", Phaser.Animation.generateFrameNames("fx_curve_ball_", 1, 9, ".png", 2));
            curveAnimation.animations.play("animation", 10, true);
            var t = 1350;
            if (CricketHero.GameVars.matchData.itemsThrown > 30) {
                t *= .75;
            }
            else if (CricketHero.GameVars.matchData.itemsThrown > 15) {
                t *= .85;
            }
            _this.timerEvent = _this.game.time.events.add(t, _this.animationEnded, _this);
            return _this;
        }
        return CurveBall;
    }(CricketHero.DisplayAnimation));
    CricketHero.CurveBall = CurveBall;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var GameOver = (function (_super) {
        __extends(GameOver, _super);
        function GameOver(game) {
            var _this = _super.call(this, game, CricketHero.DisplayManager.GAME_OVER_STATE) || this;
            _this.blueGameOverLabel = new Phaser.BitmapText(_this.game, 0, -40, "freshman", "GAME OVER", 11.5);
            _this.blueGameOverLabel.anchor.set(.5);
            _this.blueGameOverLabel.scale.set(5, 5);
            _this.blueGameOverLabel.visible = false;
            _this.content.add(_this.blueGameOverLabel);
            _this.redGameOverLabel = new Phaser.BitmapText(_this.game, 0, -40, "freshman-red", "GAME OVER", 12.25);
            _this.redGameOverLabel.anchor.set(.5);
            _this.redGameOverLabel.scale.set(5, 5);
            _this.content.add(_this.redGameOverLabel);
            var scoreLabel = new Phaser.BitmapText(_this.game, 0, 52, "freshman", "SCORE: " + CricketHero.GameVars.matchData.score, 13);
            scoreLabel.anchor.set(.5);
            scoreLabel.scale.set(5, 5);
            _this.content.add(scoreLabel);
            return _this;
        }
        GameOver.prototype.update = function () {
            _super.prototype.update.call(this);
            this.framesCounter++;
            if (this.framesCounter === 45) {
                this.framesCounter = 0;
                this.blueGameOverLabel.visible = !this.blueGameOverLabel.visible;
                this.redGameOverLabel.visible = !this.redGameOverLabel.visible;
            }
        };
        return GameOver;
    }(CricketHero.DisplayAnimation));
    CricketHero.GameOver = GameOver;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var Homerun = (function (_super) {
        __extends(Homerun, _super);
        function Homerun(game) {
            var _this = _super.call(this, game, CricketHero.DisplayManager.HOMERUN_STATE) || this;
            var onImageName;
            var offImageName;
            if (CricketHero.GameVars.homeRunType === CricketHero.GameConstants.HOMERUN_4) {
                onImageName = "four_01.png";
                offImageName = "four_02.png";
            }
            else {
                onImageName = "six_01.png";
                offImageName = "six_01.png";
            }
            _this.onImage = new Phaser.Image(_this.game, 0, 0, "texture_atlas_2", onImageName);
            _this.onImage.anchor.set(.5);
            _this.onImage.scale.set(5);
            _this.onImage.smoothed = false;
            _this.content.add(_this.onImage);
            _this.offImage = new Phaser.Image(_this.game, 0, 0, "texture_atlas_2", offImageName);
            _this.offImage.anchor.set(.5);
            _this.offImage.scale.set(5);
            _this.offImage.smoothed = false;
            _this.offImage.visible = false;
            _this.content.add(_this.offImage);
            return _this;
        }
        Homerun.prototype.update = function () {
            _super.prototype.update.call(this);
            this.framesCounter++;
            if (this.framesCounter % 30 === 0 && this.framesCounter < 180) {
                this.onImage.visible = !this.onImage.visible;
                this.offImage.visible = !this.offImage.visible;
            }
            else if (this.framesCounter === 180) {
                this.animationEnded();
            }
        };
        return Homerun;
    }(CricketHero.DisplayAnimation));
    CricketHero.Homerun = Homerun;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var NewRecord = (function (_super) {
        __extends(NewRecord, _super);
        function NewRecord(game) {
            var _this = _super.call(this, game, CricketHero.DisplayManager.NEW_RECORD_STATE) || this;
            var fontSize;
            if (CricketHero.GameVars.relevantRecord) {
                _this.recordAnimation = _this.content.create(0, 0, "texture_atlas_2", "display_new_record_01.png");
                _this.recordAnimation.anchor.set(.5);
                _this.recordAnimation.scale.set(5);
                _this.recordAnimation.smoothed = false;
                _this.recordAnimation.visible = false;
                _this.recordAnimation.animations.add("animation", Phaser.Animation.generateFrameNames("display_new_record_", 1, 9, ".png", 2));
                _this.content.add(_this.recordAnimation);
                if (CricketHero.GameVars.gameData.score < 100) {
                    fontSize = 46;
                }
                else if (CricketHero.GameVars.gameData.score < 200) {
                    fontSize = 44;
                }
                else {
                    fontSize = 42;
                }
                _this.scoreLabel = new Phaser.BitmapText(_this.game, 0, 25, "freshman_white", CricketHero.GameVars.matchData.score.toString(), fontSize);
                _this.scoreLabel.anchor.set(.5);
                _this.scoreLabel.scale.set(5, 5);
                _this.scoreLabel.tint = 0xFFD675;
                _this.scoreLabel.visible = false;
                _this.content.add(_this.scoreLabel);
                _this.game.time.events.add(1750, function () {
                    this.recordAnimation.visible = true;
                    this.recordAnimation.animations.play("animation", 5, false)
                        .onComplete.add(function () {
                        this.game.time.events.add(800, function () {
                            this.recordAnimation.visible = false;
                            this.game.time.events.add(300, function () {
                                this.scoreLabel.visible = true;
                            }, this);
                        }, this);
                    }, this);
                }, _this);
            }
            else {
                _this.recordAnimation = _this.content.create(0, 0, "texture_atlas_2", "display_record_01.png");
                _this.recordAnimation.anchor.set(.5);
                _this.recordAnimation.scale.set(5);
                _this.recordAnimation.smoothed = false;
                _this.recordAnimation.animations.add("animation", Phaser.Animation.generateFrameNames("display_record_", 1, 6, ".png", 2));
                _this.content.add(_this.recordAnimation);
                _this.recordAnimation.animations.play("animation", 5, true);
                _this.scoreLabel = new Phaser.BitmapText(_this.game, -2, 62, "freshman", CricketHero.GameVars.matchData.score.toString(), 31);
                _this.scoreLabel.anchor.set(.5);
                _this.scoreLabel.scale.set(5, 5);
                _this.content.add(_this.scoreLabel);
            }
            return _this;
        }
        return NewRecord;
    }(CricketHero.DisplayAnimation));
    CricketHero.NewRecord = NewRecord;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var OneCircle = (function (_super) {
        __extends(OneCircle, _super);
        function OneCircle(game) {
            var _this = _super.call(this, game, CricketHero.DisplayManager.ONE_CIRCLE_STATE) || this;
            var leftCircle = new Phaser.Image(_this.game, -40, 0, "texture_atlas_2", "circle.png");
            leftCircle.anchor.set(.5);
            leftCircle.scale.set(5);
            leftCircle.smoothed = false;
            _this.content.add(leftCircle);
            var rightCircle = new Phaser.Image(_this.game, 40, 0, "texture_atlas_2", "circle.png");
            rightCircle.anchor.set(.5);
            rightCircle.scale.set(5);
            rightCircle.smoothed = false;
            _this.content.add(rightCircle);
            _this.leftCircleTween = _this.game.add.tween(leftCircle)
                .to({ x: 0 }, 400, Phaser.Easing.Cubic.Out, true, 500);
            _this.leftCircleTween.onComplete.add(function () {
                this.game.time.events.add(950, this.animationEnded, this);
            }, _this);
            _this.rightCircleTween = _this.game.add.tween(rightCircle)
                .to({ x: 0 }, 400, Phaser.Easing.Cubic.Out, true, 500);
            var twoCirclesLabel = new Phaser.BitmapText(_this.game, 0, 8, "freshman", "1 CIRCLE", 15);
            twoCirclesLabel.anchor.set(.5);
            twoCirclesLabel.scale.set(5, 5);
            _this.content.add(twoCirclesLabel);
            return _this;
        }
        OneCircle.prototype.pause = function () {
            _super.prototype.pause.call(this);
            this.leftCircleTween.pause();
            this.rightCircleTween.pause();
        };
        OneCircle.prototype.resume = function () {
            _super.prototype.resume.call(this);
            this.leftCircleTween.resume();
            this.rightCircleTween.resume();
        };
        return OneCircle;
    }(CricketHero.DisplayAnimation));
    CricketHero.OneCircle = OneCircle;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var Pause = (function (_super) {
        __extends(Pause, _super);
        function Pause(game) {
            var _this = _super.call(this, game, CricketHero.DisplayManager.PAUSE_STATE) || this;
            var pauseLabel = new Phaser.BitmapText(_this.game, -5, 15, "freshman", "PAUSE", 20);
            pauseLabel.anchor.set(.5);
            pauseLabel.scale.set(5, 5);
            _this.content.add(pauseLabel);
            _this.game.add.tween(pauseLabel)
                .to({ alpha: .55 }, 400, Phaser.Easing.Cubic.Out, true, 0, -1, true);
            return _this;
        }
        return Pause;
    }(CricketHero.DisplayAnimation));
    CricketHero.Pause = Pause;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var PlayerAhead = (function (_super) {
        __extends(PlayerAhead, _super);
        function PlayerAhead(game) {
            var _this = _super.call(this, game, CricketHero.DisplayManager.PLAYER_AHEAD_STATE) || this;
            var playerName;
            if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_LAGGED) {
                playerName = "lagged.com";
                _this.playerAvatar = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "lagged-logo.png");
            }
            else if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_POKI) {
                playerName = "CRICKET HERO";
                _this.playerAvatar = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "logo-poki.png");
            }
            else if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_MINIJUEGOS) {
                playerName = "minijuegos.com";
                _this.playerAvatar = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "minijuegos-logo.png");
            }
            else if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_GAMEZOP) {
                playerName = "ravalmatic";
                _this.playerAvatar = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "logo-ravalmatic.png");
            }
            else if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_GAMEPIND) {
                playerName = "gamepind";
                _this.playerAvatar = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "cricketer_avatar.png");
            }
            else if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_GAMEZOP) {
                playerName = "ravalmatic.com";
                _this.playerAvatar = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "logo-ravalmatic.png");
            }
            else if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_GAMEPIX) {
                playerName = "gamepix";
                _this.playerAvatar = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "logo-gamepix.png");
            }
            else if (CricketHero.GameConstants.SPONSOR === CricketHero.GameConstants.SPONSOR_FUNO) {
                playerName = "CRICKET HERO";
                _this.playerAvatar = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "cricketer_avatar.png");
            }
            else {
                playerName = "ravalmatic.com";
                _this.playerAvatar = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "logo-ravalmatic.png");
            }
            _this.avatarContainer = new Phaser.Group(_this.game);
            _this.content.add(_this.avatarContainer);
            _this.playerAvatar.anchor.set(.5);
            _this.playerAvatar.width = 200,
                _this.playerAvatar.height = 200;
            _this.playerAvatar.smoothed = false;
            _this.avatarContainer.add(_this.playerAvatar);
            var leftStarsAnim = new Phaser.Sprite(_this.game, -150, -100, "texture_atlas_2", "display_stars_01.png");
            leftStarsAnim.scale.set(5);
            leftStarsAnim.animations.add("scroll", Phaser.Animation.generateFrameNames("display_stars_", 1, 10, ".png", 2));
            leftStarsAnim.animations.play("scroll", 6, true);
            _this.avatarContainer.add(leftStarsAnim);
            var rightStarsAnim = new Phaser.Sprite(_this.game, 150 - leftStarsAnim.width + 5, -100, "texture_atlas_2", "display_stars_01.png");
            rightStarsAnim.scale.set(5);
            rightStarsAnim.animations.add("scroll", Phaser.Animation.generateFrameNames("display_stars_", 1, 10, ".png", 2));
            rightStarsAnim.animations.play("scroll", 6, true);
            _this.avatarContainer.add(rightStarsAnim);
            _this.labelsContainer = new Phaser.Group(_this.game);
            _this.labelsContainer.visible = false;
            _this.content.add(_this.labelsContainer);
            var infoLabeStr;
            if (CricketHero.GameVars.gameData.score < 15) {
                infoLabeStr = "TRY HARDER";
            }
            else if (CricketHero.GameVars.gameData.score < 30) {
                infoLabeStr = "NOT TOO BAD";
            }
            else if (CricketHero.GameVars.gameData.score < 50) {
                infoLabeStr = "WELL DONE";
            }
            else if (CricketHero.GameVars.gameData.score < 90) {
                infoLabeStr = "GREAT JOB";
            }
            else {
                infoLabeStr = "YOU ARE THE BOSS";
            }
            var infoLabel = new Phaser.BitmapText(_this.game, 0, -82, "alfa_slab_one", infoLabeStr, 4.15);
            infoLabel.anchor.set(.5);
            infoLabel.scale.set(5, 5);
            infoLabel.tint = 0x00A2F2;
            _this.labelsContainer.add(infoLabel);
            var nameStr = "";
            for (var i = 0; i < 4; i++) {
                nameStr += playerName;
                nameStr += "   ";
            }
            _this.leftPlayerNameLabel = new Phaser.BitmapText(_this.game, -100, -52, "alfa_slab_one", nameStr, 6);
            _this.leftPlayerNameLabel.anchor.y = .5;
            _this.leftPlayerNameLabel.scale.set(5, 5);
            _this.leftPlayerNameLabel.tint = 0xFE0E42;
            _this.labelsContainer.add(_this.leftPlayerNameLabel);
            _this.rightPlayerNameLabel = new Phaser.BitmapText(_this.game, _this.leftPlayerNameLabel.x + _this.leftPlayerNameLabel.width, -52, "alfa_slab_one", nameStr, 6);
            _this.rightPlayerNameLabel.anchor.y = .5;
            _this.rightPlayerNameLabel.scale.set(5, 5);
            _this.rightPlayerNameLabel.tint = 0xFE0E42;
            _this.labelsContainer.add(_this.rightPlayerNameLabel);
            var scoreTintColor = 0x00A2F2;
            var score = CricketHero.GameVars.gameData.score;
            var fontSize;
            var px;
            if (score < 100) {
                fontSize = 36;
                px = -8;
            }
            else if (score < 200) {
                fontSize = 30;
                px = 8;
            }
            else {
                fontSize = 26;
                px = 0;
            }
            var playerScore = new Phaser.BitmapText(_this.game, px, 48, "freshman_white", score.toString(), fontSize);
            playerScore.anchor.set(.5);
            playerScore.scale.set(5, 5);
            playerScore.tint = scoreTintColor;
            _this.labelsContainer.add(playerScore);
            _this.game.time.events.loop(2000, _this.setLabelsVisibility, _this);
            return _this;
        }
        PlayerAhead.prototype.update = function () {
            _super.prototype.update.call(this);
            if (this.framesCounter % 4 === 0) {
                var speed = 10;
                this.leftPlayerNameLabel.x -= speed;
                this.rightPlayerNameLabel.x -= speed;
                if (this.leftPlayerNameLabel.x < -150 - this.leftPlayerNameLabel.width) {
                    this.leftPlayerNameLabel.x = this.rightPlayerNameLabel.x + this.rightPlayerNameLabel.width;
                    var tmpLabel = this.leftPlayerNameLabel;
                    this.leftPlayerNameLabel = this.rightPlayerNameLabel;
                    this.rightPlayerNameLabel = tmpLabel;
                }
            }
            this.framesCounter++;
        };
        PlayerAhead.prototype.setLabelsVisibility = function () {
            this.labelsContainer.visible = !this.labelsContainer.visible;
            this.avatarContainer.visible = !this.avatarContainer.visible;
        };
        return PlayerAhead;
    }(CricketHero.DisplayAnimation));
    CricketHero.PlayerAhead = PlayerAhead;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var ScoreAndBalls = (function (_super) {
        __extends(ScoreAndBalls, _super);
        function ScoreAndBalls(game) {
            var _this = _super.call(this, game, CricketHero.DisplayManager.SCORE_AND_BALLS_STATE) || this;
            ScoreAndBalls.currentInstance = _this;
            _this.displayingBreak = false;
            _this.dancer_dx = 0;
            _this.scoreContainer = new Phaser.Group(_this.game);
            _this.content.add(_this.scoreContainer);
            _this.extraBallLabel = null;
            _this.lightOrangeLayer = null;
            _this.onFire = new Phaser.Sprite(_this.game, 0, 0, "texture_atlas_2", "display_fire_01.png");
            _this.onFire.animations.add("animation", Phaser.Animation.generateFrameNames("display_fire_", 1, 7, ".png", 2));
            _this.onFire.anchor.set(.5);
            _this.onFire.scale.set(5);
            _this.onFire.visible = false;
            _this.onFire.smoothed = false;
            _this.content.add(_this.onFire);
            _this.dancer = new Phaser.Sprite(_this.game, -150, -40, "texture_atlas_2", "display_dance_01.png");
            _this.dancer.animations.add("dance", Phaser.Animation.generateFrameNames("display_dance_", 1, 3, ".png", 2));
            _this.dancer.anchor.set(.5);
            _this.dancer.scale.set(5);
            _this.dancer.visible = false;
            _this.dancer.smoothed = false;
            _this.content.add(_this.dancer);
            _this.x2 = new Phaser.Image(_this.game, -145, -95, "texture_atlas_2", "2x.png");
            _this.x2.scale.set(5);
            _this.x2.smoothed = false;
            _this.x2.visible = false;
            _this.content.add(_this.x2);
            _this.scoreLabelLeft = new Phaser.BitmapText(_this.game, -8, -26, "freshman", "0", 30);
            _this.scoreLabelLeft.anchor.set(.5);
            _this.scoreLabelLeft.scale.set(5, 5);
            _this.scoreLabelLeft.visible = false;
            _this.scoreLabelLeft.smoothed = false;
            _this.scoreContainer.add(_this.scoreLabelLeft);
            _this.scoreLabelRight = new Phaser.BitmapText(_this.game, -8, -26, "freshman", "", 30);
            _this.scoreLabelRight.anchor.set(0, .5);
            _this.scoreLabelRight.scale.set(5, 5);
            _this.scoreLabelRight.visible = false;
            _this.scoreLabelRight.smoothed = false;
            _this.scoreContainer.add(_this.scoreLabelRight);
            var divisoryLine = new Phaser.Graphics(_this.game);
            divisoryLine.lineStyle(5, 0x00A2F2);
            divisoryLine.moveTo(-130, 17);
            divisoryLine.lineTo(130, 17);
            _this.content.add(divisoryLine);
            _this.ballsContainer = new Phaser.Group(_this.game);
            _this.content.add(_this.ballsContainer);
            _this.firstBall = new Phaser.Sprite(_this.game, -90, 60, "texture_atlas_2", "display_ball_01.png");
            _this.firstBall.animations.add("spin", Phaser.Animation.generateFrameNames("display_ball_", 1, 11, ".png", 2));
            _this.firstBall.anchor.set(.5);
            _this.firstBall.scale.set(5);
            _this.firstBall.smoothed = false;
            _this.ballsContainer.add(_this.firstBall);
            _this.secondBall = new Phaser.Sprite(_this.game, 0, 60, "texture_atlas_2", "display_ball_01.png");
            _this.secondBall.animations.add("spin", Phaser.Animation.generateFrameNames("display_ball_", 1, 11, ".png", 2));
            _this.secondBall.anchor.set(.5);
            _this.secondBall.scale.set(5);
            _this.secondBall.smoothed = false;
            _this.ballsContainer.add(_this.secondBall);
            _this.thirdBall = new Phaser.Sprite(_this.game, 90, 60, "texture_atlas_2", "display_ball_01.png");
            _this.thirdBall.animations.add("spin", Phaser.Animation.generateFrameNames("display_ball_", 1, 11, ".png", 2));
            _this.thirdBall.anchor.set(.5);
            _this.thirdBall.scale.set(5);
            _this.thirdBall.smoothed = false;
            _this.ballsContainer.add(_this.thirdBall);
            _this.updateScore(true);
            _this.updateStrikes();
            if (CricketHero.DisplayManager.currentState === CricketHero.DisplayManager.HOMERUN_STATE) {
                _this.game.add.tween(_this.scoreContainer.scale)
                    .to({ x: 0, y: .8 }, 100, Phaser.Easing.Cubic.Out, true, 450)
                    .onComplete.add(function () {
                    this.updateScore(true);
                    this.game.add.tween(this.scoreContainer.scale)
                        .to({ x: 1, y: 1 }, 100, Phaser.Easing.Cubic.Out, true);
                }, _this);
            }
            return _this;
        }
        ScoreAndBalls.prototype.destroy = function (destryChildren, soft) {
            ScoreAndBalls.currentInstance = null;
            _super.prototype.destroy.call(this, destryChildren, soft);
        };
        ScoreAndBalls.prototype.update = function () {
            _super.prototype.update.call(this);
            if (CricketHero.GameVars.paused) {
                return;
            }
            if (this.displayingBreak) {
                this.framesCounter++;
                if (this.framesCounter % 4 === 0) {
                    this.dancer.x += 4 * this.dancer_dx;
                }
            }
            if (this.dancer.visible || this.onFire.visible) {
                this.x2.visible = false;
                if (this.extraBallLabel) {
                    this.extraBallLabel.visible = false;
                }
            }
            else {
                this.x2.visible = CricketHero.GameVars.isPlayerOnFire;
            }
        };
        ScoreAndBalls.prototype.addExtraBall = function () {
            this.lightOrangeLayer = new Phaser.Sprite(this.game, 0, 0, this.game.cache.getBitmapData(CricketHero.GameConstants.DARK_ORANGE_SQUARE));
            this.lightOrangeLayer.scale.set(5 * 60 / CricketHero.GameConstants.BITMAP_SIZE, 5 * 40 / CricketHero.GameConstants.BITMAP_SIZE);
            this.lightOrangeLayer.anchor.set(.5);
            this.content.addAt(this.lightOrangeLayer, 0);
            this.scoreLabelLeft.visible = false;
            this.scoreLabelRight.visible = false;
            this.extraBallLabel = new Phaser.BitmapText(this.game, 0, -28, "freshman", "EXTRA BALL", 11);
            this.extraBallLabel.anchor.set(.5);
            this.extraBallLabel.scale.set(5, 5);
            this.extraBallLabel.smoothed = false;
            this.scoreContainer.add(this.extraBallLabel);
            this.updateStrikes();
            this.game.time.events.add(1650, this.onExtraBallShown, this);
        };
        ScoreAndBalls.prototype.onExtraBallShown = function () {
            CricketHero.DisplayManager.unBlockAnimations();
            this.game.add.tween(this.lightOrangeLayer)
                .to({ alpha: 0 }, 250, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.lightOrangeLayer.destroy();
            }, this);
            this.scoreLabelLeft.visible = true;
            if (CricketHero.GameVars.matchData.score > 9) {
                this.scoreLabelRight.visible = true;
            }
            this.extraBallLabel.destroy();
            this.updateScore(true);
        };
        ScoreAndBalls.prototype.setOnFire = function () {
            this.scoreLabelLeft.visible = false;
            this.scoreLabelRight.visible = false;
            this.onFire.visible = true;
            this.onFire.alpha = 1;
            this.onFire.animations.play("animation", 6, true);
            this.game.time.events.add(1000, this.removeOnFire, this);
        };
        ScoreAndBalls.prototype.removeOnFire = function () {
            this.game.add.tween(this.onFire)
                .to({ alpha: 0 }, 250, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.onFire.visible = false;
            }, this);
            if (!this.displayingBreak) {
                this.scoreLabelLeft.visible = true;
                if (CricketHero.GameVars.matchData.score > 9) {
                    this.scoreLabelRight.visible = true;
                }
                this.updateScore(true);
            }
            CricketHero.DisplayManager.onFireRemoved();
        };
        ScoreAndBalls.prototype.startBreak = function (duration) {
            this.displayingBreak = true;
            this.dancer.visible = true;
            this.dancer.x = -175;
            this.dancer.animations.play("dance", 5, true);
            this.dancer_dx = 350 / (duration * 60 / 1000);
            this.scoreLabelLeft.visible = false;
            this.scoreLabelRight.visible = false;
            if (CricketHero.GameConstants.SCOREBOARD_DEVELOPMENT) {
                this.game.time.events.add(duration, this.stopBreak, this);
            }
        };
        ScoreAndBalls.prototype.stopBreak = function () {
            this.displayingBreak = false;
            this.dancer.visible = false;
            this.dancer.animations.stop();
            this.scoreLabelLeft.visible = true;
            if (CricketHero.GameVars.matchData.score > 9) {
                this.scoreLabelRight.visible = true;
            }
            this.updateScore(true);
        };
        ScoreAndBalls.prototype.updateScore = function (withoutTween) {
            if (this.onFire.visible) {
                return;
            }
            var score = CricketHero.GameVars.matchData.score;
            if (CricketHero.DisplayManager.currentState === CricketHero.DisplayManager.HOMERUN_STATE) {
                if (CricketHero.GameVars.homeRunType === CricketHero.GameConstants.HOMERUN_6) {
                    score -= 6;
                }
                else {
                    score -= 4;
                }
            }
            if (score > 99) {
                this.scoreLabelLeft.visible = true;
                this.scoreLabelLeft.x = -8;
                this.scoreLabelLeft.anchor.set(.5);
                this.scoreLabelLeft.text = score.toString();
                this.scoreLabelLeft.fontSize = 18.5;
                this.scoreLabelRight.visible = false;
            }
            else if (score > 9) {
                this.scoreLabelLeft.anchor.x = 1;
                this.scoreLabelLeft.visible = true;
                this.scoreLabelLeft.text = Math.floor(score / 10).toString();
                this.scoreLabelRight.visible = true;
                this.scoreLabelRight.text = (score % 10).toString();
            }
            else {
                this.scoreLabelLeft.visible = true;
                this.scoreLabelLeft.text = score.toString();
                this.scoreLabelRight.visible = false;
            }
            if (!withoutTween) {
                this.scoreContainer.scale.y = .8;
                this.game.add.tween(this.scoreContainer.scale)
                    .to({ y: 1 }, 100, Phaser.Easing.Cubic.Out, true);
            }
        };
        ScoreAndBalls.prototype.updateStrikes = function () {
            var currentFrame = this.thirdBall.animations.currentAnim.frame;
            switch (CricketHero.GameVars.matchData.missedBalls) {
                case 0:
                    this.firstBall.animations.play("spin", 8, true);
                    this.secondBall.animations.play("spin", 8, true);
                    this.thirdBall.animations.play("spin", 8, true);
                    this.firstBall.animations.currentAnim.setFrame(currentFrame);
                    this.secondBall.animations.currentAnim.setFrame(currentFrame);
                    this.thirdBall.animations.currentAnim.setFrame(currentFrame);
                    break;
                case 1:
                    this.firstBall.frameName = "display_missed_ball.png";
                    this.secondBall.animations.play("spin", 8, true);
                    this.thirdBall.animations.play("spin", 8, true);
                    this.secondBall.animations.currentAnim.setFrame(currentFrame);
                    this.thirdBall.animations.currentAnim.setFrame(currentFrame);
                    break;
                case 2:
                    this.firstBall.frameName = "display_missed_ball.png";
                    this.secondBall.frameName = "display_missed_ball.png";
                    this.thirdBall.animations.play("spin", 8, true);
                    break;
                case 3:
                    this.firstBall.frameName = "display_missed_ball.png";
                    this.secondBall.frameName = "display_missed_ball.png";
                    this.thirdBall.frameName = "display_missed_ball.png";
                    this.timerEvent = this.game.time.events.add(1000, this.animationEnded, this);
                    break;
                default:
                    break;
            }
        };
        return ScoreAndBalls;
    }(CricketHero.DisplayAnimation));
    CricketHero.ScoreAndBalls = ScoreAndBalls;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var ScrollingBoard = (function (_super) {
        __extends(ScrollingBoard, _super);
        function ScrollingBoard(game) {
            var _this = _super.call(this, game, CricketHero.DisplayManager.SCROLLING_BOARD_STATE) || this;
            _this.leftLabel = new Phaser.BitmapText(_this.game, -130, 65, "freshman", "BEST SCORE :  " + CricketHero.GameVars.gameData.score + "   ", 18);
            _this.leftLabel.anchor.y = .5;
            _this.leftLabel.scale.set(5, 5);
            _this.content.add(_this.leftLabel);
            _this.rightLabel = new Phaser.BitmapText(_this.game, _this.leftLabel.x + _this.leftLabel.width, 65, "freshman", "BEST SCORE : " + CricketHero.GameVars.gameData.score + "   ", 18);
            _this.rightLabel.anchor.y = .5;
            _this.rightLabel.scale.set(5, 5);
            _this.content.add(_this.rightLabel);
            return _this;
        }
        ScrollingBoard.prototype.update = function () {
            _super.prototype.update.call(this);
            if (this.framesCounter === 4) {
                this.framesCounter = 0;
                var speed = 10;
                this.leftLabel.x -= speed;
                this.rightLabel.x -= speed;
                if (this.leftLabel.x < -150 - this.leftLabel.width) {
                    this.leftLabel.x = this.rightLabel.x + this.rightLabel.width;
                    var tmpLabel = this.leftLabel;
                    this.leftLabel = this.rightLabel;
                    this.rightLabel = tmpLabel;
                }
            }
            this.framesCounter++;
        };
        ScrollingBoard.prototype.animationAppeared = function () {
            _super.prototype.animationAppeared.call(this);
        };
        ScrollingBoard.prototype.animationDisAppeared = function () {
            _super.prototype.animationDisappeared.call(this);
        };
        return ScrollingBoard;
    }(CricketHero.DisplayAnimation));
    CricketHero.ScrollingBoard = ScrollingBoard;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var Strike = (function (_super) {
        __extends(Strike, _super);
        function Strike(game) {
            var _this = _super.call(this, game, CricketHero.DisplayManager.STRIKE_STATE) || this;
            var strikeImage = new Phaser.Image(_this.game, 0, 0, "texture_atlas_2", "display_strike_cross.png");
            strikeImage.anchor.set(.5);
            strikeImage.scale.set(5);
            strikeImage.smoothed = false;
            _this.content.add(strikeImage);
            var strikeLabel = new Phaser.BitmapText(_this.game, 0, 15, "freshman", "OUT", 26);
            strikeLabel.anchor.set(.5);
            strikeLabel.scale.set(5, 5);
            _this.content.add(strikeLabel);
            var t = 650;
            if (CricketHero.GameVars.matchData.itemsThrown > 30) {
                t *= .75;
            }
            else if (CricketHero.GameVars.matchData.itemsThrown > 15) {
                t *= .85;
            }
            _this.timerEvent = _this.game.time.events.add(t, _this.animationEnded, _this);
            return _this;
        }
        return Strike;
    }(CricketHero.DisplayAnimation));
    CricketHero.Strike = Strike;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var Tomato = (function (_super) {
        __extends(Tomato, _super);
        function Tomato(game) {
            var _this = _super.call(this, game, CricketHero.DisplayManager.TOMATO_STATE) || this;
            _this.tomatoAnimation = _this.content.create(0, 0, "texture_atlas_2", "display_chicken_01.png");
            _this.tomatoAnimation.anchor.set(.5);
            _this.tomatoAnimation.scale.set(5);
            _this.tomatoAnimation.smoothed = false;
            _this.tomatoAnimation.animations.add("animation", Phaser.Animation.generateFrameNames("display_chicken_", 1, 10, ".png", 2));
            var f;
            if (CricketHero.GameVars.matchData.itemsThrown > 30) {
                f = 10;
            }
            else if (CricketHero.GameVars.matchData.itemsThrown > 15) {
                f = 8;
            }
            else {
                f = 6;
            }
            _this.tomatoAnimation.animations.play("animation", f, false)
                .onComplete.add(_this.animationEnded, _this);
            return _this;
        }
        Tomato.prototype.pause = function () {
            _super.prototype.pause.call(this);
            if (!this.hasAnimationEnded) {
                this.tomatoAnimation.animations.paused = true;
            }
        };
        Tomato.prototype.resume = function () {
            _super.prototype.resume.call(this);
            if (!this.hasAnimationEnded) {
                this.tomatoAnimation.animations.paused = false;
            }
        };
        return Tomato;
    }(CricketHero.DisplayAnimation));
    CricketHero.Tomato = Tomato;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var TwoCircles = (function (_super) {
        __extends(TwoCircles, _super);
        function TwoCircles(game) {
            var _this = _super.call(this, game, CricketHero.DisplayManager.TWO_CIRCLES_STATE) || this;
            var leftCircle = new Phaser.Image(_this.game, 0, 0, "texture_atlas_2", "circle.png");
            leftCircle.anchor.set(.5);
            leftCircle.scale.set(5);
            leftCircle.smoothed = false;
            _this.content.add(leftCircle);
            var rightCircle = new Phaser.Image(_this.game, 0, 0, "texture_atlas_2", "circle.png");
            rightCircle.anchor.set(.5);
            rightCircle.scale.set(5);
            rightCircle.smoothed = false;
            _this.content.add(rightCircle);
            _this.leftCircleTween = _this.game.add.tween(leftCircle)
                .to({ x: -40 }, 400, Phaser.Easing.Cubic.Out, true, 500);
            _this.leftCircleTween.onComplete.add(function () {
                this.timerEvent = this.game.time.events.add(950, this.animationEnded, this);
            }, _this);
            _this.rightCircleTween = _this.game.add.tween(rightCircle)
                .to({ x: 40 }, 400, Phaser.Easing.Cubic.Out, true, 500);
            var twoCirclesLabel = new Phaser.BitmapText(_this.game, 0, 8, "freshman", "2 CIRCLES", 15);
            twoCirclesLabel.anchor.set(.5);
            twoCirclesLabel.scale.set(5, 5);
            _this.content.add(twoCirclesLabel);
            return _this;
        }
        TwoCircles.prototype.pause = function () {
            _super.prototype.pause.call(this);
            this.leftCircleTween.pause();
            this.rightCircleTween.pause();
        };
        TwoCircles.prototype.resume = function () {
            _super.prototype.resume.call(this);
            this.leftCircleTween.resume();
            this.rightCircleTween.resume();
        };
        TwoCircles.prototype.animationEnded = function () {
            if (!CricketHero.GameVars.stopAction) {
                CricketHero.DisplayManager.stateAnimationEnded();
            }
        };
        return TwoCircles;
    }(CricketHero.DisplayAnimation));
    CricketHero.TwoCircles = TwoCircles;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var SkyContainer = (function (_super) {
        __extends(SkyContainer, _super);
        function SkyContainer(game) {
            var _this = _super.call(this, game, null, "sky-container") || this;
            var background = _this.create(0, 0, _this.game.cache.getBitmapData("gradient-sky"));
            background.scale.set(CricketHero.GameConstants.GAME_WIDTH / 16, .2 / CricketHero.GameVars.scaleY * CricketHero.GameConstants.GAME_HEIGHT / 128);
            _this.clouds = [];
            var cloud = new Phaser.Image(_this.game, 300, 10, "texture_atlas_3", "cloud_01.png");
            cloud.anchor.x = 1;
            cloud.scale.y = CricketHero.GameVars.scaleY;
            _this.add(cloud);
            _this.clouds.push({ image: cloud, speed: .05 });
            cloud = new Phaser.Image(_this.game, 700, 20, "texture_atlas_3", "cloud_02.png");
            cloud.anchor.x = 1;
            cloud.scale.y = CricketHero.GameVars.scaleY;
            _this.add(cloud);
            _this.clouds.push({ image: cloud, speed: .085 });
            cloud = new Phaser.Image(_this.game, 1100, 40, "texture_atlas_3", "cloud_01.png");
            cloud.anchor.x = 1;
            cloud.scale.y = CricketHero.GameVars.scaleY;
            _this.add(cloud);
            _this.clouds.push({ image: cloud, speed: .045 });
            cloud = new Phaser.Image(_this.game, 1700, 30, "texture_atlas_3", "cloud_02.png");
            cloud.anchor.x = 1;
            cloud.scale.y = CricketHero.GameVars.scaleY;
            _this.add(cloud);
            _this.clouds.push({ image: cloud, speed: .065 });
            if (CricketHero.GameVars.showZeppelinOrAeroplane && !CricketHero.GameVars.zeppelinOrAeroplaneShown) {
                _this.zeppelinOrAeroplane = new CricketHero.ZeppelinAeroplane(_this.game);
                _this.add(_this.zeppelinOrAeroplane);
            }
            else {
                _this.zeppelinOrAeroplane = null;
            }
            return _this;
        }
        SkyContainer.prototype.update = function () {
            _super.prototype.update.call(this);
            if (CricketHero.GameVars.paused) {
                return;
            }
            for (var i = 0, ln = this.clouds.length; i < ln; i++) {
                this.clouds[i].image.x -= this.clouds[i].speed;
                if (this.clouds[i].image.x < 0) {
                    this.clouds[i].image.x = 1200 + Math.random() * 750;
                    this.clouds[i].speed = .05 + .035 * Math.random();
                }
            }
        };
        return SkyContainer;
    }(Phaser.Group));
    CricketHero.SkyContainer = SkyContainer;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var ZeppelinAeroplane = (function (_super) {
        __extends(ZeppelinAeroplane, _super);
        function ZeppelinAeroplane(game) {
            var _this = _super.call(this, game, null, "zeppelin-aeroplane") || this;
            var px = ZeppelinAeroplane.px === -250 ? -250 : ZeppelinAeroplane.px;
            if (CricketHero.GameVars.isZeppelin) {
                _this.aeroplane = null;
                _this.zeppelin = new Phaser.Image(_this.game, px, 12 * CricketHero.GameVars.scaleY, "texture_atlas_1", "zeppelin.png");
                _this.zeppelin.scale.y = CricketHero.GameVars.scaleY;
                _this.add(_this.zeppelin);
            }
            else {
                _this.aeroplane = _this.create(px, 12 * CricketHero.GameVars.scaleY, "texture_atlas_4", "plane_ravalmatic0001.png");
                _this.aeroplane.scale.y = CricketHero.GameVars.scaleY;
                switch (CricketHero.GameVars.gameData.language) {
                    case CricketHero.GameConstants.LAGUANGE_EN:
                        _this.aeroplane.animations.add("fly", Phaser.Animation.generateFrameNames("plane_ravalmatic", 1, 10, ".png", 4));
                        break;
                    case CricketHero.GameConstants.LANGUAGE_HI:
                        _this.aeroplane.animations.add("fly", Phaser.Animation.generateFrameNames("hindi_plane_", 1, 10, ".png", 2));
                        break;
                    case CricketHero.GameConstants.LANGUAGE_PT:
                        _this.aeroplane.animations.add("fly", Phaser.Animation.generateFrameNames("pt_plane_", 1, 10, ".png", 2));
                        break;
                    default:
                        break;
                }
                _this.add(_this.aeroplane);
                _this.aeroplane.animations.play("fly", 16, true);
                _this.zeppelin = null;
            }
            return _this;
        }
        ZeppelinAeroplane.prototype.update = function () {
            _super.prototype.update.call(this);
            ZeppelinAeroplane.px += .175;
            if (this.zeppelin) {
                this.zeppelin.x = ZeppelinAeroplane.px;
            }
            else {
                this.aeroplane.x = ZeppelinAeroplane.px;
            }
            if (ZeppelinAeroplane.px > CricketHero.GameConstants.GAME_WIDTH) {
                CricketHero.GameManager.zeppelinAeroplaneShown();
                this.destroy();
            }
        };
        ZeppelinAeroplane.px = -250;
        return ZeppelinAeroplane;
    }(Phaser.Group));
    CricketHero.ZeppelinAeroplane = ZeppelinAeroplane;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var Spectator = (function (_super) {
        __extends(Spectator, _super);
        function Spectator(game, position, id) {
            var _this = _super.call(this, game, position.x, position.y, "texture_atlas_1", "spectator_idle.png") || this;
            _this.id = id;
            _this.celebrating = false;
            _this.framesCounter = 0;
            _this.isSetToCelebrate = false;
            _this.framesWatitingForCelebration = 0;
            _this.framesCelebrating = 0;
            _this.framesSad = 0;
            _this.pulseTween = null;
            _this.leftSide = position.x < 0;
            _this.isSad = false;
            _this.anchor.set(.5, 1);
            _this.scale.x = _this.leftSide ? 1 : -1;
            return _this;
        }
        Spectator.prototype.update = function () {
            _super.prototype.update.call(this);
            if (this.isSetToCelebrate) {
                this.framesCounter++;
                if (this.framesCounter === this.framesWatitingForCelebration) {
                    this.celebrate();
                }
            }
            if (this.celebrating && !CricketHero.SpectatorsContainer.coinsFrenzy) {
                this.framesCounter++;
                if (this.framesCounter === this.framesCelebrating) {
                    this.setIdle();
                }
            }
            if (this.isSad) {
                this.framesCounter++;
                if (this.framesCounter === this.framesSad) {
                    this.setIdle();
                }
            }
        };
        Spectator.prototype.setSad = function () {
            if (this.pulseTween) {
                this.pulseTween.pendingDelete = true;
            }
            var scaleX = this.scale.x < 0 ? -1 : 1;
            this.scale.set(scaleX, 1);
            this.isSad = true;
            this.framesCounter = 0;
            this.framesSad = Math.round(55 + Math.random() * 25);
            this.frameName = "spectator_depressed.png";
        };
        Spectator.prototype.setToCelebrate = function () {
            if (this.pulseTween) {
                this.pulseTween.pendingDelete = true;
            }
            var scaleX = this.scale.x < 0 ? -1 : 1;
            this.scale.set(scaleX, 1);
            this.isSetToCelebrate = true;
            this.celebrating = false;
            this.framesCounter = 0;
            this.framesWatitingForCelebration = Math.round(Math.random() * 10);
        };
        Spectator.prototype.bounce = function () {
            if (this.isSad) {
                return;
            }
            var scaleX = this.scale.x;
            this.pulseTween = this.game.add.tween(this.scale);
            this.pulseTween.to({ x: 1.01 * scaleX, y: .99 * CricketHero.GameVars.scaleY }, 300, Phaser.Easing.Linear.None, true, 0, 0, true);
        };
        Spectator.prototype.gameOver = function () {
            if (this.pulseTween) {
                this.pulseTween.pendingDelete = true;
            }
            var scaleX = this.scale.x < 0 ? -1 : 1;
            this.scale.set(scaleX, 1);
            this.isSad = false;
            this.frameName = "spectator_depressed.png";
        };
        Spectator.prototype.continue = function () {
            this.frameName = "spectator_idle.png";
        };
        Spectator.prototype.setIdle = function () {
            this.celebrating = false;
            this.isSad = false;
            this.frameName = "spectator_idle.png";
        };
        Spectator.prototype.celebrate = function () {
            this.isSetToCelebrate = false;
            this.celebrating = true;
            this.isSad = false;
            this.framesCounter = 0;
            this.framesCelebrating = Math.round(22 + Math.random() * 12);
            this.frameName = "spectator_celebrate.png";
        };
        return Spectator;
    }(Phaser.Image));
    CricketHero.Spectator = Spectator;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var SpectatorsContainer = (function (_super) {
        __extends(SpectatorsContainer, _super);
        function SpectatorsContainer(game) {
            var _this = _super.call(this, game, null, "spectators-container") || this;
            _this.framesCounter = 0;
            SpectatorsContainer.coinsFrenzy = false;
            var background = new Phaser.Image(_this.game, 0, 15, "texture_atlas_4", "bg_stadium.png");
            background.anchor.set(.5, 1);
            _this.add(background);
            _this.spectators = [];
            for (var i = 0; i < SpectatorsContainer.SPECTATORS_POSITION.length; i++) {
                var spectator = new CricketHero.Spectator(_this.game, SpectatorsContainer.SPECTATORS_POSITION[i], i);
                _this.add(spectator);
                _this.spectators.push(spectator);
            }
            return _this;
        }
        SpectatorsContainer.prototype.update = function () {
            _super.prototype.update.call(this);
            if (CricketHero.GameVars.paused) {
                return;
            }
            this.framesCounter++;
            if (this.framesCounter === 75) {
                this.framesCounter = 0;
                if (!CricketHero.GameVars.gameOver && !SpectatorsContainer.coinsFrenzy) {
                    var i = Math.floor(Math.random() * this.spectators.length);
                    var spectator = this.spectators[i];
                    spectator.bounce();
                }
            }
        };
        SpectatorsContainer.prototype.coinsFrenzyStarts = function () {
            SpectatorsContainer.coinsFrenzy = true;
            for (var i = 0; i < this.spectators.length; i++) {
                this.spectators[i].setToCelebrate();
            }
        };
        SpectatorsContainer.prototype.coinsFrenzyEnds = function () {
            SpectatorsContainer.coinsFrenzy = false;
            for (var i = 0; i < this.spectators.length; i++) {
                this.spectators[i].setIdle();
            }
        };
        SpectatorsContainer.prototype.celebrate = function () {
            for (var i = 0; i < this.spectators.length; i++) {
                if (Math.random() > .15) {
                    this.spectators[i].setToCelebrate();
                }
            }
            var rnd = Math.floor(Math.random() * 4) + 1;
            CricketHero.AudioManager.playSound("celebration_" + rnd);
        };
        SpectatorsContainer.prototype.strike = function () {
            if (CricketHero.GameVars.gameOver) {
                return;
            }
            for (var i = 0; i < this.spectators.length; i++) {
                if (Math.random() > .15) {
                    this.spectators[i].setSad();
                }
            }
            CricketHero.AudioManager.playSound("crowd_fail");
        };
        SpectatorsContainer.prototype.gameOver = function () {
            for (var i = 0; i < this.spectators.length; i++) {
                this.spectators[i].gameOver();
            }
        };
        SpectatorsContainer.prototype.onAdShown = function () {
            for (var i = 0; i < this.spectators.length; i++) {
                this.spectators[i].continue();
            }
        };
        SpectatorsContainer.SPECTATORS_POSITION = [
            { x: -205, y: -164 },
            { x: -252, y: -164 },
            { x: -220, y: -102 },
            { x: -210, y: -38 },
            { x: -260, y: -38 },
            { x: -215, y: 5 },
            { x: 230, y: -164 },
            { x: 220, y: -102 },
            { x: 270, y: -102 },
            { x: 240, y: -38 },
            { x: 210, y: 5 },
            { x: 265, y: 5 }
        ];
        return SpectatorsContainer;
    }(Phaser.Group));
    CricketHero.SpectatorsContainer = SpectatorsContainer;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var Frame = (function (_super) {
        __extends(Frame, _super);
        function Frame(game) {
            var _this = _super.call(this, game, null, "frame") || this;
            _this.x = CricketHero.GameConstants.GAME_WIDTH / 2;
            _this.y = CricketHero.GameConstants.GAME_HEIGHT / 2;
            var top = new Phaser.Image(_this.game, 0, -CricketHero.GameConstants.GAME_HEIGHT / 2, "texture_atlas_1", "frame_top.png");
            top.anchor.x = .5;
            top.scale.y = CricketHero.GameVars.scaleY;
            _this.add(top);
            var bottom = new Phaser.Image(_this.game, 0, CricketHero.GameConstants.GAME_HEIGHT / 2, "texture_atlas_1", "frame_top.png");
            bottom.anchor.x = .5;
            bottom.angle = 180;
            bottom.scale.y = CricketHero.GameVars.scaleY;
            _this.add(bottom);
            var left = new Phaser.Image(_this.game, -CricketHero.GameConstants.GAME_WIDTH / 2, 0, "texture_atlas_1", "frame_side.png");
            left.anchor.y = .5;
            left.scale.y = (CricketHero.GameConstants.GAME_HEIGHT - 2 * top.height) / left.height;
            _this.add(left);
            var right = new Phaser.Image(_this.game, CricketHero.GameConstants.GAME_WIDTH / 2, 0, "texture_atlas_1", "frame_side.png");
            right.anchor.y = .5;
            right.angle = 180;
            right.scale.y = (CricketHero.GameConstants.GAME_HEIGHT - 2 * top.height) / right.height;
            _this.add(right);
            return _this;
        }
        Frame.prototype.disappear = function () {
            this.game.add.tween(this.scale)
                .to({ x: 1.065, y: 1.065 }, 300, Phaser.Easing.Cubic.Out, true);
        };
        return Frame;
    }(Phaser.Group));
    CricketHero.Frame = Frame;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var GameTitle = (function (_super) {
        __extends(GameTitle, _super);
        function GameTitle(game) {
            var _this = _super.call(this, game, null, "game-title") || this;
            _this.framesCounter = 0;
            _this.x = CricketHero.GameConstants.GAME_WIDTH / 2;
            _this.y = 145;
            _this.scale.y = CricketHero.GameVars.scaleY;
            if (_this.game.scale.aspectRatio >= .745) {
                _this.scale.set(.825, .825 * CricketHero.GameVars.scaleY);
                _this.y = 102;
            }
            else if (_this.game.scale.aspectRatio >= .65) {
                _this.scale.set(.875, .875 * CricketHero.GameVars.scaleY);
                _this.y = 95;
            }
            else if (_this.game.scale.aspectRatio >= .625) {
                _this.scale.set(.875, .875 * CricketHero.GameVars.scaleY);
                _this.y = 90;
            }
            else {
                _this.y = 110;
            }
            _this.star = new Phaser.Image(_this.game, -80, -48, "texture_atlas_1", "title_star.png");
            _this.star.anchor.set(.5);
            _this.star.alpha = 0;
            _this.star.visible = false;
            _this.add(_this.star);
            _this.batTitle = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "title_bat.png");
            _this.batTitle.anchor.set(.5);
            _this.batTitle.alpha = 0;
            _this.add(_this.batTitle);
            _this.heroTitle = new Phaser.Image(_this.game, 30, 37, "texture_atlas_1", CricketHero.GameVars.gameData.language === CricketHero.GameConstants.LANGUAGE_HI ? "title_gunda.png" : "title_hero.png");
            _this.heroTitle.anchor.set(.5);
            _this.heroTitle.alpha = 0;
            _this.add(_this.heroTitle);
            _this.cricketTitle = new Phaser.Image(_this.game, -30, -50, "texture_atlas_1", "title_cricket.png");
            _this.cricketTitle.anchor.set(.5);
            _this.cricketTitle.alpha = 0;
            _this.add(_this.cricketTitle);
            if (CricketHero.GameVars.replayed) {
                _this.launchTweensWithDelay = false;
                _this.batTitle.alpha = 1;
                _this.cricketTitle.alpha = 1;
                _this.heroTitle.alpha = 1;
                _this.star.alpha = 1;
                _this.star.visible = true;
            }
            else {
                _this.launchTweensWithDelay = true;
            }
            return _this;
        }
        GameTitle.prototype.update = function () {
            _super.prototype.update.call(this);
            this.framesCounter++;
            if (this.launchTweensWithDelay && this.framesCounter === 10) {
                this.launchTweensWithDelay = false;
                this.game.add.tween(this.cricketTitle)
                    .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true, 250);
                this.game.add.tween(this.heroTitle)
                    .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true, 500);
                this.game.add.tween(this.batTitle)
                    .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true, 750);
                this.star.visible = true;
                this.game.add.tween(this.star)
                    .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true, 1000);
            }
            if (this.star.visible) {
                this.star.rotation += .02;
            }
        };
        GameTitle.prototype.disappear = function () {
            this.game.add.tween(this)
                .to({ alpha: 0, y: -100 }, 300, Phaser.Easing.Cubic.Out, true);
        };
        return GameTitle;
    }(Phaser.Group));
    CricketHero.GameTitle = GameTitle;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var LanguageSelectionButtonsContainer = (function (_super) {
        __extends(LanguageSelectionButtonsContainer, _super);
        function LanguageSelectionButtonsContainer(game) {
            var _this = _super.call(this, game, null, "language-selection-buttons-container") || this;
            _this.scale.y = CricketHero.GameVars.scaleY;
            _this.tweening = false;
            _this.buttonsShown = false;
            _this.btnEnglish = new Phaser.Button(_this.game, 0, 0, "texture_atlas_1", _this.onLanguageButtonClicked, _this);
            _this.btnEnglish.setFrames("btn_language_en_on.png", "btn_language_en_off.png", "btn_language_en_on.png");
            _this.btnEnglish.anchor.set(.5);
            _this.btnEnglish.visible = false;
            _this.btnEnglish.name = CricketHero.GameConstants.LAGUANGE_EN;
            _this.add(_this.btnEnglish);
            _this.btnPortuguese = new Phaser.Button(_this.game, 0, 0, "texture_atlas_1", _this.onLanguageButtonClicked, _this);
            _this.btnPortuguese.setFrames("btn_language_pt_on.png", "btn_language_pt_off.png", "btn_language_pt_on.png");
            _this.btnPortuguese.anchor.set(.5);
            _this.btnPortuguese.visible = false;
            _this.btnPortuguese.name = CricketHero.GameConstants.LANGUAGE_PT;
            _this.add(_this.btnPortuguese);
            _this.btnHindu = new Phaser.Button(_this.game, 0, 0, "texture_atlas_1", _this.onLanguageButtonClicked, _this);
            _this.btnHindu.setFrames("btn_language_hi_on.png", "btn_language_hi_off.png", "btn_language_hi_on.png");
            _this.btnHindu.anchor.set(.5);
            _this.btnHindu.visible = false;
            _this.btnHindu.name = CricketHero.GameConstants.LANGUAGE_HI;
            _this.add(_this.btnHindu);
            _this.btnLanguage = new Phaser.Button(_this.game, 0, 0, "texture_atlas_1", _this.onSelectionButtonClicked, _this);
            _this.btnLanguage.setFrames("btn_language_selection_on.png", "btn_language_selection_off.png", "btn_language_selection_on.png");
            _this.btnLanguage.anchor.set(.5);
            _this.add(_this.btnLanguage);
            return _this;
        }
        LanguageSelectionButtonsContainer.prototype.showButtons = function () {
            this.buttonsShown = true;
            this.tweening = true;
            this.btnEnglish.visible = true;
            this.game.add.tween(this.btnEnglish)
                .to({ x: 50 }, 150, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.tweening = false;
            }, this);
            this.btnPortuguese.visible = true;
            this.game.add.tween(this.btnPortuguese)
                .to({ x: 100 }, 150, Phaser.Easing.Cubic.Out, true);
            this.btnHindu.visible = true;
            this.game.add.tween(this.btnHindu)
                .to({ x: 150 }, 150, Phaser.Easing.Cubic.Out, true);
        };
        LanguageSelectionButtonsContainer.prototype.hideButtons = function () {
            this.buttonsShown = false;
            this.tweening = true;
            this.game.add.tween(this.btnEnglish)
                .to({ x: 0 }, 150, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.tweening = false;
                this.btnEnglish.visible = false;
            }, this);
            this.game.add.tween(this.btnPortuguese)
                .to({ x: 0 }, 150, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.btnPortuguese.visible = false;
            }, this);
            this.game.add.tween(this.btnHindu)
                .to({ x: 0 }, 150, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.btnHindu.visible = false;
            }, this);
        };
        LanguageSelectionButtonsContainer.prototype.onSelectionButtonClicked = function () {
            if (this.tweening) {
                return;
            }
            if (this.buttonsShown) {
                this.hideButtons();
            }
            else {
                this.showButtons();
            }
        };
        LanguageSelectionButtonsContainer.prototype.onLanguageButtonClicked = function (b) {
            if (this.tweening) {
                return;
            }
            this.hideButtons();
            CricketHero.GameManager.changeLanguege(b.name);
        };
        return LanguageSelectionButtonsContainer;
    }(Phaser.Group));
    CricketHero.LanguageSelectionButtonsContainer = LanguageSelectionButtonsContainer;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var LastAndBestScoreContainer = (function (_super) {
        __extends(LastAndBestScoreContainer, _super);
        function LastAndBestScoreContainer(game) {
            var _this = _super.call(this, game, null, "last-best-score-container") || this;
            _this.x = CricketHero.GameConstants.GAME_WIDTH / 2;
            _this.y = 485;
            _this.scale.y = CricketHero.GameVars.scaleY;
            var lastBestTab = new Phaser.Image(_this.game, 0, 0, "texture_atlas_4", "tab_last_best_" + CricketHero.GameVars.gameData.language + ".png");
            lastBestTab.anchor.x = .5;
            _this.add(lastBestTab);
            var fontSize;
            if (CricketHero.GameVars.gameData.lastScore < 10) {
                fontSize = 46;
            }
            else if (CricketHero.GameVars.gameData.lastScore < 100) {
                fontSize = 42;
            }
            else {
                fontSize = 32;
            }
            var lastScoreLabel = new Phaser.BitmapText(_this.game, -38, 54, "freshman_white", CricketHero.GameVars.gameData.lastScore.toString(), fontSize);
            lastScoreLabel.anchor.set(.5);
            _this.add(lastScoreLabel);
            if (CricketHero.GameVars.gameData.score < 10) {
                fontSize = 46;
            }
            else if (CricketHero.GameVars.gameData.score < 100) {
                fontSize = 42;
            }
            else {
                fontSize = 32;
            }
            var bestScoreLabel = new Phaser.BitmapText(_this.game, 38, 54, "freshman_white", CricketHero.GameVars.gameData.score.toString(), fontSize);
            bestScoreLabel.anchor.set(.5);
            _this.add(bestScoreLabel);
            return _this;
        }
        LastAndBestScoreContainer.prototype.disappear = function () {
            this.game.add.tween(this)
                .to({ alpha: 0, y: CricketHero.GameConstants.GAME_HEIGHT / 2 - 25 }, 300, Phaser.Easing.Cubic.Out, true);
        };
        return LastAndBestScoreContainer;
    }(Phaser.Group));
    CricketHero.LastAndBestScoreContainer = LastAndBestScoreContainer;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var StartLayer = (function (_super) {
        __extends(StartLayer, _super);
        function StartLayer(game) {
            var _this = _super.call(this, game, null, "start-layer") || this;
            StartLayer.currentInstance = _this;
            var transparentLayer = _this.create(0, 0, _this.game.cache.getBitmapData(CricketHero.GameConstants.WHITE_SQUARE));
            transparentLayer.scale.set(CricketHero.GameConstants.GAME_WIDTH / CricketHero.GameConstants.BITMAP_SIZE, CricketHero.GameConstants.GAME_HEIGHT / CricketHero.GameConstants.BITMAP_SIZE);
            transparentLayer.alpha = 0;
            transparentLayer.inputEnabled = true;
            transparentLayer.events.onInputDown.add(_this.disappear, _this);
            _this.framesCounter = 0;
            _this.framesVisibleInvisible = 25;
            _this.tapToStartImage = new Phaser.Image(_this.game, CricketHero.GameConstants.GAME_WIDTH / 2, 430, "texture_atlas_4", _this.game.device.touch ? "tap_to_start_" + CricketHero.GameVars.gameData.language + ".png" : "click_to_start_" + CricketHero.GameVars.gameData.language + ".png");
            _this.tapToStartImage.anchor.set(.5);
            _this.tapToStartImage.scale.y = CricketHero.GameVars.scaleY;
            _this.add(_this.tapToStartImage);
            if (CricketHero.GameVars.gameData.language === CricketHero.GameConstants.LANGUAGE_HI) {
                _this.tapToStartImage.scale.set(.85, .85 * CricketHero.GameVars.scaleY);
            }
            else if (CricketHero.GameVars.gameData.language === CricketHero.GameConstants.LANGUAGE_PT) {
                _this.tapToStartImage.scale.set(.75, .75 * CricketHero.GameVars.scaleY);
            }
            _this.frame = new CricketHero.Frame(_this.game);
            _this.add(_this.frame);
            _this.buttonsContainer = new Phaser.Group(_this.game);
            _this.add(_this.buttonsContainer);
            if (!CricketHero.GameVars.gameData.handIconOnStartShown) {
                var handCursor = new Phaser.Image(_this.game, CricketHero.GameConstants.GAME_WIDTH / 2 - 35, 450, "texture_atlas_1", "hand-cursor.png");
                handCursor.anchor.x = 1;
                handCursor.scale.y = CricketHero.GameVars.scaleY;
                _this.add(handCursor);
                _this.game.add.tween(handCursor.scale)
                    .to({ x: 1.1, y: 1.1 * CricketHero.GameVars.scaleY }, 350, Phaser.Easing.Cubic.Out, true, 0, -1, true);
            }
            if (CricketHero.GameVars.replayed) {
                _this.gameTitle = null;
                CricketHero.DisplayManager.setState(CricketHero.DisplayManager.PLAYER_AHEAD_STATE);
                _this.lastAndBestContainer = new CricketHero.LastAndBestScoreContainer(_this.game);
                _this.add(_this.lastAndBestContainer);
            }
            else {
                _this.gameTitle = new CricketHero.GameTitle(_this.game);
                _this.add(_this.gameTitle);
                _this.lastAndBestContainer = null;
            }
            var languageSelectionButtonsContainer = new CricketHero.LanguageSelectionButtonsContainer(_this.game);
            languageSelectionButtonsContainer.x = 100;
            languageSelectionButtonsContainer.y = CricketHero.GameConstants.GAME_HEIGHT - 40 * CricketHero.GameVars.scaleY;
            _this.buttonsContainer.add(languageSelectionButtonsContainer);
            var audioButton = new CricketHero.AudioButton(_this.game);
            audioButton.x = 40;
            audioButton.y = CricketHero.GameConstants.GAME_HEIGHT - 40 * CricketHero.GameVars.scaleY;
            audioButton.scale.y = CricketHero.GameVars.scaleY;
            _this.buttonsContainer.add(audioButton);
            if (!CricketHero.GameVars.replayed && CricketHero.GameConstants.SPONSOR !== CricketHero.GameConstants.SPONSOR_FUNO) {
                CricketHero.AudioManager.playSound("splash_title_temp");
            }
            var gameText = _this.game.cache.getJSON("game-text")[CricketHero.GameVars.gameData.language];
            if (CricketHero.GameConstants.SPONSOR !== CricketHero.GameConstants.SPONSOR_FUNO) {
                var copyRightLabel = new Phaser.Text(_this.game, CricketHero.GameConstants.GAME_WIDTH - 18, CricketHero.GameConstants.GAME_HEIGHT - 10 * CricketHero.GameVars.scaleY, gameText.MADE_BY, { font: "20px Arial", fill: "#FFFFFF" });
                copyRightLabel.anchor.set(1);
                copyRightLabel.scale.y = CricketHero.GameVars.scaleY;
                _this.buttonsContainer.add(copyRightLabel);
            }
            return _this;
        }
        StartLayer.prototype.destroy = function (destroyChildren, soft) {
            StartLayer.currentInstance = null;
            CricketHero.AudioManager.stopSound("splash_title_temp", true);
            _super.prototype.destroy.call(this, destroyChildren, soft);
        };
        StartLayer.prototype.update = function () {
            _super.prototype.update.call(this);
            this.framesCounter++;
            if (this.framesCounter === this.framesVisibleInvisible) {
                this.framesCounter = 0;
                this.framesVisibleInvisible = this.framesVisibleInvisible === 18 ? 40 : 18;
                this.tapToStartImage.visible = !this.tapToStartImage.visible;
            }
        };
        StartLayer.prototype.disappear = function () {
            if (this.gameTitle) {
                this.gameTitle.disappear();
            }
            if (this.lastAndBestContainer) {
                this.lastAndBestContainer.disappear();
            }
            this.frame.disappear();
            this.game.add.tween(this.buttonsContainer)
                .to({ y: 100 * CricketHero.GameVars.scaleY }, 300, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                CricketHero.GameManager.startMatch();
                this.destroy();
            }, this);
        };
        StartLayer.currentInstance = null;
        return StartLayer;
    }(Phaser.Group));
    CricketHero.StartLayer = StartLayer;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var TargetCircle = (function (_super) {
        __extends(TargetCircle, _super);
        function TargetCircle(game, targetType) {
            var _this = _super.call(this, game, null, "target-circle") || this;
            TargetCircle.radiusOuterCircle = TargetCircle.DEFAULT_TARGET_RADIUS;
            _this.y = CricketHero.StageContainer.CIRCLE_PY;
            _this.targetType = targetType;
            _this.activated = true;
            switch (_this.targetType) {
                case CricketHero.GameConstants.CENTER:
                    _this.x = 0;
                    break;
                case CricketHero.GameConstants.LEFT:
                    _this.x = -TargetCircle.CIRCLE_DX;
                    break;
                case CricketHero.GameConstants.RIGHT:
                    _this.x = TargetCircle.CIRCLE_DX;
                    break;
                default:
                    break;
            }
            _this.coinsFrenzyEffect = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "coin_fx_extra.png");
            _this.coinsFrenzyEffect.anchor.set(.5);
            _this.coinsFrenzyEffect.visible = false;
            _this.add(_this.coinsFrenzyEffect);
            _this.innerCircle = new Phaser.Graphics(_this.game);
            _this.innerCircle.lineStyle(1.5, 0xFF0000, .65);
            _this.innerCircle.drawCircle(0, 0, 22);
            _this.add(_this.innerCircle);
            _this.outerCircle = new Phaser.Sprite(_this.game, 0, 0, "texture_atlas_1", "circle_hit.png");
            _this.outerCircle.anchor.set(.5);
            _this.outerCircle.width = 2 * TargetCircle.DEFAULT_TARGET_RADIUS;
            _this.outerCircle.height = 2 * TargetCircle.DEFAULT_TARGET_RADIUS;
            _this.outerCircle.animations.add("homerun", Phaser.Animation.generateFrameNames("circle_hit_homerun_", 1, 10, ".png", 2));
            _this.add(_this.outerCircle);
            _this.innerShape = new Phaser.Graphics(_this.game);
            _this.innerShape.beginFill(0xFF0000, .5);
            _this.innerShape.drawCircle(0, 0, 22);
            _this.innerShape.visible = false;
            _this.add(_this.innerShape);
            _this.outerCircle.scale.set(0);
            _this.game.add.tween(_this.outerCircle)
                .to({ width: 2 * TargetCircle.DEFAULT_TARGET_RADIUS, height: 2 * TargetCircle.DEFAULT_TARGET_RADIUS }, 850, Phaser.Easing.Elastic.Out, true);
            return _this;
        }
        TargetCircle.prototype.update = function () {
            _super.prototype.update.call(this);
            this.outerCircle.width = 2 * TargetCircle.radiusOuterCircle;
            this.outerCircle.height = 2 * TargetCircle.radiusOuterCircle;
            if (this.activated && CricketHero.GameVars.coinsFrenzy) {
                this.coinsFrenzyEffect.visible = true;
                if (Math.random() > .7) {
                    this.coinsFrenzyEffect.scale.set(.35 + .75 * Math.random());
                }
                if (Math.random() > .7) {
                    this.coinsFrenzyEffect.alpha = .5 + .5 * Math.random();
                }
            }
            if (!CricketHero.GameVars.coinsFrenzy) {
                this.coinsFrenzyEffect.visible = false;
            }
        };
        TargetCircle.prototype.gameOver = function () {
            this.game.add.tween(this.scale)
                .to({ x: 0, y: 0 }, 850, Phaser.Easing.Elastic.In, true)
                .onComplete.add(function () {
                this.visible = false;
            }, this);
        };
        TargetCircle.prototype.continue = function () {
            this.visible = true;
            this.game.add.tween(this.scale)
                .to({ x: 1, y: 1 }, 350, Phaser.Easing.Elastic.In, true);
        };
        TargetCircle.prototype.activate = function () {
            this.activated = true;
            if (CricketHero.GameVars.homerunMode) {
                this.outerCircle.play("homerun", 12, false);
            }
            if (this.innerCircle.visible) {
                this.innerCircle.alpha = 1;
            }
            this.outerCircle.frameName = "circle_hit.png";
        };
        TargetCircle.prototype.deactivate = function () {
            this.activated = false;
            if (CricketHero.GameVars.homerunMode) {
                this.outerCircle.animations.stop();
                this.outerCircle.frameName = "circle_hit.png";
            }
            if (this.innerCircle.visible) {
                this.innerCircle.alpha = .4;
            }
            this.outerCircle.frameName = "circle_inactive.png";
        };
        TargetCircle.prototype.activateHomerunMode = function () {
            if (CricketHero.GameVars.matchData.targetCircles === 1) {
                this.outerCircle.play("homerun", 12, false);
            }
            else if (CricketHero.GameVars.matchData.targetCircles === 2) {
                if (this.targetType === CricketHero.GameVars.activatedCircleSide) {
                    this.outerCircle.play("homerun", 12, false);
                }
                else {
                    this.outerCircle.frameName = "circle_inactive.png";
                }
            }
            this.innerCircle.visible = false;
        };
        TargetCircle.prototype.deactivateHomerunMode = function (homerun) {
            this.outerCircle.animations.stop();
            this.outerCircle.frameName = "circle_hit.png";
            this.innerCircle.visible = true;
        };
        TargetCircle.prototype.ballReachedCenter = function () {
            this.innerShape.visible = true;
            this.game.add.tween(this.innerShape.scale)
                .to({ x: 1.75, y: 1.75 }, 100, Phaser.Easing.Cubic.Out, true, 0, 0, true)
                .onComplete.add(function () {
                this.innerShape.visible = false;
            }, this);
        };
        TargetCircle.prototype.makeSmall = function () {
            this.game.add.tween(TargetCircle)
                .to({ radiusOuterCircle: TargetCircle.SMALL_TARGET_RADIUS }, 350, Phaser.Easing.Cubic.Out, true);
        };
        TargetCircle.prototype.restoreSize = function () {
            this.game.add.tween(TargetCircle)
                .to({ radiusOuterCircle: TargetCircle.DEFAULT_TARGET_RADIUS }, 350, Phaser.Easing.Cubic.Out, true);
        };
        TargetCircle.prototype.getTargetCircleWorldPosition = function () {
            return this.outerCircle.worldPosition;
        };
        TargetCircle.DEFAULT_TARGET_RADIUS = 65;
        TargetCircle.SMALL_TARGET_RADIUS = 45;
        TargetCircle.CIRCLE_DX = 30;
        return TargetCircle;
    }(Phaser.Group));
    CricketHero.TargetCircle = TargetCircle;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var TargetCirclesContainer = (function (_super) {
        __extends(TargetCirclesContainer, _super);
        function TargetCirclesContainer(game) {
            var _this = _super.call(this, game, null, "target-circles-container") || this;
            _this.homerunStar = new Phaser.Image(_this.game, 0, CricketHero.StageContainer.CIRCLE_PY, "texture_atlas_1", "homerun_4_star.png");
            _this.homerunStar.anchor.set(.5);
            _this.homerunStar.visible = false;
            _this.add(_this.homerunStar);
            if (CricketHero.GameVars.matchData.targetCircles === 1 || !CricketHero.GameVars.enterGameDirectly) {
                _this.centralTargetCircle = new CricketHero.TargetCircle(_this.game, CricketHero.GameConstants.CENTER);
                _this.add(_this.centralTargetCircle);
                _this.leftTargetCircle = null;
                _this.rightTargetCircle = null;
            }
            else if (CricketHero.GameVars.matchData.targetCircles === 2) {
                _this.centralTargetCircle = null;
                _this.leftTargetCircle = new CricketHero.TargetCircle(_this.game, CricketHero.GameConstants.LEFT);
                _this.add(_this.leftTargetCircle);
                _this.rightTargetCircle = new CricketHero.TargetCircle(_this.game, CricketHero.GameConstants.RIGHT);
                _this.add(_this.rightTargetCircle);
            }
            return _this;
        }
        TargetCirclesContainer.prototype.activateHomerunMode = function () {
            var star_px;
            this.homerunStar.visible = true;
            this.homerunStar.angle = 0;
            this.homerunStar.alpha = 1;
            this.homerunStar.scale.set(1);
            this.homerunStar.x = 300;
            if (CricketHero.GameVars.matchData.targetCircles === 1) {
                star_px = 0;
            }
            else {
                if (CricketHero.GameVars.activatedCircleSide === CricketHero.GameConstants.RIGHT) {
                    star_px = CricketHero.TargetCircle.CIRCLE_DX;
                }
                else {
                    star_px = -CricketHero.TargetCircle.CIRCLE_DX;
                }
            }
            this.game.add.tween(this.homerunStar)
                .to({ x: star_px }, 500, Phaser.Easing.Bounce.Out, true);
            if (CricketHero.GameVars.matchData.targetCircles === 1) {
                this.centralTargetCircle.activateHomerunMode();
            }
            else if (CricketHero.GameVars.matchData.targetCircles === 2) {
                this.leftTargetCircle.activateHomerunMode();
                this.rightTargetCircle.activateHomerunMode();
            }
        };
        TargetCirclesContainer.prototype.deactivateHomerunMode = function () {
            if (!CricketHero.GameVars.homerun) {
                this.game.add.tween(this.homerunStar)
                    .to({ x: -300 }, 250, Phaser.Easing.Cubic.Out, true);
            }
            if (CricketHero.GameVars.matchData.targetCircles === 1) {
                this.centralTargetCircle.deactivateHomerunMode();
            }
            else if (CricketHero.GameVars.matchData.targetCircles === 2) {
                this.leftTargetCircle.deactivateHomerunMode();
                this.rightTargetCircle.deactivateHomerunMode();
            }
        };
        TargetCirclesContainer.prototype.homerun = function () {
            if (CricketHero.GameVars.homeRunType === CricketHero.GameConstants.HOMERUN_4) {
                this.homerunStar.frameName = "homerun_4_star.png";
            }
            else {
                this.homerunStar.frameName = "homerun_6_star.png";
            }
            this.game.add.tween(this.homerunStar.scale)
                .to({ x: 5, y: 5 }, 550, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.homerunStar)
                .to({ alpha: 0, angle: 25 }, 450, Phaser.Easing.Cubic.Out, true, 300)
                .onComplete.add(function () {
                this.homerunStar.visible = false;
            }, this);
            this.deactivateHomerunMode();
        };
        TargetCirclesContainer.prototype.activate2CirclesMode = function () {
            this.centralTargetCircle.destroy();
            this.centralTargetCircle = null;
            this.leftTargetCircle = new CricketHero.TargetCircle(this.game, CricketHero.GameConstants.LEFT);
            this.add(this.leftTargetCircle);
            this.rightTargetCircle = new CricketHero.TargetCircle(this.game, CricketHero.GameConstants.RIGHT);
            this.add(this.rightTargetCircle);
        };
        TargetCirclesContainer.prototype.activate1CircleMode = function () {
            this.centralTargetCircle = new CricketHero.TargetCircle(this.game, CricketHero.GameConstants.CENTER);
            this.add(this.centralTargetCircle);
            this.leftTargetCircle.destroy();
            this.rightTargetCircle.destroy();
        };
        TargetCirclesContainer.prototype.ballReachedCenter = function () {
            if (CricketHero.GameVars.matchData.targetCircles === 1) {
                this.centralTargetCircle.ballReachedCenter();
            }
            else if (CricketHero.GameVars.matchData.targetCircles === 2) {
                if (CricketHero.GameVars.activatedCircleSide === CricketHero.GameConstants.LEFT) {
                    this.leftTargetCircle.ballReachedCenter();
                }
                else {
                    this.rightTargetCircle.ballReachedCenter();
                }
            }
        };
        TargetCirclesContainer.prototype.activateCircle = function (tutorialMode, tutorialSide) {
            if (tutorialMode) {
                if (tutorialSide === CricketHero.GameConstants.LEFT) {
                    this.leftTargetCircle.activate();
                    this.rightTargetCircle.deactivate();
                }
                else {
                    this.leftTargetCircle.deactivate();
                    this.rightTargetCircle.activate();
                }
            }
            else {
                if (CricketHero.GameVars.activatedCircleSide === CricketHero.GameConstants.LEFT) {
                    this.leftTargetCircle.activate();
                    this.rightTargetCircle.deactivate();
                    if (CricketHero.GameVars.homerunMode) {
                        this.homerunStar.x = -CricketHero.TargetCircle.CIRCLE_DX;
                    }
                }
                else {
                    this.leftTargetCircle.deactivate();
                    this.rightTargetCircle.activate();
                    if (CricketHero.GameVars.homerunMode) {
                        this.homerunStar.x = CricketHero.TargetCircle.CIRCLE_DX;
                    }
                }
            }
        };
        TargetCirclesContainer.prototype.makeSmall = function () {
            if (CricketHero.GameVars.matchData.targetCircles === 1) {
                this.centralTargetCircle.makeSmall();
            }
            else if (CricketHero.GameVars.matchData.targetCircles === 2) {
                this.leftTargetCircle.makeSmall();
                this.rightTargetCircle.makeSmall();
            }
        };
        TargetCirclesContainer.prototype.restoreSize = function () {
            if (CricketHero.GameVars.matchData.targetCircles === 1) {
                this.centralTargetCircle.restoreSize();
            }
            else if (CricketHero.GameVars.matchData.targetCircles === 2) {
                this.leftTargetCircle.restoreSize();
                this.rightTargetCircle.restoreSize();
            }
        };
        TargetCirclesContainer.prototype.gameOver = function () {
            this.homerunStar.visible = false;
            if (CricketHero.GameVars.matchData.targetCircles === 1) {
                this.centralTargetCircle.gameOver();
            }
            else if (CricketHero.GameVars.matchData.targetCircles === 2) {
                this.leftTargetCircle.gameOver();
                this.rightTargetCircle.gameOver();
            }
        };
        TargetCirclesContainer.prototype.onAdShown = function () {
            if (CricketHero.GameVars.matchData.targetCircles === 1) {
                this.centralTargetCircle.continue();
            }
            else if (CricketHero.GameVars.matchData.targetCircles === 2) {
                this.leftTargetCircle.continue();
                this.rightTargetCircle.continue();
            }
            this.deactivateHomerunMode();
        };
        TargetCirclesContainer.prototype.getTargetCircleWorldPosition = function () {
            var p;
            if (CricketHero.GameVars.matchData.targetCircles === 1) {
                p = this.centralTargetCircle.getTargetCircleWorldPosition();
            }
            else if (CricketHero.GameVars.matchData.targetCircles === 2) {
                if (CricketHero.GameVars.activatedCircleSide === CricketHero.GameConstants.LEFT) {
                    p = this.leftTargetCircle.getTargetCircleWorldPosition();
                }
                else {
                    p = this.rightTargetCircle.getTargetCircleWorldPosition();
                }
            }
            return p;
        };
        return TargetCirclesContainer;
    }(Phaser.Group));
    CricketHero.TargetCirclesContainer = TargetCirclesContainer;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var Bug = (function (_super) {
        __extends(Bug, _super);
        function Bug(game) {
            var _this = _super.call(this, game, null, "bug") || this;
            _this.scale.y = CricketHero.GameVars.scaleY;
            _this.bugContainer = new Phaser.Group(_this.game);
            _this.bugContainer.x = CricketHero.GameConstants.GAME_WIDTH + 30;
            _this.bugContainer.y = 0;
            _this.add(_this.bugContainer);
            _this.bug = _this.bugContainer.create(0, 125, "texture_atlas_1", "bug_0001.png");
            _this.bug.angle = -90;
            _this.bug.scale.set(1.35);
            _this.bug.animations.add("walk", Phaser.Animation.generateFrameNames("bug_", 1, 15, ".png", 4));
            _this.bug.animations.play("walk", 20, true);
            _this.game.add.tween(_this.bugContainer)
                .to({ angle: 120 }, 10000, Phaser.Easing.Linear.None, true, 2500)
                .onComplete.add(function () {
                this.destroy();
            }, _this);
            return _this;
        }
        return Bug;
    }(Phaser.Group));
    CricketHero.Bug = Bug;
})(CricketHero || (CricketHero = {}));
var PhaserCachebuster;
(function (PhaserCachebuster) {
    var CacheBuster = (function (_super) {
        __extends(CacheBuster, _super);
        function CacheBuster(game, parent) {
            var _this = _super.call(this, game, parent) || this;
            _this.patchLoader();
            return _this;
        }
        CacheBuster.prototype.patchLoader = function () {
            Object.defineProperty(Phaser.Loader, "cacheBuster", {
                value: null
            });
            Phaser.Loader.prototype.transformUrl = function (url, file) {
                if (!url) {
                    return "";
                }
                if (this.cacheBuster !== null && null === url.match(/^(data:)/)) {
                    url += "?v=" + this.cacheBuster;
                }
                if (url.match(/^(?:blob:|data:|http:\/\/|https:\/\/|\/\/)/)) {
                    return url;
                }
                else {
                    return this.baseURL + file.path + url;
                }
            };
        };
        return CacheBuster;
    }(Phaser.Plugin));
    PhaserCachebuster.CacheBuster = CacheBuster;
})(PhaserCachebuster || (PhaserCachebuster = {}));
var CricketHero;
(function (CricketHero) {
    var RectangleWithRadius = (function (_super) {
        __extends(RectangleWithRadius, _super);
        function RectangleWithRadius(game, x, y, width, height, r, color, alpha, configuration, blendMode) {
            var _this = _super.call(this, game, null, "rectangle_with_radius", false) || this;
            if (typeof configuration === "undefined") {
                configuration = RectangleWithRadius.NORMAL_CONFIGURATION;
            }
            if (typeof blendMode === "undefined") {
                blendMode = 0;
            }
            if (typeof alpha === "undefined") {
                alpha = 1;
            }
            var deltaY = 0;
            if (configuration === RectangleWithRadius.BOTTOM_CONFIGURATION) {
                deltaY = -r;
            }
            var reusableBmd = game.add.bitmapData(100, 100);
            reusableBmd.ctx.beginPath();
            reusableBmd.ctx.rect(0, 0, 100, 100);
            reusableBmd.ctx.fillStyle = color;
            reusableBmd.ctx.fill();
            var rectangle = new Phaser.Sprite(game, x + r, y + r + deltaY, reusableBmd);
            rectangle.scale.setTo((width - 2 * r) / 100, (height - 2 * r) / 100);
            rectangle.alpha = alpha;
            rectangle.blendMode = blendMode;
            _this.add(rectangle);
            if (configuration === RectangleWithRadius.NORMAL_CONFIGURATION || configuration === RectangleWithRadius.TOP_CONFIGURATION) {
                rectangle = new Phaser.Sprite(game, x + r, y, reusableBmd);
                rectangle.scale.setTo((width - 2 * r) / 100, r / 100 + deltaY);
                rectangle.alpha = alpha;
                rectangle.blendMode = blendMode;
                _this.add(rectangle);
            }
            rectangle = new Phaser.Sprite(game, x + width - r, y + r + deltaY, reusableBmd);
            rectangle.scale.setTo(r / 100, (height - 2 * r) / 100);
            rectangle.alpha = alpha;
            rectangle.blendMode = blendMode;
            _this.add(rectangle);
            if (configuration === RectangleWithRadius.NORMAL_CONFIGURATION || configuration === RectangleWithRadius.BOTTOM_CONFIGURATION) {
                rectangle = new Phaser.Sprite(game, x + r, y + height - r + deltaY, reusableBmd);
                rectangle.scale.setTo((width - 2 * r) / 100, r / 100);
                rectangle.alpha = alpha;
                rectangle.blendMode = blendMode;
                _this.add(rectangle);
            }
            rectangle = new Phaser.Sprite(game, x, y + r + deltaY, reusableBmd);
            rectangle.scale.setTo(r / 100, (height - 2 * r) / 100);
            rectangle.alpha = alpha;
            rectangle.blendMode = blendMode;
            _this.add(rectangle);
            var cornerBmd = game.add.bitmapData(r, r);
            cornerBmd.ctx.beginPath();
            cornerBmd.ctx.arc(0, 0, r, 0, Math.PI);
            cornerBmd.ctx.fillStyle = color;
            cornerBmd.ctx.fill();
            var corner;
            if (configuration === RectangleWithRadius.NORMAL_CONFIGURATION || configuration === RectangleWithRadius.TOP_CONFIGURATION) {
                corner = new Phaser.Sprite(game, x + r, y + r + deltaY, cornerBmd);
                corner.alpha = alpha;
                corner.angle = 180;
                corner.blendMode = blendMode;
                _this.add(corner);
                corner = new Phaser.Sprite(game, x + width - r, y + r + deltaY, cornerBmd);
                corner.alpha = alpha;
                corner.angle = 270;
                corner.blendMode = blendMode;
                _this.add(corner);
            }
            if (configuration === RectangleWithRadius.NORMAL_CONFIGURATION || configuration === RectangleWithRadius.BOTTOM_CONFIGURATION) {
                corner = new Phaser.Sprite(game, x + r, y + height - r + deltaY, cornerBmd);
                corner.alpha = alpha;
                corner.angle = 90;
                corner.blendMode = blendMode;
                _this.add(corner);
                corner = new Phaser.Sprite(game, x + width - r, y + height - r + deltaY, cornerBmd);
                corner.alpha = alpha;
                corner.angle = 0;
                corner.blendMode = blendMode;
                _this.add(corner);
            }
            return _this;
        }
        RectangleWithRadius.TOP_CONFIGURATION = "top";
        RectangleWithRadius.BOTTOM_CONFIGURATION = "botton";
        RectangleWithRadius.NORMAL_CONFIGURATION = "normal";
        return RectangleWithRadius;
    }(Phaser.Group));
    CricketHero.RectangleWithRadius = RectangleWithRadius;
})(CricketHero || (CricketHero = {}));
var CricketHero;
(function (CricketHero) {
    var Vector2D = (function () {
        function Vector2D(x, y) {
            this.x = x;
            this.y = y;
        }
        Vector2D.prototype.plus = function (a) {
            var v = new Vector2D(this.x, this.y);
            v.x = v.x + a.x;
            v.y = v.y + a.y;
            return v;
        };
        Vector2D.prototype.minus = function (a) {
            var v = new Vector2D(this.x, this.y);
            v.x = v.x - a.x;
            v.y = v.y - a.y;
            return v;
        };
        Vector2D.prototype.times = function (m) {
            var v = new Vector2D(this.x, this.y);
            if (m instanceof Vector2D) {
                v.x *= m.x;
                v.y *= m.y;
            }
            else {
                v.x *= m;
                v.y *= m;
            }
            return v;
        };
        Vector2D.prototype.invert = function () {
            var v = new Vector2D(this.x, this.y);
            v.x *= -1;
            v.y *= -1;
            return v;
        };
        Vector2D.prototype.normalize = function () {
            var v = new Vector2D(this.x, this.y);
            v = v.times(1 / v.magnitude);
            return v;
        };
        Vector2D.prototype.dot = function (v) {
            return this.x * v.x + this.y * v.y;
        };
        Vector2D.prototype.cross = function (v) {
            return Math.abs(this.x * v.y - this.y * v.x);
        };
        Vector2D.prototype.angleBetween = function (v) {
            return Math.acos(this.dot(v) / (this.magnitude * v.magnitude)) * 180 / Math.PI;
        };
        Vector2D.prototype.getRightNormal = function () {
            return new Vector2D(this.y, -this.x);
        };
        Vector2D.prototype.getLeftNormal = function () {
            return new Vector2D(-this.y, this.x);
        };
        Object.defineProperty(Vector2D.prototype, "angle", {
            get: function () {
                return Math.atan2(this.y, this.x) * 180 / Math.PI;
            },
            set: function (angle) {
                var a;
                if (isNaN(angle)) {
                    a = 0;
                }
                else {
                    a = angle * (Math.PI / 180);
                }
                var l = Math.sqrt(this.x * this.x + this.y * this.y);
                this.x = l * Math.cos(a);
                this.y = l * Math.sin(a);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector2D.prototype, "magnitude", {
            get: function () {
                return Math.sqrt(this.x * this.x + this.y * this.y);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector2D.prototype, "magnitudeSquared", {
            get: function () {
                return this.x * this.x + this.y * this.y;
            },
            enumerable: true,
            configurable: true
        });
        return Vector2D;
    }());
    CricketHero.Vector2D = Vector2D;
})(CricketHero || (CricketHero = {}));
//# sourceMappingURL=cricket-hero.min.js.map