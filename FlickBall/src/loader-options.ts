
// LoaderXhrData
// =============
// This map is generated by python script, it maps file name to file size for smooth progress

export const LoaderXhrData: { [key: string]: number } = {};
export const LoaderXhrDataGzipped: { [key: string]: number } = {};
export const LoaderXhrDataBrotlied: { [key: string]: number } = {};

const isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;

// Do not use names above this is legacy naming, instead use this function
export function LoaderResourceSize(resource: string,
                                   loadedSize: number,
                                   serverSize: number | undefined): number {
    if (serverSize !== undefined && serverSize > 0) {
        return serverSize;
    }

    const index = resource.lastIndexOf("/");
    if (index > 0) {
        resource = resource.substr(index + 1);
    }

    if (resource.endsWith(".gz")) {
        resource = resource.substr(0, resource.length - 3);
    }

    if (resource.endsWith(".br")) {
        resource = resource.substr(0, resource.length - 3);
        if (isFirefox && LoaderXhrDataBrotlied[resource] !== undefined) {
            return LoaderXhrDataBrotlied[resource];
        }
    }

    if (isFirefox && LoaderXhrDataGzipped[resource] !== undefined) {
        return LoaderXhrDataGzipped[resource];
    } else if (LoaderXhrData[resource] !== undefined) {
        return LoaderXhrData[resource];
    }

    return loadedSize * 2;
}

export type LoaderRequestSuccessCallback = (response: any, origin: "cache" | "http" | "external") => void;
export type LoaderRequestProgress = (total: number, loaded: number) => void;

export type LoaderRequestResponseType = "" | "arraybuffer" | "json" | "text" | "response";

export interface LoaderRequestOptions {
    method?: "POST" | "GET";
    responseType?: LoaderRequestResponseType;
    data?: any;
    fail?: (url: string, status: number, message: string) => void;
    progress?: LoaderRequestProgress;
    success: LoaderRequestSuccessCallback;
}

export interface LoaderDownloadTask {
    method: "POST" | "GET";
    url: string;
    // optional data for request
    data?: any;
    responseType: LoaderRequestResponseType;

    success: (response: any, origin: "cache" | "http" | "external") => void;
    fail: (url: string, status: number, message: string) => void;
    progress: (total: number, loaded: number) => void;
}
